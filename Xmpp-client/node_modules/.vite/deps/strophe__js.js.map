{
  "version": 3,
  "sources": ["../../ws/browser.js", "../../@xmldom/xmldom/lib/conventions.js", "../../@xmldom/xmldom/lib/dom.js", "../../@xmldom/xmldom/lib/entities.js", "../../@xmldom/xmldom/lib/sax.js", "../../@xmldom/xmldom/lib/dom-parser.js", "../../@xmldom/xmldom/lib/index.js", "../../abab/lib/atob.js", "../../abab/lib/btoa.js", "../../abab/index.js", "../../strophe.js/src/shims.js", "../../strophe.js/src/utils.js", "../../strophe.js/src/constants.js", "../../strophe.js/src/log.js", "../../strophe.js/src/builder.js", "../../strophe.js/src/request.js", "../../strophe.js/src/bosh.js", "../../strophe.js/src/connection.js", "../../strophe.js/src/handler.js", "../../strophe.js/src/timed-handler.js", "../../strophe.js/src/sasl.js", "../../strophe.js/src/sasl-anon.js", "../../strophe.js/src/sasl-external.js", "../../strophe.js/src/sasl-oauthbearer.js", "../../strophe.js/src/sasl-plain.js", "../../strophe.js/src/scram.js", "../../strophe.js/src/sasl-sha1.js", "../../strophe.js/src/sasl-sha256.js", "../../strophe.js/src/sasl-sha384.js", "../../strophe.js/src/sasl-sha512.js", "../../strophe.js/src/sasl-xoauth2.js", "../../strophe.js/src/errors.js", "../../strophe.js/src/websocket.js", "../../strophe.js/src/worker-websocket.js", "../../strophe.js/src/stanza.js", "../../strophe.js/src/index.js"],
  "sourcesContent": ["'use strict';\n\nmodule.exports = function () {\n  throw new Error(\n    'ws does not work in the browser. Browser clients must use the native ' +\n      'WebSocket object'\n  );\n};\n", "'use strict'\n\n/**\n * Ponyfill for `Array.prototype.find` which is only available in ES6 runtimes.\n *\n * Works with anything that has a `length` property and index access properties, including NodeList.\n *\n * @template {unknown} T\n * @param {Array<T> | ({length:number, [number]: T})} list\n * @param {function (item: T, index: number, list:Array<T> | ({length:number, [number]: T})):boolean} predicate\n * @param {Partial<Pick<ArrayConstructor['prototype'], 'find'>>?} ac `Array.prototype` by default,\n * \t\t\t\tallows injecting a custom implementation in tests\n * @returns {T | undefined}\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find\n * @see https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.find\n */\nfunction find(list, predicate, ac) {\n\tif (ac === undefined) {\n\t\tac = Array.prototype;\n\t}\n\tif (list && typeof ac.find === 'function') {\n\t\treturn ac.find.call(list, predicate);\n\t}\n\tfor (var i = 0; i < list.length; i++) {\n\t\tif (Object.prototype.hasOwnProperty.call(list, i)) {\n\t\t\tvar item = list[i];\n\t\t\tif (predicate.call(undefined, item, i, list)) {\n\t\t\t\treturn item;\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * \"Shallow freezes\" an object to render it immutable.\n * Uses `Object.freeze` if available,\n * otherwise the immutability is only in the type.\n *\n * Is used to create \"enum like\" objects.\n *\n * @template T\n * @param {T} object the object to freeze\n * @param {Pick<ObjectConstructor, 'freeze'> = Object} oc `Object` by default,\n * \t\t\t\tallows to inject custom object constructor for tests\n * @returns {Readonly<T>}\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\n */\nfunction freeze(object, oc) {\n\tif (oc === undefined) {\n\t\toc = Object\n\t}\n\treturn oc && typeof oc.freeze === 'function' ? oc.freeze(object) : object\n}\n\n/**\n * Since we can not rely on `Object.assign` we provide a simplified version\n * that is sufficient for our needs.\n *\n * @param {Object} target\n * @param {Object | null | undefined} source\n *\n * @returns {Object} target\n * @throws TypeError if target is not an object\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n * @see https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-object.assign\n */\nfunction assign(target, source) {\n\tif (target === null || typeof target !== 'object') {\n\t\tthrow new TypeError('target is not an object')\n\t}\n\tfor (var key in source) {\n\t\tif (Object.prototype.hasOwnProperty.call(source, key)) {\n\t\t\ttarget[key] = source[key]\n\t\t}\n\t}\n\treturn target\n}\n\n/**\n * All mime types that are allowed as input to `DOMParser.parseFromString`\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMParser/parseFromString#Argument02 MDN\n * @see https://html.spec.whatwg.org/multipage/dynamic-markup-insertion.html#domparsersupportedtype WHATWG HTML Spec\n * @see DOMParser.prototype.parseFromString\n */\nvar MIME_TYPE = freeze({\n\t/**\n\t * `text/html`, the only mime type that triggers treating an XML document as HTML.\n\t *\n\t * @see DOMParser.SupportedType.isHTML\n\t * @see https://www.iana.org/assignments/media-types/text/html IANA MimeType registration\n\t * @see https://en.wikipedia.org/wiki/HTML Wikipedia\n\t * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMParser/parseFromString MDN\n\t * @see https://html.spec.whatwg.org/multipage/dynamic-markup-insertion.html#dom-domparser-parsefromstring WHATWG HTML Spec\n\t */\n\tHTML: 'text/html',\n\n\t/**\n\t * Helper method to check a mime type if it indicates an HTML document\n\t *\n\t * @param {string} [value]\n\t * @returns {boolean}\n\t *\n\t * @see https://www.iana.org/assignments/media-types/text/html IANA MimeType registration\n\t * @see https://en.wikipedia.org/wiki/HTML Wikipedia\n\t * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMParser/parseFromString MDN\n\t * @see https://html.spec.whatwg.org/multipage/dynamic-markup-insertion.html#dom-domparser-parsefromstring \t */\n\tisHTML: function (value) {\n\t\treturn value === MIME_TYPE.HTML\n\t},\n\n\t/**\n\t * `application/xml`, the standard mime type for XML documents.\n\t *\n\t * @see https://www.iana.org/assignments/media-types/application/xml IANA MimeType registration\n\t * @see https://tools.ietf.org/html/rfc7303#section-9.1 RFC 7303\n\t * @see https://en.wikipedia.org/wiki/XML_and_MIME Wikipedia\n\t */\n\tXML_APPLICATION: 'application/xml',\n\n\t/**\n\t * `text/html`, an alias for `application/xml`.\n\t *\n\t * @see https://tools.ietf.org/html/rfc7303#section-9.2 RFC 7303\n\t * @see https://www.iana.org/assignments/media-types/text/xml IANA MimeType registration\n\t * @see https://en.wikipedia.org/wiki/XML_and_MIME Wikipedia\n\t */\n\tXML_TEXT: 'text/xml',\n\n\t/**\n\t * `application/xhtml+xml`, indicates an XML document that has the default HTML namespace,\n\t * but is parsed as an XML document.\n\t *\n\t * @see https://www.iana.org/assignments/media-types/application/xhtml+xml IANA MimeType registration\n\t * @see https://dom.spec.whatwg.org/#dom-domimplementation-createdocument WHATWG DOM Spec\n\t * @see https://en.wikipedia.org/wiki/XHTML Wikipedia\n\t */\n\tXML_XHTML_APPLICATION: 'application/xhtml+xml',\n\n\t/**\n\t * `image/svg+xml`,\n\t *\n\t * @see https://www.iana.org/assignments/media-types/image/svg+xml IANA MimeType registration\n\t * @see https://www.w3.org/TR/SVG11/ W3C SVG 1.1\n\t * @see https://en.wikipedia.org/wiki/Scalable_Vector_Graphics Wikipedia\n\t */\n\tXML_SVG_IMAGE: 'image/svg+xml',\n})\n\n/**\n * Namespaces that are used in this code base.\n *\n * @see http://www.w3.org/TR/REC-xml-names\n */\nvar NAMESPACE = freeze({\n\t/**\n\t * The XHTML namespace.\n\t *\n\t * @see http://www.w3.org/1999/xhtml\n\t */\n\tHTML: 'http://www.w3.org/1999/xhtml',\n\n\t/**\n\t * Checks if `uri` equals `NAMESPACE.HTML`.\n\t *\n\t * @param {string} [uri]\n\t *\n\t * @see NAMESPACE.HTML\n\t */\n\tisHTML: function (uri) {\n\t\treturn uri === NAMESPACE.HTML\n\t},\n\n\t/**\n\t * The SVG namespace.\n\t *\n\t * @see http://www.w3.org/2000/svg\n\t */\n\tSVG: 'http://www.w3.org/2000/svg',\n\n\t/**\n\t * The `xml:` namespace.\n\t *\n\t * @see http://www.w3.org/XML/1998/namespace\n\t */\n\tXML: 'http://www.w3.org/XML/1998/namespace',\n\n\t/**\n\t * The `xmlns:` namespace\n\t *\n\t * @see https://www.w3.org/2000/xmlns/\n\t */\n\tXMLNS: 'http://www.w3.org/2000/xmlns/',\n})\n\nexports.assign = assign;\nexports.find = find;\nexports.freeze = freeze;\nexports.MIME_TYPE = MIME_TYPE;\nexports.NAMESPACE = NAMESPACE;\n", "var conventions = require(\"./conventions\");\n\nvar find = conventions.find;\nvar NAMESPACE = conventions.NAMESPACE;\n\n/**\n * A prerequisite for `[].filter`, to drop elements that are empty\n * @param {string} input\n * @returns {boolean}\n */\nfunction notEmptyString (input) {\n\treturn input !== ''\n}\n/**\n * @see https://infra.spec.whatwg.org/#split-on-ascii-whitespace\n * @see https://infra.spec.whatwg.org/#ascii-whitespace\n *\n * @param {string} input\n * @returns {string[]} (can be empty)\n */\nfunction splitOnASCIIWhitespace(input) {\n\t// U+0009 TAB, U+000A LF, U+000C FF, U+000D CR, U+0020 SPACE\n\treturn input ? input.split(/[\\t\\n\\f\\r ]+/).filter(notEmptyString) : []\n}\n\n/**\n * Adds element as a key to current if it is not already present.\n *\n * @param {Record<string, boolean | undefined>} current\n * @param {string} element\n * @returns {Record<string, boolean | undefined>}\n */\nfunction orderedSetReducer (current, element) {\n\tif (!current.hasOwnProperty(element)) {\n\t\tcurrent[element] = true;\n\t}\n\treturn current;\n}\n\n/**\n * @see https://infra.spec.whatwg.org/#ordered-set\n * @param {string} input\n * @returns {string[]}\n */\nfunction toOrderedSet(input) {\n\tif (!input) return [];\n\tvar list = splitOnASCIIWhitespace(input);\n\treturn Object.keys(list.reduce(orderedSetReducer, {}))\n}\n\n/**\n * Uses `list.indexOf` to implement something like `Array.prototype.includes`,\n * which we can not rely on being available.\n *\n * @param {any[]} list\n * @returns {function(any): boolean}\n */\nfunction arrayIncludes (list) {\n\treturn function(element) {\n\t\treturn list && list.indexOf(element) !== -1;\n\t}\n}\n\nfunction copy(src,dest){\n\tfor(var p in src){\n\t\tif (Object.prototype.hasOwnProperty.call(src, p)) {\n\t\t\tdest[p] = src[p];\n\t\t}\n\t}\n}\n\n/**\n^\\w+\\.prototype\\.([_\\w]+)\\s*=\\s*((?:.*\\{\\s*?[\\r\\n][\\s\\S]*?^})|\\S.*?(?=[;\\r\\n]));?\n^\\w+\\.prototype\\.([_\\w]+)\\s*=\\s*(\\S.*?(?=[;\\r\\n]));?\n */\nfunction _extends(Class,Super){\n\tvar pt = Class.prototype;\n\tif(!(pt instanceof Super)){\n\t\tfunction t(){};\n\t\tt.prototype = Super.prototype;\n\t\tt = new t();\n\t\tcopy(pt,t);\n\t\tClass.prototype = pt = t;\n\t}\n\tif(pt.constructor != Class){\n\t\tif(typeof Class != 'function'){\n\t\t\tconsole.error(\"unknown Class:\"+Class)\n\t\t}\n\t\tpt.constructor = Class\n\t}\n}\n\n// Node Types\nvar NodeType = {}\nvar ELEMENT_NODE                = NodeType.ELEMENT_NODE                = 1;\nvar ATTRIBUTE_NODE              = NodeType.ATTRIBUTE_NODE              = 2;\nvar TEXT_NODE                   = NodeType.TEXT_NODE                   = 3;\nvar CDATA_SECTION_NODE          = NodeType.CDATA_SECTION_NODE          = 4;\nvar ENTITY_REFERENCE_NODE       = NodeType.ENTITY_REFERENCE_NODE       = 5;\nvar ENTITY_NODE                 = NodeType.ENTITY_NODE                 = 6;\nvar PROCESSING_INSTRUCTION_NODE = NodeType.PROCESSING_INSTRUCTION_NODE = 7;\nvar COMMENT_NODE                = NodeType.COMMENT_NODE                = 8;\nvar DOCUMENT_NODE               = NodeType.DOCUMENT_NODE               = 9;\nvar DOCUMENT_TYPE_NODE          = NodeType.DOCUMENT_TYPE_NODE          = 10;\nvar DOCUMENT_FRAGMENT_NODE      = NodeType.DOCUMENT_FRAGMENT_NODE      = 11;\nvar NOTATION_NODE               = NodeType.NOTATION_NODE               = 12;\n\n// ExceptionCode\nvar ExceptionCode = {}\nvar ExceptionMessage = {};\nvar INDEX_SIZE_ERR              = ExceptionCode.INDEX_SIZE_ERR              = ((ExceptionMessage[1]=\"Index size error\"),1);\nvar DOMSTRING_SIZE_ERR          = ExceptionCode.DOMSTRING_SIZE_ERR          = ((ExceptionMessage[2]=\"DOMString size error\"),2);\nvar HIERARCHY_REQUEST_ERR       = ExceptionCode.HIERARCHY_REQUEST_ERR       = ((ExceptionMessage[3]=\"Hierarchy request error\"),3);\nvar WRONG_DOCUMENT_ERR          = ExceptionCode.WRONG_DOCUMENT_ERR          = ((ExceptionMessage[4]=\"Wrong document\"),4);\nvar INVALID_CHARACTER_ERR       = ExceptionCode.INVALID_CHARACTER_ERR       = ((ExceptionMessage[5]=\"Invalid character\"),5);\nvar NO_DATA_ALLOWED_ERR         = ExceptionCode.NO_DATA_ALLOWED_ERR         = ((ExceptionMessage[6]=\"No data allowed\"),6);\nvar NO_MODIFICATION_ALLOWED_ERR = ExceptionCode.NO_MODIFICATION_ALLOWED_ERR = ((ExceptionMessage[7]=\"No modification allowed\"),7);\nvar NOT_FOUND_ERR               = ExceptionCode.NOT_FOUND_ERR               = ((ExceptionMessage[8]=\"Not found\"),8);\nvar NOT_SUPPORTED_ERR           = ExceptionCode.NOT_SUPPORTED_ERR           = ((ExceptionMessage[9]=\"Not supported\"),9);\nvar INUSE_ATTRIBUTE_ERR         = ExceptionCode.INUSE_ATTRIBUTE_ERR         = ((ExceptionMessage[10]=\"Attribute in use\"),10);\n//level2\nvar INVALID_STATE_ERR        \t= ExceptionCode.INVALID_STATE_ERR        \t= ((ExceptionMessage[11]=\"Invalid state\"),11);\nvar SYNTAX_ERR               \t= ExceptionCode.SYNTAX_ERR               \t= ((ExceptionMessage[12]=\"Syntax error\"),12);\nvar INVALID_MODIFICATION_ERR \t= ExceptionCode.INVALID_MODIFICATION_ERR \t= ((ExceptionMessage[13]=\"Invalid modification\"),13);\nvar NAMESPACE_ERR            \t= ExceptionCode.NAMESPACE_ERR           \t= ((ExceptionMessage[14]=\"Invalid namespace\"),14);\nvar INVALID_ACCESS_ERR       \t= ExceptionCode.INVALID_ACCESS_ERR      \t= ((ExceptionMessage[15]=\"Invalid access\"),15);\n\n/**\n * DOM Level 2\n * Object DOMException\n * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/ecma-script-binding.html\n * @see http://www.w3.org/TR/REC-DOM-Level-1/ecma-script-language-binding.html\n */\nfunction DOMException(code, message) {\n\tif(message instanceof Error){\n\t\tvar error = message;\n\t}else{\n\t\terror = this;\n\t\tError.call(this, ExceptionMessage[code]);\n\t\tthis.message = ExceptionMessage[code];\n\t\tif(Error.captureStackTrace) Error.captureStackTrace(this, DOMException);\n\t}\n\terror.code = code;\n\tif(message) this.message = this.message + \": \" + message;\n\treturn error;\n};\nDOMException.prototype = Error.prototype;\ncopy(ExceptionCode,DOMException)\n\n/**\n * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#ID-536297177\n * The NodeList interface provides the abstraction of an ordered collection of nodes, without defining or constraining how this collection is implemented. NodeList objects in the DOM are live.\n * The items in the NodeList are accessible via an integral index, starting from 0.\n */\nfunction NodeList() {\n};\nNodeList.prototype = {\n\t/**\n\t * The number of nodes in the list. The range of valid child node indices is 0 to length-1 inclusive.\n\t * @standard level1\n\t */\n\tlength:0,\n\t/**\n\t * Returns the indexth item in the collection. If index is greater than or equal to the number of nodes in the list, this returns null.\n\t * @standard level1\n\t * @param index  unsigned long\n\t *   Index into the collection.\n\t * @return Node\n\t * \tThe node at the indexth position in the NodeList, or null if that is not a valid index.\n\t */\n\titem: function(index) {\n\t\treturn index >= 0 && index < this.length ? this[index] : null;\n\t},\n\ttoString:function(isHTML,nodeFilter){\n\t\tfor(var buf = [], i = 0;i<this.length;i++){\n\t\t\tserializeToString(this[i],buf,isHTML,nodeFilter);\n\t\t}\n\t\treturn buf.join('');\n\t},\n\t/**\n\t * @private\n\t * @param {function (Node):boolean} predicate\n\t * @returns {Node[]}\n\t */\n\tfilter: function (predicate) {\n\t\treturn Array.prototype.filter.call(this, predicate);\n\t},\n\t/**\n\t * @private\n\t * @param {Node} item\n\t * @returns {number}\n\t */\n\tindexOf: function (item) {\n\t\treturn Array.prototype.indexOf.call(this, item);\n\t},\n};\n\nfunction LiveNodeList(node,refresh){\n\tthis._node = node;\n\tthis._refresh = refresh\n\t_updateLiveList(this);\n}\nfunction _updateLiveList(list){\n\tvar inc = list._node._inc || list._node.ownerDocument._inc;\n\tif (list._inc !== inc) {\n\t\tvar ls = list._refresh(list._node);\n\t\t__set__(list,'length',ls.length);\n\t\tif (!list.$$length || ls.length < list.$$length) {\n\t\t\tfor (var i = ls.length; i in list; i++) {\n\t\t\t\tif (Object.prototype.hasOwnProperty.call(list, i)) {\n\t\t\t\t\tdelete list[i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcopy(ls,list);\n\t\tlist._inc = inc;\n\t}\n}\nLiveNodeList.prototype.item = function(i){\n\t_updateLiveList(this);\n\treturn this[i] || null;\n}\n\n_extends(LiveNodeList,NodeList);\n\n/**\n * Objects implementing the NamedNodeMap interface are used\n * to represent collections of nodes that can be accessed by name.\n * Note that NamedNodeMap does not inherit from NodeList;\n * NamedNodeMaps are not maintained in any particular order.\n * Objects contained in an object implementing NamedNodeMap may also be accessed by an ordinal index,\n * but this is simply to allow convenient enumeration of the contents of a NamedNodeMap,\n * and does not imply that the DOM specifies an order to these Nodes.\n * NamedNodeMap objects in the DOM are live.\n * used for attributes or DocumentType entities\n */\nfunction NamedNodeMap() {\n};\n\nfunction _findNodeIndex(list,node){\n\tvar i = list.length;\n\twhile(i--){\n\t\tif(list[i] === node){return i}\n\t}\n}\n\nfunction _addNamedNode(el,list,newAttr,oldAttr){\n\tif(oldAttr){\n\t\tlist[_findNodeIndex(list,oldAttr)] = newAttr;\n\t}else{\n\t\tlist[list.length++] = newAttr;\n\t}\n\tif(el){\n\t\tnewAttr.ownerElement = el;\n\t\tvar doc = el.ownerDocument;\n\t\tif(doc){\n\t\t\toldAttr && _onRemoveAttribute(doc,el,oldAttr);\n\t\t\t_onAddAttribute(doc,el,newAttr);\n\t\t}\n\t}\n}\nfunction _removeNamedNode(el,list,attr){\n\t//console.log('remove attr:'+attr)\n\tvar i = _findNodeIndex(list,attr);\n\tif(i>=0){\n\t\tvar lastIndex = list.length-1\n\t\twhile(i<lastIndex){\n\t\t\tlist[i] = list[++i]\n\t\t}\n\t\tlist.length = lastIndex;\n\t\tif(el){\n\t\t\tvar doc = el.ownerDocument;\n\t\t\tif(doc){\n\t\t\t\t_onRemoveAttribute(doc,el,attr);\n\t\t\t\tattr.ownerElement = null;\n\t\t\t}\n\t\t}\n\t}else{\n\t\tthrow new DOMException(NOT_FOUND_ERR,new Error(el.tagName+'@'+attr))\n\t}\n}\nNamedNodeMap.prototype = {\n\tlength:0,\n\titem:NodeList.prototype.item,\n\tgetNamedItem: function(key) {\n//\t\tif(key.indexOf(':')>0 || key == 'xmlns'){\n//\t\t\treturn null;\n//\t\t}\n\t\t//console.log()\n\t\tvar i = this.length;\n\t\twhile(i--){\n\t\t\tvar attr = this[i];\n\t\t\t//console.log(attr.nodeName,key)\n\t\t\tif(attr.nodeName == key){\n\t\t\t\treturn attr;\n\t\t\t}\n\t\t}\n\t},\n\tsetNamedItem: function(attr) {\n\t\tvar el = attr.ownerElement;\n\t\tif(el && el!=this._ownerElement){\n\t\t\tthrow new DOMException(INUSE_ATTRIBUTE_ERR);\n\t\t}\n\t\tvar oldAttr = this.getNamedItem(attr.nodeName);\n\t\t_addNamedNode(this._ownerElement,this,attr,oldAttr);\n\t\treturn oldAttr;\n\t},\n\t/* returns Node */\n\tsetNamedItemNS: function(attr) {// raises: WRONG_DOCUMENT_ERR,NO_MODIFICATION_ALLOWED_ERR,INUSE_ATTRIBUTE_ERR\n\t\tvar el = attr.ownerElement, oldAttr;\n\t\tif(el && el!=this._ownerElement){\n\t\t\tthrow new DOMException(INUSE_ATTRIBUTE_ERR);\n\t\t}\n\t\toldAttr = this.getNamedItemNS(attr.namespaceURI,attr.localName);\n\t\t_addNamedNode(this._ownerElement,this,attr,oldAttr);\n\t\treturn oldAttr;\n\t},\n\n\t/* returns Node */\n\tremoveNamedItem: function(key) {\n\t\tvar attr = this.getNamedItem(key);\n\t\t_removeNamedNode(this._ownerElement,this,attr);\n\t\treturn attr;\n\n\n\t},// raises: NOT_FOUND_ERR,NO_MODIFICATION_ALLOWED_ERR\n\n\t//for level2\n\tremoveNamedItemNS:function(namespaceURI,localName){\n\t\tvar attr = this.getNamedItemNS(namespaceURI,localName);\n\t\t_removeNamedNode(this._ownerElement,this,attr);\n\t\treturn attr;\n\t},\n\tgetNamedItemNS: function(namespaceURI, localName) {\n\t\tvar i = this.length;\n\t\twhile(i--){\n\t\t\tvar node = this[i];\n\t\t\tif(node.localName == localName && node.namespaceURI == namespaceURI){\n\t\t\t\treturn node;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n};\n\n/**\n * The DOMImplementation interface represents an object providing methods\n * which are not dependent on any particular document.\n * Such an object is returned by the `Document.implementation` property.\n *\n * __The individual methods describe the differences compared to the specs.__\n *\n * @constructor\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation MDN\n * @see https://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#ID-102161490 DOM Level 1 Core (Initial)\n * @see https://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-102161490 DOM Level 2 Core\n * @see https://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-102161490 DOM Level 3 Core\n * @see https://dom.spec.whatwg.org/#domimplementation DOM Living Standard\n */\nfunction DOMImplementation() {\n}\n\nDOMImplementation.prototype = {\n\t/**\n\t * The DOMImplementation.hasFeature() method returns a Boolean flag indicating if a given feature is supported.\n\t * The different implementations fairly diverged in what kind of features were reported.\n\t * The latest version of the spec settled to force this method to always return true, where the functionality was accurate and in use.\n\t *\n\t * @deprecated It is deprecated and modern browsers return true in all cases.\n\t *\n\t * @param {string} feature\n\t * @param {string} [version]\n\t * @returns {boolean} always true\n\t *\n\t * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/hasFeature MDN\n\t * @see https://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#ID-5CED94D7 DOM Level 1 Core\n\t * @see https://dom.spec.whatwg.org/#dom-domimplementation-hasfeature DOM Living Standard\n\t */\n\thasFeature: function(feature, version) {\n\t\t\treturn true;\n\t},\n\t/**\n\t * Creates an XML Document object of the specified type with its document element.\n\t *\n\t * __It behaves slightly different from the description in the living standard__:\n\t * - There is no interface/class `XMLDocument`, it returns a `Document` instance.\n\t * - `contentType`, `encoding`, `mode`, `origin`, `url` fields are currently not declared.\n\t * - this implementation is not validating names or qualified names\n\t *   (when parsing XML strings, the SAX parser takes care of that)\n\t *\n\t * @param {string|null} namespaceURI\n\t * @param {string} qualifiedName\n\t * @param {DocumentType=null} doctype\n\t * @returns {Document}\n\t *\n\t * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/createDocument MDN\n\t * @see https://www.w3.org/TR/DOM-Level-2-Core/core.html#Level-2-Core-DOM-createDocument DOM Level 2 Core (initial)\n\t * @see https://dom.spec.whatwg.org/#dom-domimplementation-createdocument  DOM Level 2 Core\n\t *\n\t * @see https://dom.spec.whatwg.org/#validate-and-extract DOM: Validate and extract\n\t * @see https://www.w3.org/TR/xml/#NT-NameStartChar XML Spec: Names\n\t * @see https://www.w3.org/TR/xml-names/#ns-qualnames XML Namespaces: Qualified names\n\t */\n\tcreateDocument: function(namespaceURI,  qualifiedName, doctype){\n\t\tvar doc = new Document();\n\t\tdoc.implementation = this;\n\t\tdoc.childNodes = new NodeList();\n\t\tdoc.doctype = doctype || null;\n\t\tif (doctype){\n\t\t\tdoc.appendChild(doctype);\n\t\t}\n\t\tif (qualifiedName){\n\t\t\tvar root = doc.createElementNS(namespaceURI, qualifiedName);\n\t\t\tdoc.appendChild(root);\n\t\t}\n\t\treturn doc;\n\t},\n\t/**\n\t * Returns a doctype, with the given `qualifiedName`, `publicId`, and `systemId`.\n\t *\n\t * __This behavior is slightly different from the in the specs__:\n\t * - this implementation is not validating names or qualified names\n\t *   (when parsing XML strings, the SAX parser takes care of that)\n\t *\n\t * @param {string} qualifiedName\n\t * @param {string} [publicId]\n\t * @param {string} [systemId]\n\t * @returns {DocumentType} which can either be used with `DOMImplementation.createDocument` upon document creation\n\t * \t\t\t\t  or can be put into the document via methods like `Node.insertBefore()` or `Node.replaceChild()`\n\t *\n\t * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/createDocumentType MDN\n\t * @see https://www.w3.org/TR/DOM-Level-2-Core/core.html#Level-2-Core-DOM-createDocType DOM Level 2 Core\n\t * @see https://dom.spec.whatwg.org/#dom-domimplementation-createdocumenttype DOM Living Standard\n\t *\n\t * @see https://dom.spec.whatwg.org/#validate-and-extract DOM: Validate and extract\n\t * @see https://www.w3.org/TR/xml/#NT-NameStartChar XML Spec: Names\n\t * @see https://www.w3.org/TR/xml-names/#ns-qualnames XML Namespaces: Qualified names\n\t */\n\tcreateDocumentType: function(qualifiedName, publicId, systemId){\n\t\tvar node = new DocumentType();\n\t\tnode.name = qualifiedName;\n\t\tnode.nodeName = qualifiedName;\n\t\tnode.publicId = publicId || '';\n\t\tnode.systemId = systemId || '';\n\n\t\treturn node;\n\t}\n};\n\n\n/**\n * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#ID-1950641247\n */\n\nfunction Node() {\n};\n\nNode.prototype = {\n\tfirstChild : null,\n\tlastChild : null,\n\tpreviousSibling : null,\n\tnextSibling : null,\n\tattributes : null,\n\tparentNode : null,\n\tchildNodes : null,\n\townerDocument : null,\n\tnodeValue : null,\n\tnamespaceURI : null,\n\tprefix : null,\n\tlocalName : null,\n\t// Modified in DOM Level 2:\n\tinsertBefore:function(newChild, refChild){//raises\n\t\treturn _insertBefore(this,newChild,refChild);\n\t},\n\treplaceChild:function(newChild, oldChild){//raises\n\t\t_insertBefore(this, newChild,oldChild, assertPreReplacementValidityInDocument);\n\t\tif(oldChild){\n\t\t\tthis.removeChild(oldChild);\n\t\t}\n\t},\n\tremoveChild:function(oldChild){\n\t\treturn _removeChild(this,oldChild);\n\t},\n\tappendChild:function(newChild){\n\t\treturn this.insertBefore(newChild,null);\n\t},\n\thasChildNodes:function(){\n\t\treturn this.firstChild != null;\n\t},\n\tcloneNode:function(deep){\n\t\treturn cloneNode(this.ownerDocument||this,this,deep);\n\t},\n\t// Modified in DOM Level 2:\n\tnormalize:function(){\n\t\tvar child = this.firstChild;\n\t\twhile(child){\n\t\t\tvar next = child.nextSibling;\n\t\t\tif(next && next.nodeType == TEXT_NODE && child.nodeType == TEXT_NODE){\n\t\t\t\tthis.removeChild(next);\n\t\t\t\tchild.appendData(next.data);\n\t\t\t}else{\n\t\t\t\tchild.normalize();\n\t\t\t\tchild = next;\n\t\t\t}\n\t\t}\n\t},\n  \t// Introduced in DOM Level 2:\n\tisSupported:function(feature, version){\n\t\treturn this.ownerDocument.implementation.hasFeature(feature,version);\n\t},\n    // Introduced in DOM Level 2:\n    hasAttributes:function(){\n    \treturn this.attributes.length>0;\n    },\n\t/**\n\t * Look up the prefix associated to the given namespace URI, starting from this node.\n\t * **The default namespace declarations are ignored by this method.**\n\t * See Namespace Prefix Lookup for details on the algorithm used by this method.\n\t *\n\t * _Note: The implementation seems to be incomplete when compared to the algorithm described in the specs._\n\t *\n\t * @param {string | null} namespaceURI\n\t * @returns {string | null}\n\t * @see https://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-lookupNamespacePrefix\n\t * @see https://www.w3.org/TR/DOM-Level-3-Core/namespaces-algorithms.html#lookupNamespacePrefixAlgo\n\t * @see https://dom.spec.whatwg.org/#dom-node-lookupprefix\n\t * @see https://github.com/xmldom/xmldom/issues/322\n\t */\n    lookupPrefix:function(namespaceURI){\n    \tvar el = this;\n    \twhile(el){\n    \t\tvar map = el._nsMap;\n    \t\t//console.dir(map)\n    \t\tif(map){\n    \t\t\tfor(var n in map){\n\t\t\t\t\t\tif (Object.prototype.hasOwnProperty.call(map, n) && map[n] === namespaceURI) {\n\t\t\t\t\t\t\treturn n;\n\t\t\t\t\t\t}\n    \t\t\t}\n    \t\t}\n    \t\tel = el.nodeType == ATTRIBUTE_NODE?el.ownerDocument : el.parentNode;\n    \t}\n    \treturn null;\n    },\n    // Introduced in DOM Level 3:\n    lookupNamespaceURI:function(prefix){\n    \tvar el = this;\n    \twhile(el){\n    \t\tvar map = el._nsMap;\n    \t\t//console.dir(map)\n    \t\tif(map){\n    \t\t\tif(Object.prototype.hasOwnProperty.call(map, prefix)){\n    \t\t\t\treturn map[prefix] ;\n    \t\t\t}\n    \t\t}\n    \t\tel = el.nodeType == ATTRIBUTE_NODE?el.ownerDocument : el.parentNode;\n    \t}\n    \treturn null;\n    },\n    // Introduced in DOM Level 3:\n    isDefaultNamespace:function(namespaceURI){\n    \tvar prefix = this.lookupPrefix(namespaceURI);\n    \treturn prefix == null;\n    }\n};\n\n\nfunction _xmlEncoder(c){\n\treturn c == '<' && '&lt;' ||\n         c == '>' && '&gt;' ||\n         c == '&' && '&amp;' ||\n         c == '\"' && '&quot;' ||\n         '&#'+c.charCodeAt()+';'\n}\n\n\ncopy(NodeType,Node);\ncopy(NodeType,Node.prototype);\n\n/**\n * @param callback return true for continue,false for break\n * @return boolean true: break visit;\n */\nfunction _visitNode(node,callback){\n\tif(callback(node)){\n\t\treturn true;\n\t}\n\tif(node = node.firstChild){\n\t\tdo{\n\t\t\tif(_visitNode(node,callback)){return true}\n        }while(node=node.nextSibling)\n    }\n}\n\n\n\nfunction Document(){\n\tthis.ownerDocument = this;\n}\n\nfunction _onAddAttribute(doc,el,newAttr){\n\tdoc && doc._inc++;\n\tvar ns = newAttr.namespaceURI ;\n\tif(ns === NAMESPACE.XMLNS){\n\t\t//update namespace\n\t\tel._nsMap[newAttr.prefix?newAttr.localName:''] = newAttr.value\n\t}\n}\n\nfunction _onRemoveAttribute(doc,el,newAttr,remove){\n\tdoc && doc._inc++;\n\tvar ns = newAttr.namespaceURI ;\n\tif(ns === NAMESPACE.XMLNS){\n\t\t//update namespace\n\t\tdelete el._nsMap[newAttr.prefix?newAttr.localName:'']\n\t}\n}\n\n/**\n * Updates `el.childNodes`, updating the indexed items and it's `length`.\n * Passing `newChild` means it will be appended.\n * Otherwise it's assumed that an item has been removed,\n * and `el.firstNode` and it's `.nextSibling` are used\n * to walk the current list of child nodes.\n *\n * @param {Document} doc\n * @param {Node} el\n * @param {Node} [newChild]\n * @private\n */\nfunction _onUpdateChild (doc, el, newChild) {\n\tif(doc && doc._inc){\n\t\tdoc._inc++;\n\t\t//update childNodes\n\t\tvar cs = el.childNodes;\n\t\tif (newChild) {\n\t\t\tcs[cs.length++] = newChild;\n\t\t} else {\n\t\t\tvar child = el.firstChild;\n\t\t\tvar i = 0;\n\t\t\twhile (child) {\n\t\t\t\tcs[i++] = child;\n\t\t\t\tchild = child.nextSibling;\n\t\t\t}\n\t\t\tcs.length = i;\n\t\t\tdelete cs[cs.length];\n\t\t}\n\t}\n}\n\n/**\n * Removes the connections between `parentNode` and `child`\n * and any existing `child.previousSibling` or `child.nextSibling`.\n *\n * @see https://github.com/xmldom/xmldom/issues/135\n * @see https://github.com/xmldom/xmldom/issues/145\n *\n * @param {Node} parentNode\n * @param {Node} child\n * @returns {Node} the child that was removed.\n * @private\n */\nfunction _removeChild (parentNode, child) {\n\tvar previous = child.previousSibling;\n\tvar next = child.nextSibling;\n\tif (previous) {\n\t\tprevious.nextSibling = next;\n\t} else {\n\t\tparentNode.firstChild = next;\n\t}\n\tif (next) {\n\t\tnext.previousSibling = previous;\n\t} else {\n\t\tparentNode.lastChild = previous;\n\t}\n\tchild.parentNode = null;\n\tchild.previousSibling = null;\n\tchild.nextSibling = null;\n\t_onUpdateChild(parentNode.ownerDocument, parentNode);\n\treturn child;\n}\n\n/**\n * Returns `true` if `node` can be a parent for insertion.\n * @param {Node} node\n * @returns {boolean}\n */\nfunction hasValidParentNodeType(node) {\n\treturn (\n\t\tnode &&\n\t\t(node.nodeType === Node.DOCUMENT_NODE || node.nodeType === Node.DOCUMENT_FRAGMENT_NODE || node.nodeType === Node.ELEMENT_NODE)\n\t);\n}\n\n/**\n * Returns `true` if `node` can be inserted according to it's `nodeType`.\n * @param {Node} node\n * @returns {boolean}\n */\nfunction hasInsertableNodeType(node) {\n\treturn (\n\t\tnode &&\n\t\t(isElementNode(node) ||\n\t\t\tisTextNode(node) ||\n\t\t\tisDocTypeNode(node) ||\n\t\t\tnode.nodeType === Node.DOCUMENT_FRAGMENT_NODE ||\n\t\t\tnode.nodeType === Node.COMMENT_NODE ||\n\t\t\tnode.nodeType === Node.PROCESSING_INSTRUCTION_NODE)\n\t);\n}\n\n/**\n * Returns true if `node` is a DOCTYPE node\n * @param {Node} node\n * @returns {boolean}\n */\nfunction isDocTypeNode(node) {\n\treturn node && node.nodeType === Node.DOCUMENT_TYPE_NODE;\n}\n\n/**\n * Returns true if the node is an element\n * @param {Node} node\n * @returns {boolean}\n */\nfunction isElementNode(node) {\n\treturn node && node.nodeType === Node.ELEMENT_NODE;\n}\n/**\n * Returns true if `node` is a text node\n * @param {Node} node\n * @returns {boolean}\n */\nfunction isTextNode(node) {\n\treturn node && node.nodeType === Node.TEXT_NODE;\n}\n\n/**\n * Check if en element node can be inserted before `child`, or at the end if child is falsy,\n * according to the presence and position of a doctype node on the same level.\n *\n * @param {Document} doc The document node\n * @param {Node} child the node that would become the nextSibling if the element would be inserted\n * @returns {boolean} `true` if an element can be inserted before child\n * @private\n * https://dom.spec.whatwg.org/#concept-node-ensure-pre-insertion-validity\n */\nfunction isElementInsertionPossible(doc, child) {\n\tvar parentChildNodes = doc.childNodes || [];\n\tif (find(parentChildNodes, isElementNode) || isDocTypeNode(child)) {\n\t\treturn false;\n\t}\n\tvar docTypeNode = find(parentChildNodes, isDocTypeNode);\n\treturn !(child && docTypeNode && parentChildNodes.indexOf(docTypeNode) > parentChildNodes.indexOf(child));\n}\n\n/**\n * Check if en element node can be inserted before `child`, or at the end if child is falsy,\n * according to the presence and position of a doctype node on the same level.\n *\n * @param {Node} doc The document node\n * @param {Node} child the node that would become the nextSibling if the element would be inserted\n * @returns {boolean} `true` if an element can be inserted before child\n * @private\n * https://dom.spec.whatwg.org/#concept-node-ensure-pre-insertion-validity\n */\nfunction isElementReplacementPossible(doc, child) {\n\tvar parentChildNodes = doc.childNodes || [];\n\n\tfunction hasElementChildThatIsNotChild(node) {\n\t\treturn isElementNode(node) && node !== child;\n\t}\n\n\tif (find(parentChildNodes, hasElementChildThatIsNotChild)) {\n\t\treturn false;\n\t}\n\tvar docTypeNode = find(parentChildNodes, isDocTypeNode);\n\treturn !(child && docTypeNode && parentChildNodes.indexOf(docTypeNode) > parentChildNodes.indexOf(child));\n}\n\n/**\n * @private\n * Steps 1-5 of the checks before inserting and before replacing a child are the same.\n *\n * @param {Node} parent the parent node to insert `node` into\n * @param {Node} node the node to insert\n * @param {Node=} child the node that should become the `nextSibling` of `node`\n * @returns {Node}\n * @throws DOMException for several node combinations that would create a DOM that is not well-formed.\n * @throws DOMException if `child` is provided but is not a child of `parent`.\n * @see https://dom.spec.whatwg.org/#concept-node-ensure-pre-insertion-validity\n * @see https://dom.spec.whatwg.org/#concept-node-replace\n */\nfunction assertPreInsertionValidity1to5(parent, node, child) {\n\t// 1. If `parent` is not a Document, DocumentFragment, or Element node, then throw a \"HierarchyRequestError\" DOMException.\n\tif (!hasValidParentNodeType(parent)) {\n\t\tthrow new DOMException(HIERARCHY_REQUEST_ERR, 'Unexpected parent node type ' + parent.nodeType);\n\t}\n\t// 2. If `node` is a host-including inclusive ancestor of `parent`, then throw a \"HierarchyRequestError\" DOMException.\n\t// not implemented!\n\t// 3. If `child` is non-null and its parent is not `parent`, then throw a \"NotFoundError\" DOMException.\n\tif (child && child.parentNode !== parent) {\n\t\tthrow new DOMException(NOT_FOUND_ERR, 'child not in parent');\n\t}\n\tif (\n\t\t// 4. If `node` is not a DocumentFragment, DocumentType, Element, or CharacterData node, then throw a \"HierarchyRequestError\" DOMException.\n\t\t!hasInsertableNodeType(node) ||\n\t\t// 5. If either `node` is a Text node and `parent` is a document,\n\t\t// the sax parser currently adds top level text nodes, this will be fixed in 0.9.0\n\t\t// || (node.nodeType === Node.TEXT_NODE && parent.nodeType === Node.DOCUMENT_NODE)\n\t\t// or `node` is a doctype and `parent` is not a document, then throw a \"HierarchyRequestError\" DOMException.\n\t\t(isDocTypeNode(node) && parent.nodeType !== Node.DOCUMENT_NODE)\n\t) {\n\t\tthrow new DOMException(\n\t\t\tHIERARCHY_REQUEST_ERR,\n\t\t\t'Unexpected node type ' + node.nodeType + ' for parent node type ' + parent.nodeType\n\t\t);\n\t}\n}\n\n/**\n * @private\n * Step 6 of the checks before inserting and before replacing a child are different.\n *\n * @param {Document} parent the parent node to insert `node` into\n * @param {Node} node the node to insert\n * @param {Node | undefined} child the node that should become the `nextSibling` of `node`\n * @returns {Node}\n * @throws DOMException for several node combinations that would create a DOM that is not well-formed.\n * @throws DOMException if `child` is provided but is not a child of `parent`.\n * @see https://dom.spec.whatwg.org/#concept-node-ensure-pre-insertion-validity\n * @see https://dom.spec.whatwg.org/#concept-node-replace\n */\nfunction assertPreInsertionValidityInDocument(parent, node, child) {\n\tvar parentChildNodes = parent.childNodes || [];\n\tvar nodeChildNodes = node.childNodes || [];\n\n\t// DocumentFragment\n\tif (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\n\t\tvar nodeChildElements = nodeChildNodes.filter(isElementNode);\n\t\t// If node has more than one element child or has a Text node child.\n\t\tif (nodeChildElements.length > 1 || find(nodeChildNodes, isTextNode)) {\n\t\t\tthrow new DOMException(HIERARCHY_REQUEST_ERR, 'More than one element or text in fragment');\n\t\t}\n\t\t// Otherwise, if `node` has one element child and either `parent` has an element child,\n\t\t// `child` is a doctype, or `child` is non-null and a doctype is following `child`.\n\t\tif (nodeChildElements.length === 1 && !isElementInsertionPossible(parent, child)) {\n\t\t\tthrow new DOMException(HIERARCHY_REQUEST_ERR, 'Element in fragment can not be inserted before doctype');\n\t\t}\n\t}\n\t// Element\n\tif (isElementNode(node)) {\n\t\t// `parent` has an element child, `child` is a doctype,\n\t\t// or `child` is non-null and a doctype is following `child`.\n\t\tif (!isElementInsertionPossible(parent, child)) {\n\t\t\tthrow new DOMException(HIERARCHY_REQUEST_ERR, 'Only one element can be added and only after doctype');\n\t\t}\n\t}\n\t// DocumentType\n\tif (isDocTypeNode(node)) {\n\t\t// `parent` has a doctype child,\n\t\tif (find(parentChildNodes, isDocTypeNode)) {\n\t\t\tthrow new DOMException(HIERARCHY_REQUEST_ERR, 'Only one doctype is allowed');\n\t\t}\n\t\tvar parentElementChild = find(parentChildNodes, isElementNode);\n\t\t// `child` is non-null and an element is preceding `child`,\n\t\tif (child && parentChildNodes.indexOf(parentElementChild) < parentChildNodes.indexOf(child)) {\n\t\t\tthrow new DOMException(HIERARCHY_REQUEST_ERR, 'Doctype can only be inserted before an element');\n\t\t}\n\t\t// or `child` is null and `parent` has an element child.\n\t\tif (!child && parentElementChild) {\n\t\t\tthrow new DOMException(HIERARCHY_REQUEST_ERR, 'Doctype can not be appended since element is present');\n\t\t}\n\t}\n}\n\n/**\n * @private\n * Step 6 of the checks before inserting and before replacing a child are different.\n *\n * @param {Document} parent the parent node to insert `node` into\n * @param {Node} node the node to insert\n * @param {Node | undefined} child the node that should become the `nextSibling` of `node`\n * @returns {Node}\n * @throws DOMException for several node combinations that would create a DOM that is not well-formed.\n * @throws DOMException if `child` is provided but is not a child of `parent`.\n * @see https://dom.spec.whatwg.org/#concept-node-ensure-pre-insertion-validity\n * @see https://dom.spec.whatwg.org/#concept-node-replace\n */\nfunction assertPreReplacementValidityInDocument(parent, node, child) {\n\tvar parentChildNodes = parent.childNodes || [];\n\tvar nodeChildNodes = node.childNodes || [];\n\n\t// DocumentFragment\n\tif (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\n\t\tvar nodeChildElements = nodeChildNodes.filter(isElementNode);\n\t\t// If `node` has more than one element child or has a Text node child.\n\t\tif (nodeChildElements.length > 1 || find(nodeChildNodes, isTextNode)) {\n\t\t\tthrow new DOMException(HIERARCHY_REQUEST_ERR, 'More than one element or text in fragment');\n\t\t}\n\t\t// Otherwise, if `node` has one element child and either `parent` has an element child that is not `child` or a doctype is following `child`.\n\t\tif (nodeChildElements.length === 1 && !isElementReplacementPossible(parent, child)) {\n\t\t\tthrow new DOMException(HIERARCHY_REQUEST_ERR, 'Element in fragment can not be inserted before doctype');\n\t\t}\n\t}\n\t// Element\n\tif (isElementNode(node)) {\n\t\t// `parent` has an element child that is not `child` or a doctype is following `child`.\n\t\tif (!isElementReplacementPossible(parent, child)) {\n\t\t\tthrow new DOMException(HIERARCHY_REQUEST_ERR, 'Only one element can be added and only after doctype');\n\t\t}\n\t}\n\t// DocumentType\n\tif (isDocTypeNode(node)) {\n\t\tfunction hasDoctypeChildThatIsNotChild(node) {\n\t\t\treturn isDocTypeNode(node) && node !== child;\n\t\t}\n\n\t\t// `parent` has a doctype child that is not `child`,\n\t\tif (find(parentChildNodes, hasDoctypeChildThatIsNotChild)) {\n\t\t\tthrow new DOMException(HIERARCHY_REQUEST_ERR, 'Only one doctype is allowed');\n\t\t}\n\t\tvar parentElementChild = find(parentChildNodes, isElementNode);\n\t\t// or an element is preceding `child`.\n\t\tif (child && parentChildNodes.indexOf(parentElementChild) < parentChildNodes.indexOf(child)) {\n\t\t\tthrow new DOMException(HIERARCHY_REQUEST_ERR, 'Doctype can only be inserted before an element');\n\t\t}\n\t}\n}\n\n/**\n * @private\n * @param {Node} parent the parent node to insert `node` into\n * @param {Node} node the node to insert\n * @param {Node=} child the node that should become the `nextSibling` of `node`\n * @returns {Node}\n * @throws DOMException for several node combinations that would create a DOM that is not well-formed.\n * @throws DOMException if `child` is provided but is not a child of `parent`.\n * @see https://dom.spec.whatwg.org/#concept-node-ensure-pre-insertion-validity\n */\nfunction _insertBefore(parent, node, child, _inDocumentAssertion) {\n\t// To ensure pre-insertion validity of a node into a parent before a child, run these steps:\n\tassertPreInsertionValidity1to5(parent, node, child);\n\n\t// If parent is a document, and any of the statements below, switched on the interface node implements,\n\t// are true, then throw a \"HierarchyRequestError\" DOMException.\n\tif (parent.nodeType === Node.DOCUMENT_NODE) {\n\t\t(_inDocumentAssertion || assertPreInsertionValidityInDocument)(parent, node, child);\n\t}\n\n\tvar cp = node.parentNode;\n\tif(cp){\n\t\tcp.removeChild(node);//remove and update\n\t}\n\tif(node.nodeType === DOCUMENT_FRAGMENT_NODE){\n\t\tvar newFirst = node.firstChild;\n\t\tif (newFirst == null) {\n\t\t\treturn node;\n\t\t}\n\t\tvar newLast = node.lastChild;\n\t}else{\n\t\tnewFirst = newLast = node;\n\t}\n\tvar pre = child ? child.previousSibling : parent.lastChild;\n\n\tnewFirst.previousSibling = pre;\n\tnewLast.nextSibling = child;\n\n\n\tif(pre){\n\t\tpre.nextSibling = newFirst;\n\t}else{\n\t\tparent.firstChild = newFirst;\n\t}\n\tif(child == null){\n\t\tparent.lastChild = newLast;\n\t}else{\n\t\tchild.previousSibling = newLast;\n\t}\n\tdo{\n\t\tnewFirst.parentNode = parent;\n\t}while(newFirst !== newLast && (newFirst= newFirst.nextSibling))\n\t_onUpdateChild(parent.ownerDocument||parent, parent);\n\t//console.log(parent.lastChild.nextSibling == null)\n\tif (node.nodeType == DOCUMENT_FRAGMENT_NODE) {\n\t\tnode.firstChild = node.lastChild = null;\n\t}\n\treturn node;\n}\n\n/**\n * Appends `newChild` to `parentNode`.\n * If `newChild` is already connected to a `parentNode` it is first removed from it.\n *\n * @see https://github.com/xmldom/xmldom/issues/135\n * @see https://github.com/xmldom/xmldom/issues/145\n * @param {Node} parentNode\n * @param {Node} newChild\n * @returns {Node}\n * @private\n */\nfunction _appendSingleChild (parentNode, newChild) {\n\tif (newChild.parentNode) {\n\t\tnewChild.parentNode.removeChild(newChild);\n\t}\n\tnewChild.parentNode = parentNode;\n\tnewChild.previousSibling = parentNode.lastChild;\n\tnewChild.nextSibling = null;\n\tif (newChild.previousSibling) {\n\t\tnewChild.previousSibling.nextSibling = newChild;\n\t} else {\n\t\tparentNode.firstChild = newChild;\n\t}\n\tparentNode.lastChild = newChild;\n\t_onUpdateChild(parentNode.ownerDocument, parentNode, newChild);\n\treturn newChild;\n}\n\nDocument.prototype = {\n\t//implementation : null,\n\tnodeName :  '#document',\n\tnodeType :  DOCUMENT_NODE,\n\t/**\n\t * The DocumentType node of the document.\n\t *\n\t * @readonly\n\t * @type DocumentType\n\t */\n\tdoctype :  null,\n\tdocumentElement :  null,\n\t_inc : 1,\n\n\tinsertBefore :  function(newChild, refChild){//raises\n\t\tif(newChild.nodeType == DOCUMENT_FRAGMENT_NODE){\n\t\t\tvar child = newChild.firstChild;\n\t\t\twhile(child){\n\t\t\t\tvar next = child.nextSibling;\n\t\t\t\tthis.insertBefore(child,refChild);\n\t\t\t\tchild = next;\n\t\t\t}\n\t\t\treturn newChild;\n\t\t}\n\t\t_insertBefore(this, newChild, refChild);\n\t\tnewChild.ownerDocument = this;\n\t\tif (this.documentElement === null && newChild.nodeType === ELEMENT_NODE) {\n\t\t\tthis.documentElement = newChild;\n\t\t}\n\n\t\treturn newChild;\n\t},\n\tremoveChild :  function(oldChild){\n\t\tif(this.documentElement == oldChild){\n\t\t\tthis.documentElement = null;\n\t\t}\n\t\treturn _removeChild(this,oldChild);\n\t},\n\treplaceChild: function (newChild, oldChild) {\n\t\t//raises\n\t\t_insertBefore(this, newChild, oldChild, assertPreReplacementValidityInDocument);\n\t\tnewChild.ownerDocument = this;\n\t\tif (oldChild) {\n\t\t\tthis.removeChild(oldChild);\n\t\t}\n\t\tif (isElementNode(newChild)) {\n\t\t\tthis.documentElement = newChild;\n\t\t}\n\t},\n\t// Introduced in DOM Level 2:\n\timportNode : function(importedNode,deep){\n\t\treturn importNode(this,importedNode,deep);\n\t},\n\t// Introduced in DOM Level 2:\n\tgetElementById :\tfunction(id){\n\t\tvar rtv = null;\n\t\t_visitNode(this.documentElement,function(node){\n\t\t\tif(node.nodeType == ELEMENT_NODE){\n\t\t\t\tif(node.getAttribute('id') == id){\n\t\t\t\t\trtv = node;\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t\treturn rtv;\n\t},\n\n\t/**\n\t * The `getElementsByClassName` method of `Document` interface returns an array-like object\n\t * of all child elements which have **all** of the given class name(s).\n\t *\n\t * Returns an empty list if `classeNames` is an empty string or only contains HTML white space characters.\n\t *\n\t *\n\t * Warning: This is a live LiveNodeList.\n\t * Changes in the DOM will reflect in the array as the changes occur.\n\t * If an element selected by this array no longer qualifies for the selector,\n\t * it will automatically be removed. Be aware of this for iteration purposes.\n\t *\n\t * @param {string} classNames is a string representing the class name(s) to match; multiple class names are separated by (ASCII-)whitespace\n\t *\n\t * @see https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByClassName\n\t * @see https://dom.spec.whatwg.org/#concept-getelementsbyclassname\n\t */\n\tgetElementsByClassName: function(classNames) {\n\t\tvar classNamesSet = toOrderedSet(classNames)\n\t\treturn new LiveNodeList(this, function(base) {\n\t\t\tvar ls = [];\n\t\t\tif (classNamesSet.length > 0) {\n\t\t\t\t_visitNode(base.documentElement, function(node) {\n\t\t\t\t\tif(node !== base && node.nodeType === ELEMENT_NODE) {\n\t\t\t\t\t\tvar nodeClassNames = node.getAttribute('class')\n\t\t\t\t\t\t// can be null if the attribute does not exist\n\t\t\t\t\t\tif (nodeClassNames) {\n\t\t\t\t\t\t\t// before splitting and iterating just compare them for the most common case\n\t\t\t\t\t\t\tvar matches = classNames === nodeClassNames;\n\t\t\t\t\t\t\tif (!matches) {\n\t\t\t\t\t\t\t\tvar nodeClassNamesSet = toOrderedSet(nodeClassNames)\n\t\t\t\t\t\t\t\tmatches = classNamesSet.every(arrayIncludes(nodeClassNamesSet))\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(matches) {\n\t\t\t\t\t\t\t\tls.push(node);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn ls;\n\t\t});\n\t},\n\n\t//document factory method:\n\tcreateElement :\tfunction(tagName){\n\t\tvar node = new Element();\n\t\tnode.ownerDocument = this;\n\t\tnode.nodeName = tagName;\n\t\tnode.tagName = tagName;\n\t\tnode.localName = tagName;\n\t\tnode.childNodes = new NodeList();\n\t\tvar attrs\t= node.attributes = new NamedNodeMap();\n\t\tattrs._ownerElement = node;\n\t\treturn node;\n\t},\n\tcreateDocumentFragment :\tfunction(){\n\t\tvar node = new DocumentFragment();\n\t\tnode.ownerDocument = this;\n\t\tnode.childNodes = new NodeList();\n\t\treturn node;\n\t},\n\tcreateTextNode :\tfunction(data){\n\t\tvar node = new Text();\n\t\tnode.ownerDocument = this;\n\t\tnode.appendData(data)\n\t\treturn node;\n\t},\n\tcreateComment :\tfunction(data){\n\t\tvar node = new Comment();\n\t\tnode.ownerDocument = this;\n\t\tnode.appendData(data)\n\t\treturn node;\n\t},\n\tcreateCDATASection :\tfunction(data){\n\t\tvar node = new CDATASection();\n\t\tnode.ownerDocument = this;\n\t\tnode.appendData(data)\n\t\treturn node;\n\t},\n\tcreateProcessingInstruction :\tfunction(target,data){\n\t\tvar node = new ProcessingInstruction();\n\t\tnode.ownerDocument = this;\n\t\tnode.tagName = node.nodeName = node.target = target;\n\t\tnode.nodeValue = node.data = data;\n\t\treturn node;\n\t},\n\tcreateAttribute :\tfunction(name){\n\t\tvar node = new Attr();\n\t\tnode.ownerDocument\t= this;\n\t\tnode.name = name;\n\t\tnode.nodeName\t= name;\n\t\tnode.localName = name;\n\t\tnode.specified = true;\n\t\treturn node;\n\t},\n\tcreateEntityReference :\tfunction(name){\n\t\tvar node = new EntityReference();\n\t\tnode.ownerDocument\t= this;\n\t\tnode.nodeName\t= name;\n\t\treturn node;\n\t},\n\t// Introduced in DOM Level 2:\n\tcreateElementNS :\tfunction(namespaceURI,qualifiedName){\n\t\tvar node = new Element();\n\t\tvar pl = qualifiedName.split(':');\n\t\tvar attrs\t= node.attributes = new NamedNodeMap();\n\t\tnode.childNodes = new NodeList();\n\t\tnode.ownerDocument = this;\n\t\tnode.nodeName = qualifiedName;\n\t\tnode.tagName = qualifiedName;\n\t\tnode.namespaceURI = namespaceURI;\n\t\tif(pl.length == 2){\n\t\t\tnode.prefix = pl[0];\n\t\t\tnode.localName = pl[1];\n\t\t}else{\n\t\t\t//el.prefix = null;\n\t\t\tnode.localName = qualifiedName;\n\t\t}\n\t\tattrs._ownerElement = node;\n\t\treturn node;\n\t},\n\t// Introduced in DOM Level 2:\n\tcreateAttributeNS :\tfunction(namespaceURI,qualifiedName){\n\t\tvar node = new Attr();\n\t\tvar pl = qualifiedName.split(':');\n\t\tnode.ownerDocument = this;\n\t\tnode.nodeName = qualifiedName;\n\t\tnode.name = qualifiedName;\n\t\tnode.namespaceURI = namespaceURI;\n\t\tnode.specified = true;\n\t\tif(pl.length == 2){\n\t\t\tnode.prefix = pl[0];\n\t\t\tnode.localName = pl[1];\n\t\t}else{\n\t\t\t//el.prefix = null;\n\t\t\tnode.localName = qualifiedName;\n\t\t}\n\t\treturn node;\n\t}\n};\n_extends(Document,Node);\n\n\nfunction Element() {\n\tthis._nsMap = {};\n};\nElement.prototype = {\n\tnodeType : ELEMENT_NODE,\n\thasAttribute : function(name){\n\t\treturn this.getAttributeNode(name)!=null;\n\t},\n\tgetAttribute : function(name){\n\t\tvar attr = this.getAttributeNode(name);\n\t\treturn attr && attr.value || '';\n\t},\n\tgetAttributeNode : function(name){\n\t\treturn this.attributes.getNamedItem(name);\n\t},\n\tsetAttribute : function(name, value){\n\t\tvar attr = this.ownerDocument.createAttribute(name);\n\t\tattr.value = attr.nodeValue = \"\" + value;\n\t\tthis.setAttributeNode(attr)\n\t},\n\tremoveAttribute : function(name){\n\t\tvar attr = this.getAttributeNode(name)\n\t\tattr && this.removeAttributeNode(attr);\n\t},\n\n\t//four real opeartion method\n\tappendChild:function(newChild){\n\t\tif(newChild.nodeType === DOCUMENT_FRAGMENT_NODE){\n\t\t\treturn this.insertBefore(newChild,null);\n\t\t}else{\n\t\t\treturn _appendSingleChild(this,newChild);\n\t\t}\n\t},\n\tsetAttributeNode : function(newAttr){\n\t\treturn this.attributes.setNamedItem(newAttr);\n\t},\n\tsetAttributeNodeNS : function(newAttr){\n\t\treturn this.attributes.setNamedItemNS(newAttr);\n\t},\n\tremoveAttributeNode : function(oldAttr){\n\t\t//console.log(this == oldAttr.ownerElement)\n\t\treturn this.attributes.removeNamedItem(oldAttr.nodeName);\n\t},\n\t//get real attribute name,and remove it by removeAttributeNode\n\tremoveAttributeNS : function(namespaceURI, localName){\n\t\tvar old = this.getAttributeNodeNS(namespaceURI, localName);\n\t\told && this.removeAttributeNode(old);\n\t},\n\n\thasAttributeNS : function(namespaceURI, localName){\n\t\treturn this.getAttributeNodeNS(namespaceURI, localName)!=null;\n\t},\n\tgetAttributeNS : function(namespaceURI, localName){\n\t\tvar attr = this.getAttributeNodeNS(namespaceURI, localName);\n\t\treturn attr && attr.value || '';\n\t},\n\tsetAttributeNS : function(namespaceURI, qualifiedName, value){\n\t\tvar attr = this.ownerDocument.createAttributeNS(namespaceURI, qualifiedName);\n\t\tattr.value = attr.nodeValue = \"\" + value;\n\t\tthis.setAttributeNode(attr)\n\t},\n\tgetAttributeNodeNS : function(namespaceURI, localName){\n\t\treturn this.attributes.getNamedItemNS(namespaceURI, localName);\n\t},\n\n\tgetElementsByTagName : function(tagName){\n\t\treturn new LiveNodeList(this,function(base){\n\t\t\tvar ls = [];\n\t\t\t_visitNode(base,function(node){\n\t\t\t\tif(node !== base && node.nodeType == ELEMENT_NODE && (tagName === '*' || node.tagName == tagName)){\n\t\t\t\t\tls.push(node);\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn ls;\n\t\t});\n\t},\n\tgetElementsByTagNameNS : function(namespaceURI, localName){\n\t\treturn new LiveNodeList(this,function(base){\n\t\t\tvar ls = [];\n\t\t\t_visitNode(base,function(node){\n\t\t\t\tif(node !== base && node.nodeType === ELEMENT_NODE && (namespaceURI === '*' || node.namespaceURI === namespaceURI) && (localName === '*' || node.localName == localName)){\n\t\t\t\t\tls.push(node);\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn ls;\n\n\t\t});\n\t}\n};\nDocument.prototype.getElementsByTagName = Element.prototype.getElementsByTagName;\nDocument.prototype.getElementsByTagNameNS = Element.prototype.getElementsByTagNameNS;\n\n\n_extends(Element,Node);\nfunction Attr() {\n};\nAttr.prototype.nodeType = ATTRIBUTE_NODE;\n_extends(Attr,Node);\n\n\nfunction CharacterData() {\n};\nCharacterData.prototype = {\n\tdata : '',\n\tsubstringData : function(offset, count) {\n\t\treturn this.data.substring(offset, offset+count);\n\t},\n\tappendData: function(text) {\n\t\ttext = this.data+text;\n\t\tthis.nodeValue = this.data = text;\n\t\tthis.length = text.length;\n\t},\n\tinsertData: function(offset,text) {\n\t\tthis.replaceData(offset,0,text);\n\n\t},\n\tappendChild:function(newChild){\n\t\tthrow new Error(ExceptionMessage[HIERARCHY_REQUEST_ERR])\n\t},\n\tdeleteData: function(offset, count) {\n\t\tthis.replaceData(offset,count,\"\");\n\t},\n\treplaceData: function(offset, count, text) {\n\t\tvar start = this.data.substring(0,offset);\n\t\tvar end = this.data.substring(offset+count);\n\t\ttext = start + text + end;\n\t\tthis.nodeValue = this.data = text;\n\t\tthis.length = text.length;\n\t}\n}\n_extends(CharacterData,Node);\nfunction Text() {\n};\nText.prototype = {\n\tnodeName : \"#text\",\n\tnodeType : TEXT_NODE,\n\tsplitText : function(offset) {\n\t\tvar text = this.data;\n\t\tvar newText = text.substring(offset);\n\t\ttext = text.substring(0, offset);\n\t\tthis.data = this.nodeValue = text;\n\t\tthis.length = text.length;\n\t\tvar newNode = this.ownerDocument.createTextNode(newText);\n\t\tif(this.parentNode){\n\t\t\tthis.parentNode.insertBefore(newNode, this.nextSibling);\n\t\t}\n\t\treturn newNode;\n\t}\n}\n_extends(Text,CharacterData);\nfunction Comment() {\n};\nComment.prototype = {\n\tnodeName : \"#comment\",\n\tnodeType : COMMENT_NODE\n}\n_extends(Comment,CharacterData);\n\nfunction CDATASection() {\n};\nCDATASection.prototype = {\n\tnodeName : \"#cdata-section\",\n\tnodeType : CDATA_SECTION_NODE\n}\n_extends(CDATASection,CharacterData);\n\n\nfunction DocumentType() {\n};\nDocumentType.prototype.nodeType = DOCUMENT_TYPE_NODE;\n_extends(DocumentType,Node);\n\nfunction Notation() {\n};\nNotation.prototype.nodeType = NOTATION_NODE;\n_extends(Notation,Node);\n\nfunction Entity() {\n};\nEntity.prototype.nodeType = ENTITY_NODE;\n_extends(Entity,Node);\n\nfunction EntityReference() {\n};\nEntityReference.prototype.nodeType = ENTITY_REFERENCE_NODE;\n_extends(EntityReference,Node);\n\nfunction DocumentFragment() {\n};\nDocumentFragment.prototype.nodeName =\t\"#document-fragment\";\nDocumentFragment.prototype.nodeType =\tDOCUMENT_FRAGMENT_NODE;\n_extends(DocumentFragment,Node);\n\n\nfunction ProcessingInstruction() {\n}\nProcessingInstruction.prototype.nodeType = PROCESSING_INSTRUCTION_NODE;\n_extends(ProcessingInstruction,Node);\nfunction XMLSerializer(){}\nXMLSerializer.prototype.serializeToString = function(node,isHtml,nodeFilter){\n\treturn nodeSerializeToString.call(node,isHtml,nodeFilter);\n}\nNode.prototype.toString = nodeSerializeToString;\nfunction nodeSerializeToString(isHtml,nodeFilter){\n\tvar buf = [];\n\tvar refNode = this.nodeType == 9 && this.documentElement || this;\n\tvar prefix = refNode.prefix;\n\tvar uri = refNode.namespaceURI;\n\n\tif(uri && prefix == null){\n\t\t//console.log(prefix)\n\t\tvar prefix = refNode.lookupPrefix(uri);\n\t\tif(prefix == null){\n\t\t\t//isHTML = true;\n\t\t\tvar visibleNamespaces=[\n\t\t\t{namespace:uri,prefix:null}\n\t\t\t//{namespace:uri,prefix:''}\n\t\t\t]\n\t\t}\n\t}\n\tserializeToString(this,buf,isHtml,nodeFilter,visibleNamespaces);\n\t//console.log('###',this.nodeType,uri,prefix,buf.join(''))\n\treturn buf.join('');\n}\n\nfunction needNamespaceDefine(node, isHTML, visibleNamespaces) {\n\tvar prefix = node.prefix || '';\n\tvar uri = node.namespaceURI;\n\t// According to [Namespaces in XML 1.0](https://www.w3.org/TR/REC-xml-names/#ns-using) ,\n\t// and more specifically https://www.w3.org/TR/REC-xml-names/#nsc-NoPrefixUndecl :\n\t// > In a namespace declaration for a prefix [...], the attribute value MUST NOT be empty.\n\t// in a similar manner [Namespaces in XML 1.1](https://www.w3.org/TR/xml-names11/#ns-using)\n\t// and more specifically https://www.w3.org/TR/xml-names11/#nsc-NSDeclared :\n\t// > [...] Furthermore, the attribute value [...] must not be an empty string.\n\t// so serializing empty namespace value like xmlns:ds=\"\" would produce an invalid XML document.\n\tif (!uri) {\n\t\treturn false;\n\t}\n\tif (prefix === \"xml\" && uri === NAMESPACE.XML || uri === NAMESPACE.XMLNS) {\n\t\treturn false;\n\t}\n\n\tvar i = visibleNamespaces.length\n\twhile (i--) {\n\t\tvar ns = visibleNamespaces[i];\n\t\t// get namespace prefix\n\t\tif (ns.prefix === prefix) {\n\t\t\treturn ns.namespace !== uri;\n\t\t}\n\t}\n\treturn true;\n}\n/**\n * Well-formed constraint: No < in Attribute Values\n * > The replacement text of any entity referred to directly or indirectly\n * > in an attribute value must not contain a <.\n * @see https://www.w3.org/TR/xml11/#CleanAttrVals\n * @see https://www.w3.org/TR/xml11/#NT-AttValue\n *\n * Literal whitespace other than space that appear in attribute values\n * are serialized as their entity references, so they will be preserved.\n * (In contrast to whitespace literals in the input which are normalized to spaces)\n * @see https://www.w3.org/TR/xml11/#AVNormalize\n * @see https://w3c.github.io/DOM-Parsing/#serializing-an-element-s-attributes\n */\nfunction addSerializedAttribute(buf, qualifiedName, value) {\n\tbuf.push(' ', qualifiedName, '=\"', value.replace(/[<>&\"\\t\\n\\r]/g, _xmlEncoder), '\"')\n}\n\nfunction serializeToString(node,buf,isHTML,nodeFilter,visibleNamespaces){\n\tif (!visibleNamespaces) {\n\t\tvisibleNamespaces = [];\n\t}\n\n\tif(nodeFilter){\n\t\tnode = nodeFilter(node);\n\t\tif(node){\n\t\t\tif(typeof node == 'string'){\n\t\t\t\tbuf.push(node);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}else{\n\t\t\treturn;\n\t\t}\n\t\t//buf.sort.apply(attrs, attributeSorter);\n\t}\n\n\tswitch(node.nodeType){\n\tcase ELEMENT_NODE:\n\t\tvar attrs = node.attributes;\n\t\tvar len = attrs.length;\n\t\tvar child = node.firstChild;\n\t\tvar nodeName = node.tagName;\n\n\t\tisHTML = NAMESPACE.isHTML(node.namespaceURI) || isHTML\n\n\t\tvar prefixedNodeName = nodeName\n\t\tif (!isHTML && !node.prefix && node.namespaceURI) {\n\t\t\tvar defaultNS\n\t\t\t// lookup current default ns from `xmlns` attribute\n\t\t\tfor (var ai = 0; ai < attrs.length; ai++) {\n\t\t\t\tif (attrs.item(ai).name === 'xmlns') {\n\t\t\t\t\tdefaultNS = attrs.item(ai).value\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!defaultNS) {\n\t\t\t\t// lookup current default ns in visibleNamespaces\n\t\t\t\tfor (var nsi = visibleNamespaces.length - 1; nsi >= 0; nsi--) {\n\t\t\t\t\tvar namespace = visibleNamespaces[nsi]\n\t\t\t\t\tif (namespace.prefix === '' && namespace.namespace === node.namespaceURI) {\n\t\t\t\t\t\tdefaultNS = namespace.namespace\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (defaultNS !== node.namespaceURI) {\n\t\t\t\tfor (var nsi = visibleNamespaces.length - 1; nsi >= 0; nsi--) {\n\t\t\t\t\tvar namespace = visibleNamespaces[nsi]\n\t\t\t\t\tif (namespace.namespace === node.namespaceURI) {\n\t\t\t\t\t\tif (namespace.prefix) {\n\t\t\t\t\t\t\tprefixedNodeName = namespace.prefix + ':' + nodeName\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tbuf.push('<', prefixedNodeName);\n\n\t\tfor(var i=0;i<len;i++){\n\t\t\t// add namespaces for attributes\n\t\t\tvar attr = attrs.item(i);\n\t\t\tif (attr.prefix == 'xmlns') {\n\t\t\t\tvisibleNamespaces.push({ prefix: attr.localName, namespace: attr.value });\n\t\t\t}else if(attr.nodeName == 'xmlns'){\n\t\t\t\tvisibleNamespaces.push({ prefix: '', namespace: attr.value });\n\t\t\t}\n\t\t}\n\n\t\tfor(var i=0;i<len;i++){\n\t\t\tvar attr = attrs.item(i);\n\t\t\tif (needNamespaceDefine(attr,isHTML, visibleNamespaces)) {\n\t\t\t\tvar prefix = attr.prefix||'';\n\t\t\t\tvar uri = attr.namespaceURI;\n\t\t\t\taddSerializedAttribute(buf, prefix ? 'xmlns:' + prefix : \"xmlns\", uri);\n\t\t\t\tvisibleNamespaces.push({ prefix: prefix, namespace:uri });\n\t\t\t}\n\t\t\tserializeToString(attr,buf,isHTML,nodeFilter,visibleNamespaces);\n\t\t}\n\n\t\t// add namespace for current node\n\t\tif (nodeName === prefixedNodeName && needNamespaceDefine(node, isHTML, visibleNamespaces)) {\n\t\t\tvar prefix = node.prefix||'';\n\t\t\tvar uri = node.namespaceURI;\n\t\t\taddSerializedAttribute(buf, prefix ? 'xmlns:' + prefix : \"xmlns\", uri);\n\t\t\tvisibleNamespaces.push({ prefix: prefix, namespace:uri });\n\t\t}\n\n\t\tif(child || isHTML && !/^(?:meta|link|img|br|hr|input)$/i.test(nodeName)){\n\t\t\tbuf.push('>');\n\t\t\t//if is cdata child node\n\t\t\tif(isHTML && /^script$/i.test(nodeName)){\n\t\t\t\twhile(child){\n\t\t\t\t\tif(child.data){\n\t\t\t\t\t\tbuf.push(child.data);\n\t\t\t\t\t}else{\n\t\t\t\t\t\tserializeToString(child, buf, isHTML, nodeFilter, visibleNamespaces.slice());\n\t\t\t\t\t}\n\t\t\t\t\tchild = child.nextSibling;\n\t\t\t\t}\n\t\t\t}else\n\t\t\t{\n\t\t\t\twhile(child){\n\t\t\t\t\tserializeToString(child, buf, isHTML, nodeFilter, visibleNamespaces.slice());\n\t\t\t\t\tchild = child.nextSibling;\n\t\t\t\t}\n\t\t\t}\n\t\t\tbuf.push('</',prefixedNodeName,'>');\n\t\t}else{\n\t\t\tbuf.push('/>');\n\t\t}\n\t\t// remove added visible namespaces\n\t\t//visibleNamespaces.length = startVisibleNamespaces;\n\t\treturn;\n\tcase DOCUMENT_NODE:\n\tcase DOCUMENT_FRAGMENT_NODE:\n\t\tvar child = node.firstChild;\n\t\twhile(child){\n\t\t\tserializeToString(child, buf, isHTML, nodeFilter, visibleNamespaces.slice());\n\t\t\tchild = child.nextSibling;\n\t\t}\n\t\treturn;\n\tcase ATTRIBUTE_NODE:\n\t\treturn addSerializedAttribute(buf, node.name, node.value);\n\tcase TEXT_NODE:\n\t\t/**\n\t\t * The ampersand character (&) and the left angle bracket (<) must not appear in their literal form,\n\t\t * except when used as markup delimiters, or within a comment, a processing instruction, or a CDATA section.\n\t\t * If they are needed elsewhere, they must be escaped using either numeric character references or the strings\n\t\t * `&amp;` and `&lt;` respectively.\n\t\t * The right angle bracket (>) may be represented using the string \" &gt; \", and must, for compatibility,\n\t\t * be escaped using either `&gt;` or a character reference when it appears in the string `]]>` in content,\n\t\t * when that string is not marking the end of a CDATA section.\n\t\t *\n\t\t * In the content of elements, character data is any string of characters\n\t\t * which does not contain the start-delimiter of any markup\n\t\t * and does not include the CDATA-section-close delimiter, `]]>`.\n\t\t *\n\t\t * @see https://www.w3.org/TR/xml/#NT-CharData\n\t\t * @see https://w3c.github.io/DOM-Parsing/#xml-serializing-a-text-node\n\t\t */\n\t\treturn buf.push(node.data\n\t\t\t.replace(/[<&>]/g,_xmlEncoder)\n\t\t);\n\tcase CDATA_SECTION_NODE:\n\t\treturn buf.push( '<![CDATA[',node.data,']]>');\n\tcase COMMENT_NODE:\n\t\treturn buf.push( \"<!--\",node.data,\"-->\");\n\tcase DOCUMENT_TYPE_NODE:\n\t\tvar pubid = node.publicId;\n\t\tvar sysid = node.systemId;\n\t\tbuf.push('<!DOCTYPE ',node.name);\n\t\tif(pubid){\n\t\t\tbuf.push(' PUBLIC ', pubid);\n\t\t\tif (sysid && sysid!='.') {\n\t\t\t\tbuf.push(' ', sysid);\n\t\t\t}\n\t\t\tbuf.push('>');\n\t\t}else if(sysid && sysid!='.'){\n\t\t\tbuf.push(' SYSTEM ', sysid, '>');\n\t\t}else{\n\t\t\tvar sub = node.internalSubset;\n\t\t\tif(sub){\n\t\t\t\tbuf.push(\" [\",sub,\"]\");\n\t\t\t}\n\t\t\tbuf.push(\">\");\n\t\t}\n\t\treturn;\n\tcase PROCESSING_INSTRUCTION_NODE:\n\t\treturn buf.push( \"<?\",node.target,\" \",node.data,\"?>\");\n\tcase ENTITY_REFERENCE_NODE:\n\t\treturn buf.push( '&',node.nodeName,';');\n\t//case ENTITY_NODE:\n\t//case NOTATION_NODE:\n\tdefault:\n\t\tbuf.push('??',node.nodeName);\n\t}\n}\nfunction importNode(doc,node,deep){\n\tvar node2;\n\tswitch (node.nodeType) {\n\tcase ELEMENT_NODE:\n\t\tnode2 = node.cloneNode(false);\n\t\tnode2.ownerDocument = doc;\n\t\t//var attrs = node2.attributes;\n\t\t//var len = attrs.length;\n\t\t//for(var i=0;i<len;i++){\n\t\t\t//node2.setAttributeNodeNS(importNode(doc,attrs.item(i),deep));\n\t\t//}\n\tcase DOCUMENT_FRAGMENT_NODE:\n\t\tbreak;\n\tcase ATTRIBUTE_NODE:\n\t\tdeep = true;\n\t\tbreak;\n\t//case ENTITY_REFERENCE_NODE:\n\t//case PROCESSING_INSTRUCTION_NODE:\n\t////case TEXT_NODE:\n\t//case CDATA_SECTION_NODE:\n\t//case COMMENT_NODE:\n\t//\tdeep = false;\n\t//\tbreak;\n\t//case DOCUMENT_NODE:\n\t//case DOCUMENT_TYPE_NODE:\n\t//cannot be imported.\n\t//case ENTITY_NODE:\n\t//case NOTATION_NODE：\n\t//can not hit in level3\n\t//default:throw e;\n\t}\n\tif(!node2){\n\t\tnode2 = node.cloneNode(false);//false\n\t}\n\tnode2.ownerDocument = doc;\n\tnode2.parentNode = null;\n\tif(deep){\n\t\tvar child = node.firstChild;\n\t\twhile(child){\n\t\t\tnode2.appendChild(importNode(doc,child,deep));\n\t\t\tchild = child.nextSibling;\n\t\t}\n\t}\n\treturn node2;\n}\n//\n//var _relationMap = {firstChild:1,lastChild:1,previousSibling:1,nextSibling:1,\n//\t\t\t\t\tattributes:1,childNodes:1,parentNode:1,documentElement:1,doctype,};\nfunction cloneNode(doc,node,deep){\n\tvar node2 = new node.constructor();\n\tfor (var n in node) {\n\t\tif (Object.prototype.hasOwnProperty.call(node, n)) {\n\t\t\tvar v = node[n];\n\t\t\tif (typeof v != \"object\") {\n\t\t\t\tif (v != node2[n]) {\n\t\t\t\t\tnode2[n] = v;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(node.childNodes){\n\t\tnode2.childNodes = new NodeList();\n\t}\n\tnode2.ownerDocument = doc;\n\tswitch (node2.nodeType) {\n\tcase ELEMENT_NODE:\n\t\tvar attrs\t= node.attributes;\n\t\tvar attrs2\t= node2.attributes = new NamedNodeMap();\n\t\tvar len = attrs.length\n\t\tattrs2._ownerElement = node2;\n\t\tfor(var i=0;i<len;i++){\n\t\t\tnode2.setAttributeNode(cloneNode(doc,attrs.item(i),true));\n\t\t}\n\t\tbreak;;\n\tcase ATTRIBUTE_NODE:\n\t\tdeep = true;\n\t}\n\tif(deep){\n\t\tvar child = node.firstChild;\n\t\twhile(child){\n\t\t\tnode2.appendChild(cloneNode(doc,child,deep));\n\t\t\tchild = child.nextSibling;\n\t\t}\n\t}\n\treturn node2;\n}\n\nfunction __set__(object,key,value){\n\tobject[key] = value\n}\n//do dynamic\ntry{\n\tif(Object.defineProperty){\n\t\tObject.defineProperty(LiveNodeList.prototype,'length',{\n\t\t\tget:function(){\n\t\t\t\t_updateLiveList(this);\n\t\t\t\treturn this.$$length;\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(Node.prototype,'textContent',{\n\t\t\tget:function(){\n\t\t\t\treturn getTextContent(this);\n\t\t\t},\n\n\t\t\tset:function(data){\n\t\t\t\tswitch(this.nodeType){\n\t\t\t\tcase ELEMENT_NODE:\n\t\t\t\tcase DOCUMENT_FRAGMENT_NODE:\n\t\t\t\t\twhile(this.firstChild){\n\t\t\t\t\t\tthis.removeChild(this.firstChild);\n\t\t\t\t\t}\n\t\t\t\t\tif(data || String(data)){\n\t\t\t\t\t\tthis.appendChild(this.ownerDocument.createTextNode(data));\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthis.data = data;\n\t\t\t\t\tthis.value = data;\n\t\t\t\t\tthis.nodeValue = data;\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\n\t\tfunction getTextContent(node){\n\t\t\tswitch(node.nodeType){\n\t\t\tcase ELEMENT_NODE:\n\t\t\tcase DOCUMENT_FRAGMENT_NODE:\n\t\t\t\tvar buf = [];\n\t\t\t\tnode = node.firstChild;\n\t\t\t\twhile(node){\n\t\t\t\t\tif(node.nodeType!==7 && node.nodeType !==8){\n\t\t\t\t\t\tbuf.push(getTextContent(node));\n\t\t\t\t\t}\n\t\t\t\t\tnode = node.nextSibling;\n\t\t\t\t}\n\t\t\t\treturn buf.join('');\n\t\t\tdefault:\n\t\t\t\treturn node.nodeValue;\n\t\t\t}\n\t\t}\n\n\t\t__set__ = function(object,key,value){\n\t\t\t//console.log(value)\n\t\t\tobject['$$'+key] = value\n\t\t}\n\t}\n}catch(e){//ie8\n}\n\n//if(typeof require == 'function'){\n\texports.DocumentType = DocumentType;\n\texports.DOMException = DOMException;\n\texports.DOMImplementation = DOMImplementation;\n\texports.Element = Element;\n\texports.Node = Node;\n\texports.NodeList = NodeList;\n\texports.XMLSerializer = XMLSerializer;\n//}\n", "'use strict';\n\nvar freeze = require('./conventions').freeze;\n\n/**\n * The entities that are predefined in every XML document.\n *\n * @see https://www.w3.org/TR/2006/REC-xml11-20060816/#sec-predefined-ent W3C XML 1.1\n * @see https://www.w3.org/TR/2008/REC-xml-20081126/#sec-predefined-ent W3C XML 1.0\n * @see https://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references#Predefined_entities_in_XML Wikipedia\n */\nexports.XML_ENTITIES = freeze({\n\tamp: '&',\n\tapos: \"'\",\n\tgt: '>',\n\tlt: '<',\n\tquot: '\"',\n});\n\n/**\n * A map of all entities that are detected in an HTML document.\n * They contain all entries from `XML_ENTITIES`.\n *\n * @see XML_ENTITIES\n * @see DOMParser.parseFromString\n * @see DOMImplementation.prototype.createHTMLDocument\n * @see https://html.spec.whatwg.org/#named-character-references WHATWG HTML(5) Spec\n * @see https://html.spec.whatwg.org/entities.json JSON\n * @see https://www.w3.org/TR/xml-entity-names/ W3C XML Entity Names\n * @see https://www.w3.org/TR/html4/sgml/entities.html W3C HTML4/SGML\n * @see https://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references#Character_entity_references_in_HTML Wikipedia (HTML)\n * @see https://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references#Entities_representing_special_characters_in_XHTML Wikpedia (XHTML)\n */\nexports.HTML_ENTITIES = freeze({\n\tAacute: '\\u00C1',\n\taacute: '\\u00E1',\n\tAbreve: '\\u0102',\n\tabreve: '\\u0103',\n\tac: '\\u223E',\n\tacd: '\\u223F',\n\tacE: '\\u223E\\u0333',\n\tAcirc: '\\u00C2',\n\tacirc: '\\u00E2',\n\tacute: '\\u00B4',\n\tAcy: '\\u0410',\n\tacy: '\\u0430',\n\tAElig: '\\u00C6',\n\taelig: '\\u00E6',\n\taf: '\\u2061',\n\tAfr: '\\uD835\\uDD04',\n\tafr: '\\uD835\\uDD1E',\n\tAgrave: '\\u00C0',\n\tagrave: '\\u00E0',\n\talefsym: '\\u2135',\n\taleph: '\\u2135',\n\tAlpha: '\\u0391',\n\talpha: '\\u03B1',\n\tAmacr: '\\u0100',\n\tamacr: '\\u0101',\n\tamalg: '\\u2A3F',\n\tAMP: '\\u0026',\n\tamp: '\\u0026',\n\tAnd: '\\u2A53',\n\tand: '\\u2227',\n\tandand: '\\u2A55',\n\tandd: '\\u2A5C',\n\tandslope: '\\u2A58',\n\tandv: '\\u2A5A',\n\tang: '\\u2220',\n\tange: '\\u29A4',\n\tangle: '\\u2220',\n\tangmsd: '\\u2221',\n\tangmsdaa: '\\u29A8',\n\tangmsdab: '\\u29A9',\n\tangmsdac: '\\u29AA',\n\tangmsdad: '\\u29AB',\n\tangmsdae: '\\u29AC',\n\tangmsdaf: '\\u29AD',\n\tangmsdag: '\\u29AE',\n\tangmsdah: '\\u29AF',\n\tangrt: '\\u221F',\n\tangrtvb: '\\u22BE',\n\tangrtvbd: '\\u299D',\n\tangsph: '\\u2222',\n\tangst: '\\u00C5',\n\tangzarr: '\\u237C',\n\tAogon: '\\u0104',\n\taogon: '\\u0105',\n\tAopf: '\\uD835\\uDD38',\n\taopf: '\\uD835\\uDD52',\n\tap: '\\u2248',\n\tapacir: '\\u2A6F',\n\tapE: '\\u2A70',\n\tape: '\\u224A',\n\tapid: '\\u224B',\n\tapos: '\\u0027',\n\tApplyFunction: '\\u2061',\n\tapprox: '\\u2248',\n\tapproxeq: '\\u224A',\n\tAring: '\\u00C5',\n\taring: '\\u00E5',\n\tAscr: '\\uD835\\uDC9C',\n\tascr: '\\uD835\\uDCB6',\n\tAssign: '\\u2254',\n\tast: '\\u002A',\n\tasymp: '\\u2248',\n\tasympeq: '\\u224D',\n\tAtilde: '\\u00C3',\n\tatilde: '\\u00E3',\n\tAuml: '\\u00C4',\n\tauml: '\\u00E4',\n\tawconint: '\\u2233',\n\tawint: '\\u2A11',\n\tbackcong: '\\u224C',\n\tbackepsilon: '\\u03F6',\n\tbackprime: '\\u2035',\n\tbacksim: '\\u223D',\n\tbacksimeq: '\\u22CD',\n\tBackslash: '\\u2216',\n\tBarv: '\\u2AE7',\n\tbarvee: '\\u22BD',\n\tBarwed: '\\u2306',\n\tbarwed: '\\u2305',\n\tbarwedge: '\\u2305',\n\tbbrk: '\\u23B5',\n\tbbrktbrk: '\\u23B6',\n\tbcong: '\\u224C',\n\tBcy: '\\u0411',\n\tbcy: '\\u0431',\n\tbdquo: '\\u201E',\n\tbecaus: '\\u2235',\n\tBecause: '\\u2235',\n\tbecause: '\\u2235',\n\tbemptyv: '\\u29B0',\n\tbepsi: '\\u03F6',\n\tbernou: '\\u212C',\n\tBernoullis: '\\u212C',\n\tBeta: '\\u0392',\n\tbeta: '\\u03B2',\n\tbeth: '\\u2136',\n\tbetween: '\\u226C',\n\tBfr: '\\uD835\\uDD05',\n\tbfr: '\\uD835\\uDD1F',\n\tbigcap: '\\u22C2',\n\tbigcirc: '\\u25EF',\n\tbigcup: '\\u22C3',\n\tbigodot: '\\u2A00',\n\tbigoplus: '\\u2A01',\n\tbigotimes: '\\u2A02',\n\tbigsqcup: '\\u2A06',\n\tbigstar: '\\u2605',\n\tbigtriangledown: '\\u25BD',\n\tbigtriangleup: '\\u25B3',\n\tbiguplus: '\\u2A04',\n\tbigvee: '\\u22C1',\n\tbigwedge: '\\u22C0',\n\tbkarow: '\\u290D',\n\tblacklozenge: '\\u29EB',\n\tblacksquare: '\\u25AA',\n\tblacktriangle: '\\u25B4',\n\tblacktriangledown: '\\u25BE',\n\tblacktriangleleft: '\\u25C2',\n\tblacktriangleright: '\\u25B8',\n\tblank: '\\u2423',\n\tblk12: '\\u2592',\n\tblk14: '\\u2591',\n\tblk34: '\\u2593',\n\tblock: '\\u2588',\n\tbne: '\\u003D\\u20E5',\n\tbnequiv: '\\u2261\\u20E5',\n\tbNot: '\\u2AED',\n\tbnot: '\\u2310',\n\tBopf: '\\uD835\\uDD39',\n\tbopf: '\\uD835\\uDD53',\n\tbot: '\\u22A5',\n\tbottom: '\\u22A5',\n\tbowtie: '\\u22C8',\n\tboxbox: '\\u29C9',\n\tboxDL: '\\u2557',\n\tboxDl: '\\u2556',\n\tboxdL: '\\u2555',\n\tboxdl: '\\u2510',\n\tboxDR: '\\u2554',\n\tboxDr: '\\u2553',\n\tboxdR: '\\u2552',\n\tboxdr: '\\u250C',\n\tboxH: '\\u2550',\n\tboxh: '\\u2500',\n\tboxHD: '\\u2566',\n\tboxHd: '\\u2564',\n\tboxhD: '\\u2565',\n\tboxhd: '\\u252C',\n\tboxHU: '\\u2569',\n\tboxHu: '\\u2567',\n\tboxhU: '\\u2568',\n\tboxhu: '\\u2534',\n\tboxminus: '\\u229F',\n\tboxplus: '\\u229E',\n\tboxtimes: '\\u22A0',\n\tboxUL: '\\u255D',\n\tboxUl: '\\u255C',\n\tboxuL: '\\u255B',\n\tboxul: '\\u2518',\n\tboxUR: '\\u255A',\n\tboxUr: '\\u2559',\n\tboxuR: '\\u2558',\n\tboxur: '\\u2514',\n\tboxV: '\\u2551',\n\tboxv: '\\u2502',\n\tboxVH: '\\u256C',\n\tboxVh: '\\u256B',\n\tboxvH: '\\u256A',\n\tboxvh: '\\u253C',\n\tboxVL: '\\u2563',\n\tboxVl: '\\u2562',\n\tboxvL: '\\u2561',\n\tboxvl: '\\u2524',\n\tboxVR: '\\u2560',\n\tboxVr: '\\u255F',\n\tboxvR: '\\u255E',\n\tboxvr: '\\u251C',\n\tbprime: '\\u2035',\n\tBreve: '\\u02D8',\n\tbreve: '\\u02D8',\n\tbrvbar: '\\u00A6',\n\tBscr: '\\u212C',\n\tbscr: '\\uD835\\uDCB7',\n\tbsemi: '\\u204F',\n\tbsim: '\\u223D',\n\tbsime: '\\u22CD',\n\tbsol: '\\u005C',\n\tbsolb: '\\u29C5',\n\tbsolhsub: '\\u27C8',\n\tbull: '\\u2022',\n\tbullet: '\\u2022',\n\tbump: '\\u224E',\n\tbumpE: '\\u2AAE',\n\tbumpe: '\\u224F',\n\tBumpeq: '\\u224E',\n\tbumpeq: '\\u224F',\n\tCacute: '\\u0106',\n\tcacute: '\\u0107',\n\tCap: '\\u22D2',\n\tcap: '\\u2229',\n\tcapand: '\\u2A44',\n\tcapbrcup: '\\u2A49',\n\tcapcap: '\\u2A4B',\n\tcapcup: '\\u2A47',\n\tcapdot: '\\u2A40',\n\tCapitalDifferentialD: '\\u2145',\n\tcaps: '\\u2229\\uFE00',\n\tcaret: '\\u2041',\n\tcaron: '\\u02C7',\n\tCayleys: '\\u212D',\n\tccaps: '\\u2A4D',\n\tCcaron: '\\u010C',\n\tccaron: '\\u010D',\n\tCcedil: '\\u00C7',\n\tccedil: '\\u00E7',\n\tCcirc: '\\u0108',\n\tccirc: '\\u0109',\n\tCconint: '\\u2230',\n\tccups: '\\u2A4C',\n\tccupssm: '\\u2A50',\n\tCdot: '\\u010A',\n\tcdot: '\\u010B',\n\tcedil: '\\u00B8',\n\tCedilla: '\\u00B8',\n\tcemptyv: '\\u29B2',\n\tcent: '\\u00A2',\n\tCenterDot: '\\u00B7',\n\tcenterdot: '\\u00B7',\n\tCfr: '\\u212D',\n\tcfr: '\\uD835\\uDD20',\n\tCHcy: '\\u0427',\n\tchcy: '\\u0447',\n\tcheck: '\\u2713',\n\tcheckmark: '\\u2713',\n\tChi: '\\u03A7',\n\tchi: '\\u03C7',\n\tcir: '\\u25CB',\n\tcirc: '\\u02C6',\n\tcirceq: '\\u2257',\n\tcirclearrowleft: '\\u21BA',\n\tcirclearrowright: '\\u21BB',\n\tcircledast: '\\u229B',\n\tcircledcirc: '\\u229A',\n\tcircleddash: '\\u229D',\n\tCircleDot: '\\u2299',\n\tcircledR: '\\u00AE',\n\tcircledS: '\\u24C8',\n\tCircleMinus: '\\u2296',\n\tCirclePlus: '\\u2295',\n\tCircleTimes: '\\u2297',\n\tcirE: '\\u29C3',\n\tcire: '\\u2257',\n\tcirfnint: '\\u2A10',\n\tcirmid: '\\u2AEF',\n\tcirscir: '\\u29C2',\n\tClockwiseContourIntegral: '\\u2232',\n\tCloseCurlyDoubleQuote: '\\u201D',\n\tCloseCurlyQuote: '\\u2019',\n\tclubs: '\\u2663',\n\tclubsuit: '\\u2663',\n\tColon: '\\u2237',\n\tcolon: '\\u003A',\n\tColone: '\\u2A74',\n\tcolone: '\\u2254',\n\tcoloneq: '\\u2254',\n\tcomma: '\\u002C',\n\tcommat: '\\u0040',\n\tcomp: '\\u2201',\n\tcompfn: '\\u2218',\n\tcomplement: '\\u2201',\n\tcomplexes: '\\u2102',\n\tcong: '\\u2245',\n\tcongdot: '\\u2A6D',\n\tCongruent: '\\u2261',\n\tConint: '\\u222F',\n\tconint: '\\u222E',\n\tContourIntegral: '\\u222E',\n\tCopf: '\\u2102',\n\tcopf: '\\uD835\\uDD54',\n\tcoprod: '\\u2210',\n\tCoproduct: '\\u2210',\n\tCOPY: '\\u00A9',\n\tcopy: '\\u00A9',\n\tcopysr: '\\u2117',\n\tCounterClockwiseContourIntegral: '\\u2233',\n\tcrarr: '\\u21B5',\n\tCross: '\\u2A2F',\n\tcross: '\\u2717',\n\tCscr: '\\uD835\\uDC9E',\n\tcscr: '\\uD835\\uDCB8',\n\tcsub: '\\u2ACF',\n\tcsube: '\\u2AD1',\n\tcsup: '\\u2AD0',\n\tcsupe: '\\u2AD2',\n\tctdot: '\\u22EF',\n\tcudarrl: '\\u2938',\n\tcudarrr: '\\u2935',\n\tcuepr: '\\u22DE',\n\tcuesc: '\\u22DF',\n\tcularr: '\\u21B6',\n\tcularrp: '\\u293D',\n\tCup: '\\u22D3',\n\tcup: '\\u222A',\n\tcupbrcap: '\\u2A48',\n\tCupCap: '\\u224D',\n\tcupcap: '\\u2A46',\n\tcupcup: '\\u2A4A',\n\tcupdot: '\\u228D',\n\tcupor: '\\u2A45',\n\tcups: '\\u222A\\uFE00',\n\tcurarr: '\\u21B7',\n\tcurarrm: '\\u293C',\n\tcurlyeqprec: '\\u22DE',\n\tcurlyeqsucc: '\\u22DF',\n\tcurlyvee: '\\u22CE',\n\tcurlywedge: '\\u22CF',\n\tcurren: '\\u00A4',\n\tcurvearrowleft: '\\u21B6',\n\tcurvearrowright: '\\u21B7',\n\tcuvee: '\\u22CE',\n\tcuwed: '\\u22CF',\n\tcwconint: '\\u2232',\n\tcwint: '\\u2231',\n\tcylcty: '\\u232D',\n\tDagger: '\\u2021',\n\tdagger: '\\u2020',\n\tdaleth: '\\u2138',\n\tDarr: '\\u21A1',\n\tdArr: '\\u21D3',\n\tdarr: '\\u2193',\n\tdash: '\\u2010',\n\tDashv: '\\u2AE4',\n\tdashv: '\\u22A3',\n\tdbkarow: '\\u290F',\n\tdblac: '\\u02DD',\n\tDcaron: '\\u010E',\n\tdcaron: '\\u010F',\n\tDcy: '\\u0414',\n\tdcy: '\\u0434',\n\tDD: '\\u2145',\n\tdd: '\\u2146',\n\tddagger: '\\u2021',\n\tddarr: '\\u21CA',\n\tDDotrahd: '\\u2911',\n\tddotseq: '\\u2A77',\n\tdeg: '\\u00B0',\n\tDel: '\\u2207',\n\tDelta: '\\u0394',\n\tdelta: '\\u03B4',\n\tdemptyv: '\\u29B1',\n\tdfisht: '\\u297F',\n\tDfr: '\\uD835\\uDD07',\n\tdfr: '\\uD835\\uDD21',\n\tdHar: '\\u2965',\n\tdharl: '\\u21C3',\n\tdharr: '\\u21C2',\n\tDiacriticalAcute: '\\u00B4',\n\tDiacriticalDot: '\\u02D9',\n\tDiacriticalDoubleAcute: '\\u02DD',\n\tDiacriticalGrave: '\\u0060',\n\tDiacriticalTilde: '\\u02DC',\n\tdiam: '\\u22C4',\n\tDiamond: '\\u22C4',\n\tdiamond: '\\u22C4',\n\tdiamondsuit: '\\u2666',\n\tdiams: '\\u2666',\n\tdie: '\\u00A8',\n\tDifferentialD: '\\u2146',\n\tdigamma: '\\u03DD',\n\tdisin: '\\u22F2',\n\tdiv: '\\u00F7',\n\tdivide: '\\u00F7',\n\tdivideontimes: '\\u22C7',\n\tdivonx: '\\u22C7',\n\tDJcy: '\\u0402',\n\tdjcy: '\\u0452',\n\tdlcorn: '\\u231E',\n\tdlcrop: '\\u230D',\n\tdollar: '\\u0024',\n\tDopf: '\\uD835\\uDD3B',\n\tdopf: '\\uD835\\uDD55',\n\tDot: '\\u00A8',\n\tdot: '\\u02D9',\n\tDotDot: '\\u20DC',\n\tdoteq: '\\u2250',\n\tdoteqdot: '\\u2251',\n\tDotEqual: '\\u2250',\n\tdotminus: '\\u2238',\n\tdotplus: '\\u2214',\n\tdotsquare: '\\u22A1',\n\tdoublebarwedge: '\\u2306',\n\tDoubleContourIntegral: '\\u222F',\n\tDoubleDot: '\\u00A8',\n\tDoubleDownArrow: '\\u21D3',\n\tDoubleLeftArrow: '\\u21D0',\n\tDoubleLeftRightArrow: '\\u21D4',\n\tDoubleLeftTee: '\\u2AE4',\n\tDoubleLongLeftArrow: '\\u27F8',\n\tDoubleLongLeftRightArrow: '\\u27FA',\n\tDoubleLongRightArrow: '\\u27F9',\n\tDoubleRightArrow: '\\u21D2',\n\tDoubleRightTee: '\\u22A8',\n\tDoubleUpArrow: '\\u21D1',\n\tDoubleUpDownArrow: '\\u21D5',\n\tDoubleVerticalBar: '\\u2225',\n\tDownArrow: '\\u2193',\n\tDownarrow: '\\u21D3',\n\tdownarrow: '\\u2193',\n\tDownArrowBar: '\\u2913',\n\tDownArrowUpArrow: '\\u21F5',\n\tDownBreve: '\\u0311',\n\tdowndownarrows: '\\u21CA',\n\tdownharpoonleft: '\\u21C3',\n\tdownharpoonright: '\\u21C2',\n\tDownLeftRightVector: '\\u2950',\n\tDownLeftTeeVector: '\\u295E',\n\tDownLeftVector: '\\u21BD',\n\tDownLeftVectorBar: '\\u2956',\n\tDownRightTeeVector: '\\u295F',\n\tDownRightVector: '\\u21C1',\n\tDownRightVectorBar: '\\u2957',\n\tDownTee: '\\u22A4',\n\tDownTeeArrow: '\\u21A7',\n\tdrbkarow: '\\u2910',\n\tdrcorn: '\\u231F',\n\tdrcrop: '\\u230C',\n\tDscr: '\\uD835\\uDC9F',\n\tdscr: '\\uD835\\uDCB9',\n\tDScy: '\\u0405',\n\tdscy: '\\u0455',\n\tdsol: '\\u29F6',\n\tDstrok: '\\u0110',\n\tdstrok: '\\u0111',\n\tdtdot: '\\u22F1',\n\tdtri: '\\u25BF',\n\tdtrif: '\\u25BE',\n\tduarr: '\\u21F5',\n\tduhar: '\\u296F',\n\tdwangle: '\\u29A6',\n\tDZcy: '\\u040F',\n\tdzcy: '\\u045F',\n\tdzigrarr: '\\u27FF',\n\tEacute: '\\u00C9',\n\teacute: '\\u00E9',\n\teaster: '\\u2A6E',\n\tEcaron: '\\u011A',\n\tecaron: '\\u011B',\n\tecir: '\\u2256',\n\tEcirc: '\\u00CA',\n\tecirc: '\\u00EA',\n\tecolon: '\\u2255',\n\tEcy: '\\u042D',\n\tecy: '\\u044D',\n\teDDot: '\\u2A77',\n\tEdot: '\\u0116',\n\teDot: '\\u2251',\n\tedot: '\\u0117',\n\tee: '\\u2147',\n\tefDot: '\\u2252',\n\tEfr: '\\uD835\\uDD08',\n\tefr: '\\uD835\\uDD22',\n\teg: '\\u2A9A',\n\tEgrave: '\\u00C8',\n\tegrave: '\\u00E8',\n\tegs: '\\u2A96',\n\tegsdot: '\\u2A98',\n\tel: '\\u2A99',\n\tElement: '\\u2208',\n\telinters: '\\u23E7',\n\tell: '\\u2113',\n\tels: '\\u2A95',\n\telsdot: '\\u2A97',\n\tEmacr: '\\u0112',\n\temacr: '\\u0113',\n\tempty: '\\u2205',\n\temptyset: '\\u2205',\n\tEmptySmallSquare: '\\u25FB',\n\temptyv: '\\u2205',\n\tEmptyVerySmallSquare: '\\u25AB',\n\temsp: '\\u2003',\n\temsp13: '\\u2004',\n\temsp14: '\\u2005',\n\tENG: '\\u014A',\n\teng: '\\u014B',\n\tensp: '\\u2002',\n\tEogon: '\\u0118',\n\teogon: '\\u0119',\n\tEopf: '\\uD835\\uDD3C',\n\teopf: '\\uD835\\uDD56',\n\tepar: '\\u22D5',\n\teparsl: '\\u29E3',\n\teplus: '\\u2A71',\n\tepsi: '\\u03B5',\n\tEpsilon: '\\u0395',\n\tepsilon: '\\u03B5',\n\tepsiv: '\\u03F5',\n\teqcirc: '\\u2256',\n\teqcolon: '\\u2255',\n\teqsim: '\\u2242',\n\teqslantgtr: '\\u2A96',\n\teqslantless: '\\u2A95',\n\tEqual: '\\u2A75',\n\tequals: '\\u003D',\n\tEqualTilde: '\\u2242',\n\tequest: '\\u225F',\n\tEquilibrium: '\\u21CC',\n\tequiv: '\\u2261',\n\tequivDD: '\\u2A78',\n\teqvparsl: '\\u29E5',\n\terarr: '\\u2971',\n\terDot: '\\u2253',\n\tEscr: '\\u2130',\n\tescr: '\\u212F',\n\tesdot: '\\u2250',\n\tEsim: '\\u2A73',\n\tesim: '\\u2242',\n\tEta: '\\u0397',\n\teta: '\\u03B7',\n\tETH: '\\u00D0',\n\teth: '\\u00F0',\n\tEuml: '\\u00CB',\n\teuml: '\\u00EB',\n\teuro: '\\u20AC',\n\texcl: '\\u0021',\n\texist: '\\u2203',\n\tExists: '\\u2203',\n\texpectation: '\\u2130',\n\tExponentialE: '\\u2147',\n\texponentiale: '\\u2147',\n\tfallingdotseq: '\\u2252',\n\tFcy: '\\u0424',\n\tfcy: '\\u0444',\n\tfemale: '\\u2640',\n\tffilig: '\\uFB03',\n\tfflig: '\\uFB00',\n\tffllig: '\\uFB04',\n\tFfr: '\\uD835\\uDD09',\n\tffr: '\\uD835\\uDD23',\n\tfilig: '\\uFB01',\n\tFilledSmallSquare: '\\u25FC',\n\tFilledVerySmallSquare: '\\u25AA',\n\tfjlig: '\\u0066\\u006A',\n\tflat: '\\u266D',\n\tfllig: '\\uFB02',\n\tfltns: '\\u25B1',\n\tfnof: '\\u0192',\n\tFopf: '\\uD835\\uDD3D',\n\tfopf: '\\uD835\\uDD57',\n\tForAll: '\\u2200',\n\tforall: '\\u2200',\n\tfork: '\\u22D4',\n\tforkv: '\\u2AD9',\n\tFouriertrf: '\\u2131',\n\tfpartint: '\\u2A0D',\n\tfrac12: '\\u00BD',\n\tfrac13: '\\u2153',\n\tfrac14: '\\u00BC',\n\tfrac15: '\\u2155',\n\tfrac16: '\\u2159',\n\tfrac18: '\\u215B',\n\tfrac23: '\\u2154',\n\tfrac25: '\\u2156',\n\tfrac34: '\\u00BE',\n\tfrac35: '\\u2157',\n\tfrac38: '\\u215C',\n\tfrac45: '\\u2158',\n\tfrac56: '\\u215A',\n\tfrac58: '\\u215D',\n\tfrac78: '\\u215E',\n\tfrasl: '\\u2044',\n\tfrown: '\\u2322',\n\tFscr: '\\u2131',\n\tfscr: '\\uD835\\uDCBB',\n\tgacute: '\\u01F5',\n\tGamma: '\\u0393',\n\tgamma: '\\u03B3',\n\tGammad: '\\u03DC',\n\tgammad: '\\u03DD',\n\tgap: '\\u2A86',\n\tGbreve: '\\u011E',\n\tgbreve: '\\u011F',\n\tGcedil: '\\u0122',\n\tGcirc: '\\u011C',\n\tgcirc: '\\u011D',\n\tGcy: '\\u0413',\n\tgcy: '\\u0433',\n\tGdot: '\\u0120',\n\tgdot: '\\u0121',\n\tgE: '\\u2267',\n\tge: '\\u2265',\n\tgEl: '\\u2A8C',\n\tgel: '\\u22DB',\n\tgeq: '\\u2265',\n\tgeqq: '\\u2267',\n\tgeqslant: '\\u2A7E',\n\tges: '\\u2A7E',\n\tgescc: '\\u2AA9',\n\tgesdot: '\\u2A80',\n\tgesdoto: '\\u2A82',\n\tgesdotol: '\\u2A84',\n\tgesl: '\\u22DB\\uFE00',\n\tgesles: '\\u2A94',\n\tGfr: '\\uD835\\uDD0A',\n\tgfr: '\\uD835\\uDD24',\n\tGg: '\\u22D9',\n\tgg: '\\u226B',\n\tggg: '\\u22D9',\n\tgimel: '\\u2137',\n\tGJcy: '\\u0403',\n\tgjcy: '\\u0453',\n\tgl: '\\u2277',\n\tgla: '\\u2AA5',\n\tglE: '\\u2A92',\n\tglj: '\\u2AA4',\n\tgnap: '\\u2A8A',\n\tgnapprox: '\\u2A8A',\n\tgnE: '\\u2269',\n\tgne: '\\u2A88',\n\tgneq: '\\u2A88',\n\tgneqq: '\\u2269',\n\tgnsim: '\\u22E7',\n\tGopf: '\\uD835\\uDD3E',\n\tgopf: '\\uD835\\uDD58',\n\tgrave: '\\u0060',\n\tGreaterEqual: '\\u2265',\n\tGreaterEqualLess: '\\u22DB',\n\tGreaterFullEqual: '\\u2267',\n\tGreaterGreater: '\\u2AA2',\n\tGreaterLess: '\\u2277',\n\tGreaterSlantEqual: '\\u2A7E',\n\tGreaterTilde: '\\u2273',\n\tGscr: '\\uD835\\uDCA2',\n\tgscr: '\\u210A',\n\tgsim: '\\u2273',\n\tgsime: '\\u2A8E',\n\tgsiml: '\\u2A90',\n\tGt: '\\u226B',\n\tGT: '\\u003E',\n\tgt: '\\u003E',\n\tgtcc: '\\u2AA7',\n\tgtcir: '\\u2A7A',\n\tgtdot: '\\u22D7',\n\tgtlPar: '\\u2995',\n\tgtquest: '\\u2A7C',\n\tgtrapprox: '\\u2A86',\n\tgtrarr: '\\u2978',\n\tgtrdot: '\\u22D7',\n\tgtreqless: '\\u22DB',\n\tgtreqqless: '\\u2A8C',\n\tgtrless: '\\u2277',\n\tgtrsim: '\\u2273',\n\tgvertneqq: '\\u2269\\uFE00',\n\tgvnE: '\\u2269\\uFE00',\n\tHacek: '\\u02C7',\n\thairsp: '\\u200A',\n\thalf: '\\u00BD',\n\thamilt: '\\u210B',\n\tHARDcy: '\\u042A',\n\thardcy: '\\u044A',\n\thArr: '\\u21D4',\n\tharr: '\\u2194',\n\tharrcir: '\\u2948',\n\tharrw: '\\u21AD',\n\tHat: '\\u005E',\n\thbar: '\\u210F',\n\tHcirc: '\\u0124',\n\thcirc: '\\u0125',\n\thearts: '\\u2665',\n\theartsuit: '\\u2665',\n\thellip: '\\u2026',\n\thercon: '\\u22B9',\n\tHfr: '\\u210C',\n\thfr: '\\uD835\\uDD25',\n\tHilbertSpace: '\\u210B',\n\thksearow: '\\u2925',\n\thkswarow: '\\u2926',\n\thoarr: '\\u21FF',\n\thomtht: '\\u223B',\n\thookleftarrow: '\\u21A9',\n\thookrightarrow: '\\u21AA',\n\tHopf: '\\u210D',\n\thopf: '\\uD835\\uDD59',\n\thorbar: '\\u2015',\n\tHorizontalLine: '\\u2500',\n\tHscr: '\\u210B',\n\thscr: '\\uD835\\uDCBD',\n\thslash: '\\u210F',\n\tHstrok: '\\u0126',\n\thstrok: '\\u0127',\n\tHumpDownHump: '\\u224E',\n\tHumpEqual: '\\u224F',\n\thybull: '\\u2043',\n\thyphen: '\\u2010',\n\tIacute: '\\u00CD',\n\tiacute: '\\u00ED',\n\tic: '\\u2063',\n\tIcirc: '\\u00CE',\n\ticirc: '\\u00EE',\n\tIcy: '\\u0418',\n\ticy: '\\u0438',\n\tIdot: '\\u0130',\n\tIEcy: '\\u0415',\n\tiecy: '\\u0435',\n\tiexcl: '\\u00A1',\n\tiff: '\\u21D4',\n\tIfr: '\\u2111',\n\tifr: '\\uD835\\uDD26',\n\tIgrave: '\\u00CC',\n\tigrave: '\\u00EC',\n\tii: '\\u2148',\n\tiiiint: '\\u2A0C',\n\tiiint: '\\u222D',\n\tiinfin: '\\u29DC',\n\tiiota: '\\u2129',\n\tIJlig: '\\u0132',\n\tijlig: '\\u0133',\n\tIm: '\\u2111',\n\tImacr: '\\u012A',\n\timacr: '\\u012B',\n\timage: '\\u2111',\n\tImaginaryI: '\\u2148',\n\timagline: '\\u2110',\n\timagpart: '\\u2111',\n\timath: '\\u0131',\n\timof: '\\u22B7',\n\timped: '\\u01B5',\n\tImplies: '\\u21D2',\n\tin: '\\u2208',\n\tincare: '\\u2105',\n\tinfin: '\\u221E',\n\tinfintie: '\\u29DD',\n\tinodot: '\\u0131',\n\tInt: '\\u222C',\n\tint: '\\u222B',\n\tintcal: '\\u22BA',\n\tintegers: '\\u2124',\n\tIntegral: '\\u222B',\n\tintercal: '\\u22BA',\n\tIntersection: '\\u22C2',\n\tintlarhk: '\\u2A17',\n\tintprod: '\\u2A3C',\n\tInvisibleComma: '\\u2063',\n\tInvisibleTimes: '\\u2062',\n\tIOcy: '\\u0401',\n\tiocy: '\\u0451',\n\tIogon: '\\u012E',\n\tiogon: '\\u012F',\n\tIopf: '\\uD835\\uDD40',\n\tiopf: '\\uD835\\uDD5A',\n\tIota: '\\u0399',\n\tiota: '\\u03B9',\n\tiprod: '\\u2A3C',\n\tiquest: '\\u00BF',\n\tIscr: '\\u2110',\n\tiscr: '\\uD835\\uDCBE',\n\tisin: '\\u2208',\n\tisindot: '\\u22F5',\n\tisinE: '\\u22F9',\n\tisins: '\\u22F4',\n\tisinsv: '\\u22F3',\n\tisinv: '\\u2208',\n\tit: '\\u2062',\n\tItilde: '\\u0128',\n\titilde: '\\u0129',\n\tIukcy: '\\u0406',\n\tiukcy: '\\u0456',\n\tIuml: '\\u00CF',\n\tiuml: '\\u00EF',\n\tJcirc: '\\u0134',\n\tjcirc: '\\u0135',\n\tJcy: '\\u0419',\n\tjcy: '\\u0439',\n\tJfr: '\\uD835\\uDD0D',\n\tjfr: '\\uD835\\uDD27',\n\tjmath: '\\u0237',\n\tJopf: '\\uD835\\uDD41',\n\tjopf: '\\uD835\\uDD5B',\n\tJscr: '\\uD835\\uDCA5',\n\tjscr: '\\uD835\\uDCBF',\n\tJsercy: '\\u0408',\n\tjsercy: '\\u0458',\n\tJukcy: '\\u0404',\n\tjukcy: '\\u0454',\n\tKappa: '\\u039A',\n\tkappa: '\\u03BA',\n\tkappav: '\\u03F0',\n\tKcedil: '\\u0136',\n\tkcedil: '\\u0137',\n\tKcy: '\\u041A',\n\tkcy: '\\u043A',\n\tKfr: '\\uD835\\uDD0E',\n\tkfr: '\\uD835\\uDD28',\n\tkgreen: '\\u0138',\n\tKHcy: '\\u0425',\n\tkhcy: '\\u0445',\n\tKJcy: '\\u040C',\n\tkjcy: '\\u045C',\n\tKopf: '\\uD835\\uDD42',\n\tkopf: '\\uD835\\uDD5C',\n\tKscr: '\\uD835\\uDCA6',\n\tkscr: '\\uD835\\uDCC0',\n\tlAarr: '\\u21DA',\n\tLacute: '\\u0139',\n\tlacute: '\\u013A',\n\tlaemptyv: '\\u29B4',\n\tlagran: '\\u2112',\n\tLambda: '\\u039B',\n\tlambda: '\\u03BB',\n\tLang: '\\u27EA',\n\tlang: '\\u27E8',\n\tlangd: '\\u2991',\n\tlangle: '\\u27E8',\n\tlap: '\\u2A85',\n\tLaplacetrf: '\\u2112',\n\tlaquo: '\\u00AB',\n\tLarr: '\\u219E',\n\tlArr: '\\u21D0',\n\tlarr: '\\u2190',\n\tlarrb: '\\u21E4',\n\tlarrbfs: '\\u291F',\n\tlarrfs: '\\u291D',\n\tlarrhk: '\\u21A9',\n\tlarrlp: '\\u21AB',\n\tlarrpl: '\\u2939',\n\tlarrsim: '\\u2973',\n\tlarrtl: '\\u21A2',\n\tlat: '\\u2AAB',\n\tlAtail: '\\u291B',\n\tlatail: '\\u2919',\n\tlate: '\\u2AAD',\n\tlates: '\\u2AAD\\uFE00',\n\tlBarr: '\\u290E',\n\tlbarr: '\\u290C',\n\tlbbrk: '\\u2772',\n\tlbrace: '\\u007B',\n\tlbrack: '\\u005B',\n\tlbrke: '\\u298B',\n\tlbrksld: '\\u298F',\n\tlbrkslu: '\\u298D',\n\tLcaron: '\\u013D',\n\tlcaron: '\\u013E',\n\tLcedil: '\\u013B',\n\tlcedil: '\\u013C',\n\tlceil: '\\u2308',\n\tlcub: '\\u007B',\n\tLcy: '\\u041B',\n\tlcy: '\\u043B',\n\tldca: '\\u2936',\n\tldquo: '\\u201C',\n\tldquor: '\\u201E',\n\tldrdhar: '\\u2967',\n\tldrushar: '\\u294B',\n\tldsh: '\\u21B2',\n\tlE: '\\u2266',\n\tle: '\\u2264',\n\tLeftAngleBracket: '\\u27E8',\n\tLeftArrow: '\\u2190',\n\tLeftarrow: '\\u21D0',\n\tleftarrow: '\\u2190',\n\tLeftArrowBar: '\\u21E4',\n\tLeftArrowRightArrow: '\\u21C6',\n\tleftarrowtail: '\\u21A2',\n\tLeftCeiling: '\\u2308',\n\tLeftDoubleBracket: '\\u27E6',\n\tLeftDownTeeVector: '\\u2961',\n\tLeftDownVector: '\\u21C3',\n\tLeftDownVectorBar: '\\u2959',\n\tLeftFloor: '\\u230A',\n\tleftharpoondown: '\\u21BD',\n\tleftharpoonup: '\\u21BC',\n\tleftleftarrows: '\\u21C7',\n\tLeftRightArrow: '\\u2194',\n\tLeftrightarrow: '\\u21D4',\n\tleftrightarrow: '\\u2194',\n\tleftrightarrows: '\\u21C6',\n\tleftrightharpoons: '\\u21CB',\n\tleftrightsquigarrow: '\\u21AD',\n\tLeftRightVector: '\\u294E',\n\tLeftTee: '\\u22A3',\n\tLeftTeeArrow: '\\u21A4',\n\tLeftTeeVector: '\\u295A',\n\tleftthreetimes: '\\u22CB',\n\tLeftTriangle: '\\u22B2',\n\tLeftTriangleBar: '\\u29CF',\n\tLeftTriangleEqual: '\\u22B4',\n\tLeftUpDownVector: '\\u2951',\n\tLeftUpTeeVector: '\\u2960',\n\tLeftUpVector: '\\u21BF',\n\tLeftUpVectorBar: '\\u2958',\n\tLeftVector: '\\u21BC',\n\tLeftVectorBar: '\\u2952',\n\tlEg: '\\u2A8B',\n\tleg: '\\u22DA',\n\tleq: '\\u2264',\n\tleqq: '\\u2266',\n\tleqslant: '\\u2A7D',\n\tles: '\\u2A7D',\n\tlescc: '\\u2AA8',\n\tlesdot: '\\u2A7F',\n\tlesdoto: '\\u2A81',\n\tlesdotor: '\\u2A83',\n\tlesg: '\\u22DA\\uFE00',\n\tlesges: '\\u2A93',\n\tlessapprox: '\\u2A85',\n\tlessdot: '\\u22D6',\n\tlesseqgtr: '\\u22DA',\n\tlesseqqgtr: '\\u2A8B',\n\tLessEqualGreater: '\\u22DA',\n\tLessFullEqual: '\\u2266',\n\tLessGreater: '\\u2276',\n\tlessgtr: '\\u2276',\n\tLessLess: '\\u2AA1',\n\tlesssim: '\\u2272',\n\tLessSlantEqual: '\\u2A7D',\n\tLessTilde: '\\u2272',\n\tlfisht: '\\u297C',\n\tlfloor: '\\u230A',\n\tLfr: '\\uD835\\uDD0F',\n\tlfr: '\\uD835\\uDD29',\n\tlg: '\\u2276',\n\tlgE: '\\u2A91',\n\tlHar: '\\u2962',\n\tlhard: '\\u21BD',\n\tlharu: '\\u21BC',\n\tlharul: '\\u296A',\n\tlhblk: '\\u2584',\n\tLJcy: '\\u0409',\n\tljcy: '\\u0459',\n\tLl: '\\u22D8',\n\tll: '\\u226A',\n\tllarr: '\\u21C7',\n\tllcorner: '\\u231E',\n\tLleftarrow: '\\u21DA',\n\tllhard: '\\u296B',\n\tlltri: '\\u25FA',\n\tLmidot: '\\u013F',\n\tlmidot: '\\u0140',\n\tlmoust: '\\u23B0',\n\tlmoustache: '\\u23B0',\n\tlnap: '\\u2A89',\n\tlnapprox: '\\u2A89',\n\tlnE: '\\u2268',\n\tlne: '\\u2A87',\n\tlneq: '\\u2A87',\n\tlneqq: '\\u2268',\n\tlnsim: '\\u22E6',\n\tloang: '\\u27EC',\n\tloarr: '\\u21FD',\n\tlobrk: '\\u27E6',\n\tLongLeftArrow: '\\u27F5',\n\tLongleftarrow: '\\u27F8',\n\tlongleftarrow: '\\u27F5',\n\tLongLeftRightArrow: '\\u27F7',\n\tLongleftrightarrow: '\\u27FA',\n\tlongleftrightarrow: '\\u27F7',\n\tlongmapsto: '\\u27FC',\n\tLongRightArrow: '\\u27F6',\n\tLongrightarrow: '\\u27F9',\n\tlongrightarrow: '\\u27F6',\n\tlooparrowleft: '\\u21AB',\n\tlooparrowright: '\\u21AC',\n\tlopar: '\\u2985',\n\tLopf: '\\uD835\\uDD43',\n\tlopf: '\\uD835\\uDD5D',\n\tloplus: '\\u2A2D',\n\tlotimes: '\\u2A34',\n\tlowast: '\\u2217',\n\tlowbar: '\\u005F',\n\tLowerLeftArrow: '\\u2199',\n\tLowerRightArrow: '\\u2198',\n\tloz: '\\u25CA',\n\tlozenge: '\\u25CA',\n\tlozf: '\\u29EB',\n\tlpar: '\\u0028',\n\tlparlt: '\\u2993',\n\tlrarr: '\\u21C6',\n\tlrcorner: '\\u231F',\n\tlrhar: '\\u21CB',\n\tlrhard: '\\u296D',\n\tlrm: '\\u200E',\n\tlrtri: '\\u22BF',\n\tlsaquo: '\\u2039',\n\tLscr: '\\u2112',\n\tlscr: '\\uD835\\uDCC1',\n\tLsh: '\\u21B0',\n\tlsh: '\\u21B0',\n\tlsim: '\\u2272',\n\tlsime: '\\u2A8D',\n\tlsimg: '\\u2A8F',\n\tlsqb: '\\u005B',\n\tlsquo: '\\u2018',\n\tlsquor: '\\u201A',\n\tLstrok: '\\u0141',\n\tlstrok: '\\u0142',\n\tLt: '\\u226A',\n\tLT: '\\u003C',\n\tlt: '\\u003C',\n\tltcc: '\\u2AA6',\n\tltcir: '\\u2A79',\n\tltdot: '\\u22D6',\n\tlthree: '\\u22CB',\n\tltimes: '\\u22C9',\n\tltlarr: '\\u2976',\n\tltquest: '\\u2A7B',\n\tltri: '\\u25C3',\n\tltrie: '\\u22B4',\n\tltrif: '\\u25C2',\n\tltrPar: '\\u2996',\n\tlurdshar: '\\u294A',\n\tluruhar: '\\u2966',\n\tlvertneqq: '\\u2268\\uFE00',\n\tlvnE: '\\u2268\\uFE00',\n\tmacr: '\\u00AF',\n\tmale: '\\u2642',\n\tmalt: '\\u2720',\n\tmaltese: '\\u2720',\n\tMap: '\\u2905',\n\tmap: '\\u21A6',\n\tmapsto: '\\u21A6',\n\tmapstodown: '\\u21A7',\n\tmapstoleft: '\\u21A4',\n\tmapstoup: '\\u21A5',\n\tmarker: '\\u25AE',\n\tmcomma: '\\u2A29',\n\tMcy: '\\u041C',\n\tmcy: '\\u043C',\n\tmdash: '\\u2014',\n\tmDDot: '\\u223A',\n\tmeasuredangle: '\\u2221',\n\tMediumSpace: '\\u205F',\n\tMellintrf: '\\u2133',\n\tMfr: '\\uD835\\uDD10',\n\tmfr: '\\uD835\\uDD2A',\n\tmho: '\\u2127',\n\tmicro: '\\u00B5',\n\tmid: '\\u2223',\n\tmidast: '\\u002A',\n\tmidcir: '\\u2AF0',\n\tmiddot: '\\u00B7',\n\tminus: '\\u2212',\n\tminusb: '\\u229F',\n\tminusd: '\\u2238',\n\tminusdu: '\\u2A2A',\n\tMinusPlus: '\\u2213',\n\tmlcp: '\\u2ADB',\n\tmldr: '\\u2026',\n\tmnplus: '\\u2213',\n\tmodels: '\\u22A7',\n\tMopf: '\\uD835\\uDD44',\n\tmopf: '\\uD835\\uDD5E',\n\tmp: '\\u2213',\n\tMscr: '\\u2133',\n\tmscr: '\\uD835\\uDCC2',\n\tmstpos: '\\u223E',\n\tMu: '\\u039C',\n\tmu: '\\u03BC',\n\tmultimap: '\\u22B8',\n\tmumap: '\\u22B8',\n\tnabla: '\\u2207',\n\tNacute: '\\u0143',\n\tnacute: '\\u0144',\n\tnang: '\\u2220\\u20D2',\n\tnap: '\\u2249',\n\tnapE: '\\u2A70\\u0338',\n\tnapid: '\\u224B\\u0338',\n\tnapos: '\\u0149',\n\tnapprox: '\\u2249',\n\tnatur: '\\u266E',\n\tnatural: '\\u266E',\n\tnaturals: '\\u2115',\n\tnbsp: '\\u00A0',\n\tnbump: '\\u224E\\u0338',\n\tnbumpe: '\\u224F\\u0338',\n\tncap: '\\u2A43',\n\tNcaron: '\\u0147',\n\tncaron: '\\u0148',\n\tNcedil: '\\u0145',\n\tncedil: '\\u0146',\n\tncong: '\\u2247',\n\tncongdot: '\\u2A6D\\u0338',\n\tncup: '\\u2A42',\n\tNcy: '\\u041D',\n\tncy: '\\u043D',\n\tndash: '\\u2013',\n\tne: '\\u2260',\n\tnearhk: '\\u2924',\n\tneArr: '\\u21D7',\n\tnearr: '\\u2197',\n\tnearrow: '\\u2197',\n\tnedot: '\\u2250\\u0338',\n\tNegativeMediumSpace: '\\u200B',\n\tNegativeThickSpace: '\\u200B',\n\tNegativeThinSpace: '\\u200B',\n\tNegativeVeryThinSpace: '\\u200B',\n\tnequiv: '\\u2262',\n\tnesear: '\\u2928',\n\tnesim: '\\u2242\\u0338',\n\tNestedGreaterGreater: '\\u226B',\n\tNestedLessLess: '\\u226A',\n\tNewLine: '\\u000A',\n\tnexist: '\\u2204',\n\tnexists: '\\u2204',\n\tNfr: '\\uD835\\uDD11',\n\tnfr: '\\uD835\\uDD2B',\n\tngE: '\\u2267\\u0338',\n\tnge: '\\u2271',\n\tngeq: '\\u2271',\n\tngeqq: '\\u2267\\u0338',\n\tngeqslant: '\\u2A7E\\u0338',\n\tnges: '\\u2A7E\\u0338',\n\tnGg: '\\u22D9\\u0338',\n\tngsim: '\\u2275',\n\tnGt: '\\u226B\\u20D2',\n\tngt: '\\u226F',\n\tngtr: '\\u226F',\n\tnGtv: '\\u226B\\u0338',\n\tnhArr: '\\u21CE',\n\tnharr: '\\u21AE',\n\tnhpar: '\\u2AF2',\n\tni: '\\u220B',\n\tnis: '\\u22FC',\n\tnisd: '\\u22FA',\n\tniv: '\\u220B',\n\tNJcy: '\\u040A',\n\tnjcy: '\\u045A',\n\tnlArr: '\\u21CD',\n\tnlarr: '\\u219A',\n\tnldr: '\\u2025',\n\tnlE: '\\u2266\\u0338',\n\tnle: '\\u2270',\n\tnLeftarrow: '\\u21CD',\n\tnleftarrow: '\\u219A',\n\tnLeftrightarrow: '\\u21CE',\n\tnleftrightarrow: '\\u21AE',\n\tnleq: '\\u2270',\n\tnleqq: '\\u2266\\u0338',\n\tnleqslant: '\\u2A7D\\u0338',\n\tnles: '\\u2A7D\\u0338',\n\tnless: '\\u226E',\n\tnLl: '\\u22D8\\u0338',\n\tnlsim: '\\u2274',\n\tnLt: '\\u226A\\u20D2',\n\tnlt: '\\u226E',\n\tnltri: '\\u22EA',\n\tnltrie: '\\u22EC',\n\tnLtv: '\\u226A\\u0338',\n\tnmid: '\\u2224',\n\tNoBreak: '\\u2060',\n\tNonBreakingSpace: '\\u00A0',\n\tNopf: '\\u2115',\n\tnopf: '\\uD835\\uDD5F',\n\tNot: '\\u2AEC',\n\tnot: '\\u00AC',\n\tNotCongruent: '\\u2262',\n\tNotCupCap: '\\u226D',\n\tNotDoubleVerticalBar: '\\u2226',\n\tNotElement: '\\u2209',\n\tNotEqual: '\\u2260',\n\tNotEqualTilde: '\\u2242\\u0338',\n\tNotExists: '\\u2204',\n\tNotGreater: '\\u226F',\n\tNotGreaterEqual: '\\u2271',\n\tNotGreaterFullEqual: '\\u2267\\u0338',\n\tNotGreaterGreater: '\\u226B\\u0338',\n\tNotGreaterLess: '\\u2279',\n\tNotGreaterSlantEqual: '\\u2A7E\\u0338',\n\tNotGreaterTilde: '\\u2275',\n\tNotHumpDownHump: '\\u224E\\u0338',\n\tNotHumpEqual: '\\u224F\\u0338',\n\tnotin: '\\u2209',\n\tnotindot: '\\u22F5\\u0338',\n\tnotinE: '\\u22F9\\u0338',\n\tnotinva: '\\u2209',\n\tnotinvb: '\\u22F7',\n\tnotinvc: '\\u22F6',\n\tNotLeftTriangle: '\\u22EA',\n\tNotLeftTriangleBar: '\\u29CF\\u0338',\n\tNotLeftTriangleEqual: '\\u22EC',\n\tNotLess: '\\u226E',\n\tNotLessEqual: '\\u2270',\n\tNotLessGreater: '\\u2278',\n\tNotLessLess: '\\u226A\\u0338',\n\tNotLessSlantEqual: '\\u2A7D\\u0338',\n\tNotLessTilde: '\\u2274',\n\tNotNestedGreaterGreater: '\\u2AA2\\u0338',\n\tNotNestedLessLess: '\\u2AA1\\u0338',\n\tnotni: '\\u220C',\n\tnotniva: '\\u220C',\n\tnotnivb: '\\u22FE',\n\tnotnivc: '\\u22FD',\n\tNotPrecedes: '\\u2280',\n\tNotPrecedesEqual: '\\u2AAF\\u0338',\n\tNotPrecedesSlantEqual: '\\u22E0',\n\tNotReverseElement: '\\u220C',\n\tNotRightTriangle: '\\u22EB',\n\tNotRightTriangleBar: '\\u29D0\\u0338',\n\tNotRightTriangleEqual: '\\u22ED',\n\tNotSquareSubset: '\\u228F\\u0338',\n\tNotSquareSubsetEqual: '\\u22E2',\n\tNotSquareSuperset: '\\u2290\\u0338',\n\tNotSquareSupersetEqual: '\\u22E3',\n\tNotSubset: '\\u2282\\u20D2',\n\tNotSubsetEqual: '\\u2288',\n\tNotSucceeds: '\\u2281',\n\tNotSucceedsEqual: '\\u2AB0\\u0338',\n\tNotSucceedsSlantEqual: '\\u22E1',\n\tNotSucceedsTilde: '\\u227F\\u0338',\n\tNotSuperset: '\\u2283\\u20D2',\n\tNotSupersetEqual: '\\u2289',\n\tNotTilde: '\\u2241',\n\tNotTildeEqual: '\\u2244',\n\tNotTildeFullEqual: '\\u2247',\n\tNotTildeTilde: '\\u2249',\n\tNotVerticalBar: '\\u2224',\n\tnpar: '\\u2226',\n\tnparallel: '\\u2226',\n\tnparsl: '\\u2AFD\\u20E5',\n\tnpart: '\\u2202\\u0338',\n\tnpolint: '\\u2A14',\n\tnpr: '\\u2280',\n\tnprcue: '\\u22E0',\n\tnpre: '\\u2AAF\\u0338',\n\tnprec: '\\u2280',\n\tnpreceq: '\\u2AAF\\u0338',\n\tnrArr: '\\u21CF',\n\tnrarr: '\\u219B',\n\tnrarrc: '\\u2933\\u0338',\n\tnrarrw: '\\u219D\\u0338',\n\tnRightarrow: '\\u21CF',\n\tnrightarrow: '\\u219B',\n\tnrtri: '\\u22EB',\n\tnrtrie: '\\u22ED',\n\tnsc: '\\u2281',\n\tnsccue: '\\u22E1',\n\tnsce: '\\u2AB0\\u0338',\n\tNscr: '\\uD835\\uDCA9',\n\tnscr: '\\uD835\\uDCC3',\n\tnshortmid: '\\u2224',\n\tnshortparallel: '\\u2226',\n\tnsim: '\\u2241',\n\tnsime: '\\u2244',\n\tnsimeq: '\\u2244',\n\tnsmid: '\\u2224',\n\tnspar: '\\u2226',\n\tnsqsube: '\\u22E2',\n\tnsqsupe: '\\u22E3',\n\tnsub: '\\u2284',\n\tnsubE: '\\u2AC5\\u0338',\n\tnsube: '\\u2288',\n\tnsubset: '\\u2282\\u20D2',\n\tnsubseteq: '\\u2288',\n\tnsubseteqq: '\\u2AC5\\u0338',\n\tnsucc: '\\u2281',\n\tnsucceq: '\\u2AB0\\u0338',\n\tnsup: '\\u2285',\n\tnsupE: '\\u2AC6\\u0338',\n\tnsupe: '\\u2289',\n\tnsupset: '\\u2283\\u20D2',\n\tnsupseteq: '\\u2289',\n\tnsupseteqq: '\\u2AC6\\u0338',\n\tntgl: '\\u2279',\n\tNtilde: '\\u00D1',\n\tntilde: '\\u00F1',\n\tntlg: '\\u2278',\n\tntriangleleft: '\\u22EA',\n\tntrianglelefteq: '\\u22EC',\n\tntriangleright: '\\u22EB',\n\tntrianglerighteq: '\\u22ED',\n\tNu: '\\u039D',\n\tnu: '\\u03BD',\n\tnum: '\\u0023',\n\tnumero: '\\u2116',\n\tnumsp: '\\u2007',\n\tnvap: '\\u224D\\u20D2',\n\tnVDash: '\\u22AF',\n\tnVdash: '\\u22AE',\n\tnvDash: '\\u22AD',\n\tnvdash: '\\u22AC',\n\tnvge: '\\u2265\\u20D2',\n\tnvgt: '\\u003E\\u20D2',\n\tnvHarr: '\\u2904',\n\tnvinfin: '\\u29DE',\n\tnvlArr: '\\u2902',\n\tnvle: '\\u2264\\u20D2',\n\tnvlt: '\\u003C\\u20D2',\n\tnvltrie: '\\u22B4\\u20D2',\n\tnvrArr: '\\u2903',\n\tnvrtrie: '\\u22B5\\u20D2',\n\tnvsim: '\\u223C\\u20D2',\n\tnwarhk: '\\u2923',\n\tnwArr: '\\u21D6',\n\tnwarr: '\\u2196',\n\tnwarrow: '\\u2196',\n\tnwnear: '\\u2927',\n\tOacute: '\\u00D3',\n\toacute: '\\u00F3',\n\toast: '\\u229B',\n\tocir: '\\u229A',\n\tOcirc: '\\u00D4',\n\tocirc: '\\u00F4',\n\tOcy: '\\u041E',\n\tocy: '\\u043E',\n\todash: '\\u229D',\n\tOdblac: '\\u0150',\n\todblac: '\\u0151',\n\todiv: '\\u2A38',\n\todot: '\\u2299',\n\todsold: '\\u29BC',\n\tOElig: '\\u0152',\n\toelig: '\\u0153',\n\tofcir: '\\u29BF',\n\tOfr: '\\uD835\\uDD12',\n\tofr: '\\uD835\\uDD2C',\n\togon: '\\u02DB',\n\tOgrave: '\\u00D2',\n\tograve: '\\u00F2',\n\togt: '\\u29C1',\n\tohbar: '\\u29B5',\n\tohm: '\\u03A9',\n\toint: '\\u222E',\n\tolarr: '\\u21BA',\n\tolcir: '\\u29BE',\n\tolcross: '\\u29BB',\n\toline: '\\u203E',\n\tolt: '\\u29C0',\n\tOmacr: '\\u014C',\n\tomacr: '\\u014D',\n\tOmega: '\\u03A9',\n\tomega: '\\u03C9',\n\tOmicron: '\\u039F',\n\tomicron: '\\u03BF',\n\tomid: '\\u29B6',\n\tominus: '\\u2296',\n\tOopf: '\\uD835\\uDD46',\n\toopf: '\\uD835\\uDD60',\n\topar: '\\u29B7',\n\tOpenCurlyDoubleQuote: '\\u201C',\n\tOpenCurlyQuote: '\\u2018',\n\toperp: '\\u29B9',\n\toplus: '\\u2295',\n\tOr: '\\u2A54',\n\tor: '\\u2228',\n\torarr: '\\u21BB',\n\tord: '\\u2A5D',\n\torder: '\\u2134',\n\torderof: '\\u2134',\n\tordf: '\\u00AA',\n\tordm: '\\u00BA',\n\torigof: '\\u22B6',\n\toror: '\\u2A56',\n\torslope: '\\u2A57',\n\torv: '\\u2A5B',\n\toS: '\\u24C8',\n\tOscr: '\\uD835\\uDCAA',\n\toscr: '\\u2134',\n\tOslash: '\\u00D8',\n\toslash: '\\u00F8',\n\tosol: '\\u2298',\n\tOtilde: '\\u00D5',\n\totilde: '\\u00F5',\n\tOtimes: '\\u2A37',\n\totimes: '\\u2297',\n\totimesas: '\\u2A36',\n\tOuml: '\\u00D6',\n\touml: '\\u00F6',\n\tovbar: '\\u233D',\n\tOverBar: '\\u203E',\n\tOverBrace: '\\u23DE',\n\tOverBracket: '\\u23B4',\n\tOverParenthesis: '\\u23DC',\n\tpar: '\\u2225',\n\tpara: '\\u00B6',\n\tparallel: '\\u2225',\n\tparsim: '\\u2AF3',\n\tparsl: '\\u2AFD',\n\tpart: '\\u2202',\n\tPartialD: '\\u2202',\n\tPcy: '\\u041F',\n\tpcy: '\\u043F',\n\tpercnt: '\\u0025',\n\tperiod: '\\u002E',\n\tpermil: '\\u2030',\n\tperp: '\\u22A5',\n\tpertenk: '\\u2031',\n\tPfr: '\\uD835\\uDD13',\n\tpfr: '\\uD835\\uDD2D',\n\tPhi: '\\u03A6',\n\tphi: '\\u03C6',\n\tphiv: '\\u03D5',\n\tphmmat: '\\u2133',\n\tphone: '\\u260E',\n\tPi: '\\u03A0',\n\tpi: '\\u03C0',\n\tpitchfork: '\\u22D4',\n\tpiv: '\\u03D6',\n\tplanck: '\\u210F',\n\tplanckh: '\\u210E',\n\tplankv: '\\u210F',\n\tplus: '\\u002B',\n\tplusacir: '\\u2A23',\n\tplusb: '\\u229E',\n\tpluscir: '\\u2A22',\n\tplusdo: '\\u2214',\n\tplusdu: '\\u2A25',\n\tpluse: '\\u2A72',\n\tPlusMinus: '\\u00B1',\n\tplusmn: '\\u00B1',\n\tplussim: '\\u2A26',\n\tplustwo: '\\u2A27',\n\tpm: '\\u00B1',\n\tPoincareplane: '\\u210C',\n\tpointint: '\\u2A15',\n\tPopf: '\\u2119',\n\tpopf: '\\uD835\\uDD61',\n\tpound: '\\u00A3',\n\tPr: '\\u2ABB',\n\tpr: '\\u227A',\n\tprap: '\\u2AB7',\n\tprcue: '\\u227C',\n\tprE: '\\u2AB3',\n\tpre: '\\u2AAF',\n\tprec: '\\u227A',\n\tprecapprox: '\\u2AB7',\n\tpreccurlyeq: '\\u227C',\n\tPrecedes: '\\u227A',\n\tPrecedesEqual: '\\u2AAF',\n\tPrecedesSlantEqual: '\\u227C',\n\tPrecedesTilde: '\\u227E',\n\tpreceq: '\\u2AAF',\n\tprecnapprox: '\\u2AB9',\n\tprecneqq: '\\u2AB5',\n\tprecnsim: '\\u22E8',\n\tprecsim: '\\u227E',\n\tPrime: '\\u2033',\n\tprime: '\\u2032',\n\tprimes: '\\u2119',\n\tprnap: '\\u2AB9',\n\tprnE: '\\u2AB5',\n\tprnsim: '\\u22E8',\n\tprod: '\\u220F',\n\tProduct: '\\u220F',\n\tprofalar: '\\u232E',\n\tprofline: '\\u2312',\n\tprofsurf: '\\u2313',\n\tprop: '\\u221D',\n\tProportion: '\\u2237',\n\tProportional: '\\u221D',\n\tpropto: '\\u221D',\n\tprsim: '\\u227E',\n\tprurel: '\\u22B0',\n\tPscr: '\\uD835\\uDCAB',\n\tpscr: '\\uD835\\uDCC5',\n\tPsi: '\\u03A8',\n\tpsi: '\\u03C8',\n\tpuncsp: '\\u2008',\n\tQfr: '\\uD835\\uDD14',\n\tqfr: '\\uD835\\uDD2E',\n\tqint: '\\u2A0C',\n\tQopf: '\\u211A',\n\tqopf: '\\uD835\\uDD62',\n\tqprime: '\\u2057',\n\tQscr: '\\uD835\\uDCAC',\n\tqscr: '\\uD835\\uDCC6',\n\tquaternions: '\\u210D',\n\tquatint: '\\u2A16',\n\tquest: '\\u003F',\n\tquesteq: '\\u225F',\n\tQUOT: '\\u0022',\n\tquot: '\\u0022',\n\trAarr: '\\u21DB',\n\trace: '\\u223D\\u0331',\n\tRacute: '\\u0154',\n\tracute: '\\u0155',\n\tradic: '\\u221A',\n\traemptyv: '\\u29B3',\n\tRang: '\\u27EB',\n\trang: '\\u27E9',\n\trangd: '\\u2992',\n\trange: '\\u29A5',\n\trangle: '\\u27E9',\n\traquo: '\\u00BB',\n\tRarr: '\\u21A0',\n\trArr: '\\u21D2',\n\trarr: '\\u2192',\n\trarrap: '\\u2975',\n\trarrb: '\\u21E5',\n\trarrbfs: '\\u2920',\n\trarrc: '\\u2933',\n\trarrfs: '\\u291E',\n\trarrhk: '\\u21AA',\n\trarrlp: '\\u21AC',\n\trarrpl: '\\u2945',\n\trarrsim: '\\u2974',\n\tRarrtl: '\\u2916',\n\trarrtl: '\\u21A3',\n\trarrw: '\\u219D',\n\trAtail: '\\u291C',\n\tratail: '\\u291A',\n\tratio: '\\u2236',\n\trationals: '\\u211A',\n\tRBarr: '\\u2910',\n\trBarr: '\\u290F',\n\trbarr: '\\u290D',\n\trbbrk: '\\u2773',\n\trbrace: '\\u007D',\n\trbrack: '\\u005D',\n\trbrke: '\\u298C',\n\trbrksld: '\\u298E',\n\trbrkslu: '\\u2990',\n\tRcaron: '\\u0158',\n\trcaron: '\\u0159',\n\tRcedil: '\\u0156',\n\trcedil: '\\u0157',\n\trceil: '\\u2309',\n\trcub: '\\u007D',\n\tRcy: '\\u0420',\n\trcy: '\\u0440',\n\trdca: '\\u2937',\n\trdldhar: '\\u2969',\n\trdquo: '\\u201D',\n\trdquor: '\\u201D',\n\trdsh: '\\u21B3',\n\tRe: '\\u211C',\n\treal: '\\u211C',\n\trealine: '\\u211B',\n\trealpart: '\\u211C',\n\treals: '\\u211D',\n\trect: '\\u25AD',\n\tREG: '\\u00AE',\n\treg: '\\u00AE',\n\tReverseElement: '\\u220B',\n\tReverseEquilibrium: '\\u21CB',\n\tReverseUpEquilibrium: '\\u296F',\n\trfisht: '\\u297D',\n\trfloor: '\\u230B',\n\tRfr: '\\u211C',\n\trfr: '\\uD835\\uDD2F',\n\trHar: '\\u2964',\n\trhard: '\\u21C1',\n\trharu: '\\u21C0',\n\trharul: '\\u296C',\n\tRho: '\\u03A1',\n\trho: '\\u03C1',\n\trhov: '\\u03F1',\n\tRightAngleBracket: '\\u27E9',\n\tRightArrow: '\\u2192',\n\tRightarrow: '\\u21D2',\n\trightarrow: '\\u2192',\n\tRightArrowBar: '\\u21E5',\n\tRightArrowLeftArrow: '\\u21C4',\n\trightarrowtail: '\\u21A3',\n\tRightCeiling: '\\u2309',\n\tRightDoubleBracket: '\\u27E7',\n\tRightDownTeeVector: '\\u295D',\n\tRightDownVector: '\\u21C2',\n\tRightDownVectorBar: '\\u2955',\n\tRightFloor: '\\u230B',\n\trightharpoondown: '\\u21C1',\n\trightharpoonup: '\\u21C0',\n\trightleftarrows: '\\u21C4',\n\trightleftharpoons: '\\u21CC',\n\trightrightarrows: '\\u21C9',\n\trightsquigarrow: '\\u219D',\n\tRightTee: '\\u22A2',\n\tRightTeeArrow: '\\u21A6',\n\tRightTeeVector: '\\u295B',\n\trightthreetimes: '\\u22CC',\n\tRightTriangle: '\\u22B3',\n\tRightTriangleBar: '\\u29D0',\n\tRightTriangleEqual: '\\u22B5',\n\tRightUpDownVector: '\\u294F',\n\tRightUpTeeVector: '\\u295C',\n\tRightUpVector: '\\u21BE',\n\tRightUpVectorBar: '\\u2954',\n\tRightVector: '\\u21C0',\n\tRightVectorBar: '\\u2953',\n\tring: '\\u02DA',\n\trisingdotseq: '\\u2253',\n\trlarr: '\\u21C4',\n\trlhar: '\\u21CC',\n\trlm: '\\u200F',\n\trmoust: '\\u23B1',\n\trmoustache: '\\u23B1',\n\trnmid: '\\u2AEE',\n\troang: '\\u27ED',\n\troarr: '\\u21FE',\n\trobrk: '\\u27E7',\n\tropar: '\\u2986',\n\tRopf: '\\u211D',\n\tropf: '\\uD835\\uDD63',\n\troplus: '\\u2A2E',\n\trotimes: '\\u2A35',\n\tRoundImplies: '\\u2970',\n\trpar: '\\u0029',\n\trpargt: '\\u2994',\n\trppolint: '\\u2A12',\n\trrarr: '\\u21C9',\n\tRrightarrow: '\\u21DB',\n\trsaquo: '\\u203A',\n\tRscr: '\\u211B',\n\trscr: '\\uD835\\uDCC7',\n\tRsh: '\\u21B1',\n\trsh: '\\u21B1',\n\trsqb: '\\u005D',\n\trsquo: '\\u2019',\n\trsquor: '\\u2019',\n\trthree: '\\u22CC',\n\trtimes: '\\u22CA',\n\trtri: '\\u25B9',\n\trtrie: '\\u22B5',\n\trtrif: '\\u25B8',\n\trtriltri: '\\u29CE',\n\tRuleDelayed: '\\u29F4',\n\truluhar: '\\u2968',\n\trx: '\\u211E',\n\tSacute: '\\u015A',\n\tsacute: '\\u015B',\n\tsbquo: '\\u201A',\n\tSc: '\\u2ABC',\n\tsc: '\\u227B',\n\tscap: '\\u2AB8',\n\tScaron: '\\u0160',\n\tscaron: '\\u0161',\n\tsccue: '\\u227D',\n\tscE: '\\u2AB4',\n\tsce: '\\u2AB0',\n\tScedil: '\\u015E',\n\tscedil: '\\u015F',\n\tScirc: '\\u015C',\n\tscirc: '\\u015D',\n\tscnap: '\\u2ABA',\n\tscnE: '\\u2AB6',\n\tscnsim: '\\u22E9',\n\tscpolint: '\\u2A13',\n\tscsim: '\\u227F',\n\tScy: '\\u0421',\n\tscy: '\\u0441',\n\tsdot: '\\u22C5',\n\tsdotb: '\\u22A1',\n\tsdote: '\\u2A66',\n\tsearhk: '\\u2925',\n\tseArr: '\\u21D8',\n\tsearr: '\\u2198',\n\tsearrow: '\\u2198',\n\tsect: '\\u00A7',\n\tsemi: '\\u003B',\n\tseswar: '\\u2929',\n\tsetminus: '\\u2216',\n\tsetmn: '\\u2216',\n\tsext: '\\u2736',\n\tSfr: '\\uD835\\uDD16',\n\tsfr: '\\uD835\\uDD30',\n\tsfrown: '\\u2322',\n\tsharp: '\\u266F',\n\tSHCHcy: '\\u0429',\n\tshchcy: '\\u0449',\n\tSHcy: '\\u0428',\n\tshcy: '\\u0448',\n\tShortDownArrow: '\\u2193',\n\tShortLeftArrow: '\\u2190',\n\tshortmid: '\\u2223',\n\tshortparallel: '\\u2225',\n\tShortRightArrow: '\\u2192',\n\tShortUpArrow: '\\u2191',\n\tshy: '\\u00AD',\n\tSigma: '\\u03A3',\n\tsigma: '\\u03C3',\n\tsigmaf: '\\u03C2',\n\tsigmav: '\\u03C2',\n\tsim: '\\u223C',\n\tsimdot: '\\u2A6A',\n\tsime: '\\u2243',\n\tsimeq: '\\u2243',\n\tsimg: '\\u2A9E',\n\tsimgE: '\\u2AA0',\n\tsiml: '\\u2A9D',\n\tsimlE: '\\u2A9F',\n\tsimne: '\\u2246',\n\tsimplus: '\\u2A24',\n\tsimrarr: '\\u2972',\n\tslarr: '\\u2190',\n\tSmallCircle: '\\u2218',\n\tsmallsetminus: '\\u2216',\n\tsmashp: '\\u2A33',\n\tsmeparsl: '\\u29E4',\n\tsmid: '\\u2223',\n\tsmile: '\\u2323',\n\tsmt: '\\u2AAA',\n\tsmte: '\\u2AAC',\n\tsmtes: '\\u2AAC\\uFE00',\n\tSOFTcy: '\\u042C',\n\tsoftcy: '\\u044C',\n\tsol: '\\u002F',\n\tsolb: '\\u29C4',\n\tsolbar: '\\u233F',\n\tSopf: '\\uD835\\uDD4A',\n\tsopf: '\\uD835\\uDD64',\n\tspades: '\\u2660',\n\tspadesuit: '\\u2660',\n\tspar: '\\u2225',\n\tsqcap: '\\u2293',\n\tsqcaps: '\\u2293\\uFE00',\n\tsqcup: '\\u2294',\n\tsqcups: '\\u2294\\uFE00',\n\tSqrt: '\\u221A',\n\tsqsub: '\\u228F',\n\tsqsube: '\\u2291',\n\tsqsubset: '\\u228F',\n\tsqsubseteq: '\\u2291',\n\tsqsup: '\\u2290',\n\tsqsupe: '\\u2292',\n\tsqsupset: '\\u2290',\n\tsqsupseteq: '\\u2292',\n\tsqu: '\\u25A1',\n\tSquare: '\\u25A1',\n\tsquare: '\\u25A1',\n\tSquareIntersection: '\\u2293',\n\tSquareSubset: '\\u228F',\n\tSquareSubsetEqual: '\\u2291',\n\tSquareSuperset: '\\u2290',\n\tSquareSupersetEqual: '\\u2292',\n\tSquareUnion: '\\u2294',\n\tsquarf: '\\u25AA',\n\tsquf: '\\u25AA',\n\tsrarr: '\\u2192',\n\tSscr: '\\uD835\\uDCAE',\n\tsscr: '\\uD835\\uDCC8',\n\tssetmn: '\\u2216',\n\tssmile: '\\u2323',\n\tsstarf: '\\u22C6',\n\tStar: '\\u22C6',\n\tstar: '\\u2606',\n\tstarf: '\\u2605',\n\tstraightepsilon: '\\u03F5',\n\tstraightphi: '\\u03D5',\n\tstrns: '\\u00AF',\n\tSub: '\\u22D0',\n\tsub: '\\u2282',\n\tsubdot: '\\u2ABD',\n\tsubE: '\\u2AC5',\n\tsube: '\\u2286',\n\tsubedot: '\\u2AC3',\n\tsubmult: '\\u2AC1',\n\tsubnE: '\\u2ACB',\n\tsubne: '\\u228A',\n\tsubplus: '\\u2ABF',\n\tsubrarr: '\\u2979',\n\tSubset: '\\u22D0',\n\tsubset: '\\u2282',\n\tsubseteq: '\\u2286',\n\tsubseteqq: '\\u2AC5',\n\tSubsetEqual: '\\u2286',\n\tsubsetneq: '\\u228A',\n\tsubsetneqq: '\\u2ACB',\n\tsubsim: '\\u2AC7',\n\tsubsub: '\\u2AD5',\n\tsubsup: '\\u2AD3',\n\tsucc: '\\u227B',\n\tsuccapprox: '\\u2AB8',\n\tsucccurlyeq: '\\u227D',\n\tSucceeds: '\\u227B',\n\tSucceedsEqual: '\\u2AB0',\n\tSucceedsSlantEqual: '\\u227D',\n\tSucceedsTilde: '\\u227F',\n\tsucceq: '\\u2AB0',\n\tsuccnapprox: '\\u2ABA',\n\tsuccneqq: '\\u2AB6',\n\tsuccnsim: '\\u22E9',\n\tsuccsim: '\\u227F',\n\tSuchThat: '\\u220B',\n\tSum: '\\u2211',\n\tsum: '\\u2211',\n\tsung: '\\u266A',\n\tSup: '\\u22D1',\n\tsup: '\\u2283',\n\tsup1: '\\u00B9',\n\tsup2: '\\u00B2',\n\tsup3: '\\u00B3',\n\tsupdot: '\\u2ABE',\n\tsupdsub: '\\u2AD8',\n\tsupE: '\\u2AC6',\n\tsupe: '\\u2287',\n\tsupedot: '\\u2AC4',\n\tSuperset: '\\u2283',\n\tSupersetEqual: '\\u2287',\n\tsuphsol: '\\u27C9',\n\tsuphsub: '\\u2AD7',\n\tsuplarr: '\\u297B',\n\tsupmult: '\\u2AC2',\n\tsupnE: '\\u2ACC',\n\tsupne: '\\u228B',\n\tsupplus: '\\u2AC0',\n\tSupset: '\\u22D1',\n\tsupset: '\\u2283',\n\tsupseteq: '\\u2287',\n\tsupseteqq: '\\u2AC6',\n\tsupsetneq: '\\u228B',\n\tsupsetneqq: '\\u2ACC',\n\tsupsim: '\\u2AC8',\n\tsupsub: '\\u2AD4',\n\tsupsup: '\\u2AD6',\n\tswarhk: '\\u2926',\n\tswArr: '\\u21D9',\n\tswarr: '\\u2199',\n\tswarrow: '\\u2199',\n\tswnwar: '\\u292A',\n\tszlig: '\\u00DF',\n\tTab: '\\u0009',\n\ttarget: '\\u2316',\n\tTau: '\\u03A4',\n\ttau: '\\u03C4',\n\ttbrk: '\\u23B4',\n\tTcaron: '\\u0164',\n\ttcaron: '\\u0165',\n\tTcedil: '\\u0162',\n\ttcedil: '\\u0163',\n\tTcy: '\\u0422',\n\ttcy: '\\u0442',\n\ttdot: '\\u20DB',\n\ttelrec: '\\u2315',\n\tTfr: '\\uD835\\uDD17',\n\ttfr: '\\uD835\\uDD31',\n\tthere4: '\\u2234',\n\tTherefore: '\\u2234',\n\ttherefore: '\\u2234',\n\tTheta: '\\u0398',\n\ttheta: '\\u03B8',\n\tthetasym: '\\u03D1',\n\tthetav: '\\u03D1',\n\tthickapprox: '\\u2248',\n\tthicksim: '\\u223C',\n\tThickSpace: '\\u205F\\u200A',\n\tthinsp: '\\u2009',\n\tThinSpace: '\\u2009',\n\tthkap: '\\u2248',\n\tthksim: '\\u223C',\n\tTHORN: '\\u00DE',\n\tthorn: '\\u00FE',\n\tTilde: '\\u223C',\n\ttilde: '\\u02DC',\n\tTildeEqual: '\\u2243',\n\tTildeFullEqual: '\\u2245',\n\tTildeTilde: '\\u2248',\n\ttimes: '\\u00D7',\n\ttimesb: '\\u22A0',\n\ttimesbar: '\\u2A31',\n\ttimesd: '\\u2A30',\n\ttint: '\\u222D',\n\ttoea: '\\u2928',\n\ttop: '\\u22A4',\n\ttopbot: '\\u2336',\n\ttopcir: '\\u2AF1',\n\tTopf: '\\uD835\\uDD4B',\n\ttopf: '\\uD835\\uDD65',\n\ttopfork: '\\u2ADA',\n\ttosa: '\\u2929',\n\ttprime: '\\u2034',\n\tTRADE: '\\u2122',\n\ttrade: '\\u2122',\n\ttriangle: '\\u25B5',\n\ttriangledown: '\\u25BF',\n\ttriangleleft: '\\u25C3',\n\ttrianglelefteq: '\\u22B4',\n\ttriangleq: '\\u225C',\n\ttriangleright: '\\u25B9',\n\ttrianglerighteq: '\\u22B5',\n\ttridot: '\\u25EC',\n\ttrie: '\\u225C',\n\ttriminus: '\\u2A3A',\n\tTripleDot: '\\u20DB',\n\ttriplus: '\\u2A39',\n\ttrisb: '\\u29CD',\n\ttritime: '\\u2A3B',\n\ttrpezium: '\\u23E2',\n\tTscr: '\\uD835\\uDCAF',\n\ttscr: '\\uD835\\uDCC9',\n\tTScy: '\\u0426',\n\ttscy: '\\u0446',\n\tTSHcy: '\\u040B',\n\ttshcy: '\\u045B',\n\tTstrok: '\\u0166',\n\ttstrok: '\\u0167',\n\ttwixt: '\\u226C',\n\ttwoheadleftarrow: '\\u219E',\n\ttwoheadrightarrow: '\\u21A0',\n\tUacute: '\\u00DA',\n\tuacute: '\\u00FA',\n\tUarr: '\\u219F',\n\tuArr: '\\u21D1',\n\tuarr: '\\u2191',\n\tUarrocir: '\\u2949',\n\tUbrcy: '\\u040E',\n\tubrcy: '\\u045E',\n\tUbreve: '\\u016C',\n\tubreve: '\\u016D',\n\tUcirc: '\\u00DB',\n\tucirc: '\\u00FB',\n\tUcy: '\\u0423',\n\tucy: '\\u0443',\n\tudarr: '\\u21C5',\n\tUdblac: '\\u0170',\n\tudblac: '\\u0171',\n\tudhar: '\\u296E',\n\tufisht: '\\u297E',\n\tUfr: '\\uD835\\uDD18',\n\tufr: '\\uD835\\uDD32',\n\tUgrave: '\\u00D9',\n\tugrave: '\\u00F9',\n\tuHar: '\\u2963',\n\tuharl: '\\u21BF',\n\tuharr: '\\u21BE',\n\tuhblk: '\\u2580',\n\tulcorn: '\\u231C',\n\tulcorner: '\\u231C',\n\tulcrop: '\\u230F',\n\tultri: '\\u25F8',\n\tUmacr: '\\u016A',\n\tumacr: '\\u016B',\n\tuml: '\\u00A8',\n\tUnderBar: '\\u005F',\n\tUnderBrace: '\\u23DF',\n\tUnderBracket: '\\u23B5',\n\tUnderParenthesis: '\\u23DD',\n\tUnion: '\\u22C3',\n\tUnionPlus: '\\u228E',\n\tUogon: '\\u0172',\n\tuogon: '\\u0173',\n\tUopf: '\\uD835\\uDD4C',\n\tuopf: '\\uD835\\uDD66',\n\tUpArrow: '\\u2191',\n\tUparrow: '\\u21D1',\n\tuparrow: '\\u2191',\n\tUpArrowBar: '\\u2912',\n\tUpArrowDownArrow: '\\u21C5',\n\tUpDownArrow: '\\u2195',\n\tUpdownarrow: '\\u21D5',\n\tupdownarrow: '\\u2195',\n\tUpEquilibrium: '\\u296E',\n\tupharpoonleft: '\\u21BF',\n\tupharpoonright: '\\u21BE',\n\tuplus: '\\u228E',\n\tUpperLeftArrow: '\\u2196',\n\tUpperRightArrow: '\\u2197',\n\tUpsi: '\\u03D2',\n\tupsi: '\\u03C5',\n\tupsih: '\\u03D2',\n\tUpsilon: '\\u03A5',\n\tupsilon: '\\u03C5',\n\tUpTee: '\\u22A5',\n\tUpTeeArrow: '\\u21A5',\n\tupuparrows: '\\u21C8',\n\turcorn: '\\u231D',\n\turcorner: '\\u231D',\n\turcrop: '\\u230E',\n\tUring: '\\u016E',\n\turing: '\\u016F',\n\turtri: '\\u25F9',\n\tUscr: '\\uD835\\uDCB0',\n\tuscr: '\\uD835\\uDCCA',\n\tutdot: '\\u22F0',\n\tUtilde: '\\u0168',\n\tutilde: '\\u0169',\n\tutri: '\\u25B5',\n\tutrif: '\\u25B4',\n\tuuarr: '\\u21C8',\n\tUuml: '\\u00DC',\n\tuuml: '\\u00FC',\n\tuwangle: '\\u29A7',\n\tvangrt: '\\u299C',\n\tvarepsilon: '\\u03F5',\n\tvarkappa: '\\u03F0',\n\tvarnothing: '\\u2205',\n\tvarphi: '\\u03D5',\n\tvarpi: '\\u03D6',\n\tvarpropto: '\\u221D',\n\tvArr: '\\u21D5',\n\tvarr: '\\u2195',\n\tvarrho: '\\u03F1',\n\tvarsigma: '\\u03C2',\n\tvarsubsetneq: '\\u228A\\uFE00',\n\tvarsubsetneqq: '\\u2ACB\\uFE00',\n\tvarsupsetneq: '\\u228B\\uFE00',\n\tvarsupsetneqq: '\\u2ACC\\uFE00',\n\tvartheta: '\\u03D1',\n\tvartriangleleft: '\\u22B2',\n\tvartriangleright: '\\u22B3',\n\tVbar: '\\u2AEB',\n\tvBar: '\\u2AE8',\n\tvBarv: '\\u2AE9',\n\tVcy: '\\u0412',\n\tvcy: '\\u0432',\n\tVDash: '\\u22AB',\n\tVdash: '\\u22A9',\n\tvDash: '\\u22A8',\n\tvdash: '\\u22A2',\n\tVdashl: '\\u2AE6',\n\tVee: '\\u22C1',\n\tvee: '\\u2228',\n\tveebar: '\\u22BB',\n\tveeeq: '\\u225A',\n\tvellip: '\\u22EE',\n\tVerbar: '\\u2016',\n\tverbar: '\\u007C',\n\tVert: '\\u2016',\n\tvert: '\\u007C',\n\tVerticalBar: '\\u2223',\n\tVerticalLine: '\\u007C',\n\tVerticalSeparator: '\\u2758',\n\tVerticalTilde: '\\u2240',\n\tVeryThinSpace: '\\u200A',\n\tVfr: '\\uD835\\uDD19',\n\tvfr: '\\uD835\\uDD33',\n\tvltri: '\\u22B2',\n\tvnsub: '\\u2282\\u20D2',\n\tvnsup: '\\u2283\\u20D2',\n\tVopf: '\\uD835\\uDD4D',\n\tvopf: '\\uD835\\uDD67',\n\tvprop: '\\u221D',\n\tvrtri: '\\u22B3',\n\tVscr: '\\uD835\\uDCB1',\n\tvscr: '\\uD835\\uDCCB',\n\tvsubnE: '\\u2ACB\\uFE00',\n\tvsubne: '\\u228A\\uFE00',\n\tvsupnE: '\\u2ACC\\uFE00',\n\tvsupne: '\\u228B\\uFE00',\n\tVvdash: '\\u22AA',\n\tvzigzag: '\\u299A',\n\tWcirc: '\\u0174',\n\twcirc: '\\u0175',\n\twedbar: '\\u2A5F',\n\tWedge: '\\u22C0',\n\twedge: '\\u2227',\n\twedgeq: '\\u2259',\n\tweierp: '\\u2118',\n\tWfr: '\\uD835\\uDD1A',\n\twfr: '\\uD835\\uDD34',\n\tWopf: '\\uD835\\uDD4E',\n\twopf: '\\uD835\\uDD68',\n\twp: '\\u2118',\n\twr: '\\u2240',\n\twreath: '\\u2240',\n\tWscr: '\\uD835\\uDCB2',\n\twscr: '\\uD835\\uDCCC',\n\txcap: '\\u22C2',\n\txcirc: '\\u25EF',\n\txcup: '\\u22C3',\n\txdtri: '\\u25BD',\n\tXfr: '\\uD835\\uDD1B',\n\txfr: '\\uD835\\uDD35',\n\txhArr: '\\u27FA',\n\txharr: '\\u27F7',\n\tXi: '\\u039E',\n\txi: '\\u03BE',\n\txlArr: '\\u27F8',\n\txlarr: '\\u27F5',\n\txmap: '\\u27FC',\n\txnis: '\\u22FB',\n\txodot: '\\u2A00',\n\tXopf: '\\uD835\\uDD4F',\n\txopf: '\\uD835\\uDD69',\n\txoplus: '\\u2A01',\n\txotime: '\\u2A02',\n\txrArr: '\\u27F9',\n\txrarr: '\\u27F6',\n\tXscr: '\\uD835\\uDCB3',\n\txscr: '\\uD835\\uDCCD',\n\txsqcup: '\\u2A06',\n\txuplus: '\\u2A04',\n\txutri: '\\u25B3',\n\txvee: '\\u22C1',\n\txwedge: '\\u22C0',\n\tYacute: '\\u00DD',\n\tyacute: '\\u00FD',\n\tYAcy: '\\u042F',\n\tyacy: '\\u044F',\n\tYcirc: '\\u0176',\n\tycirc: '\\u0177',\n\tYcy: '\\u042B',\n\tycy: '\\u044B',\n\tyen: '\\u00A5',\n\tYfr: '\\uD835\\uDD1C',\n\tyfr: '\\uD835\\uDD36',\n\tYIcy: '\\u0407',\n\tyicy: '\\u0457',\n\tYopf: '\\uD835\\uDD50',\n\tyopf: '\\uD835\\uDD6A',\n\tYscr: '\\uD835\\uDCB4',\n\tyscr: '\\uD835\\uDCCE',\n\tYUcy: '\\u042E',\n\tyucy: '\\u044E',\n\tYuml: '\\u0178',\n\tyuml: '\\u00FF',\n\tZacute: '\\u0179',\n\tzacute: '\\u017A',\n\tZcaron: '\\u017D',\n\tzcaron: '\\u017E',\n\tZcy: '\\u0417',\n\tzcy: '\\u0437',\n\tZdot: '\\u017B',\n\tzdot: '\\u017C',\n\tzeetrf: '\\u2128',\n\tZeroWidthSpace: '\\u200B',\n\tZeta: '\\u0396',\n\tzeta: '\\u03B6',\n\tZfr: '\\u2128',\n\tzfr: '\\uD835\\uDD37',\n\tZHcy: '\\u0416',\n\tzhcy: '\\u0436',\n\tzigrarr: '\\u21DD',\n\tZopf: '\\u2124',\n\tzopf: '\\uD835\\uDD6B',\n\tZscr: '\\uD835\\uDCB5',\n\tzscr: '\\uD835\\uDCCF',\n\tzwj: '\\u200D',\n\tzwnj: '\\u200C',\n});\n\n/**\n * @deprecated use `HTML_ENTITIES` instead\n * @see HTML_ENTITIES\n */\nexports.entityMap = exports.HTML_ENTITIES;\n", "var NAMESPACE = require(\"./conventions\").NAMESPACE;\n\n//[4]   \tNameStartChar\t   ::=   \t\":\" | [A-Z] | \"_\" | [a-z] | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x2FF] | [#x370-#x37D] | [#x37F-#x1FFF] | [#x200C-#x200D] | [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]\n//[4a]   \tNameChar\t   ::=   \tNameStartChar | \"-\" | \".\" | [0-9] | #xB7 | [#x0300-#x036F] | [#x203F-#x2040]\n//[5]   \tName\t   ::=   \tNameStartChar (NameChar)*\nvar nameStartChar = /[A-Z_a-z\\xC0-\\xD6\\xD8-\\xF6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]///\\u10000-\\uEFFFF\nvar nameChar = new RegExp(\"[\\\\-\\\\.0-9\"+nameStartChar.source.slice(1,-1)+\"\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040]\");\nvar tagNamePattern = new RegExp('^'+nameStartChar.source+nameChar.source+'*(?:\\:'+nameStartChar.source+nameChar.source+'*)?$');\n//var tagNamePattern = /^[a-zA-Z_][\\w\\-\\.]*(?:\\:[a-zA-Z_][\\w\\-\\.]*)?$/\n//var handlers = 'resolveEntity,getExternalSubset,characters,endDocument,endElement,endPrefixMapping,ignorableWhitespace,processingInstruction,setDocumentLocator,skippedEntity,startDocument,startElement,startPrefixMapping,notationDecl,unparsedEntityDecl,error,fatalError,warning,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,comment,endCDATA,endDTD,endEntity,startCDATA,startDTD,startEntity'.split(',')\n\n//S_TAG,\tS_ATTR,\tS_EQ,\tS_ATTR_NOQUOT_VALUE\n//S_ATTR_SPACE,\tS_ATTR_END,\tS_TAG_SPACE, S_TAG_CLOSE\nvar S_TAG = 0;//tag name offerring\nvar S_ATTR = 1;//attr name offerring\nvar S_ATTR_SPACE=2;//attr name end and space offer\nvar S_EQ = 3;//=space?\nvar S_ATTR_NOQUOT_VALUE = 4;//attr value(no quot value only)\nvar S_ATTR_END = 5;//attr value end and no space(quot end)\nvar S_TAG_SPACE = 6;//(attr value end || tag end ) && (space offer)\nvar S_TAG_CLOSE = 7;//closed el<el />\n\n/**\n * Creates an error that will not be caught by XMLReader aka the SAX parser.\n *\n * @param {string} message\n * @param {any?} locator Optional, can provide details about the location in the source\n * @constructor\n */\nfunction ParseError(message, locator) {\n\tthis.message = message\n\tthis.locator = locator\n\tif(Error.captureStackTrace) Error.captureStackTrace(this, ParseError);\n}\nParseError.prototype = new Error();\nParseError.prototype.name = ParseError.name\n\nfunction XMLReader(){\n\n}\n\nXMLReader.prototype = {\n\tparse:function(source,defaultNSMap,entityMap){\n\t\tvar domBuilder = this.domBuilder;\n\t\tdomBuilder.startDocument();\n\t\t_copy(defaultNSMap ,defaultNSMap = {})\n\t\tparse(source,defaultNSMap,entityMap,\n\t\t\t\tdomBuilder,this.errorHandler);\n\t\tdomBuilder.endDocument();\n\t}\n}\nfunction parse(source,defaultNSMapCopy,entityMap,domBuilder,errorHandler){\n\tfunction fixedFromCharCode(code) {\n\t\t// String.prototype.fromCharCode does not supports\n\t\t// > 2 bytes unicode chars directly\n\t\tif (code > 0xffff) {\n\t\t\tcode -= 0x10000;\n\t\t\tvar surrogate1 = 0xd800 + (code >> 10)\n\t\t\t\t, surrogate2 = 0xdc00 + (code & 0x3ff);\n\n\t\t\treturn String.fromCharCode(surrogate1, surrogate2);\n\t\t} else {\n\t\t\treturn String.fromCharCode(code);\n\t\t}\n\t}\n\tfunction entityReplacer(a){\n\t\tvar k = a.slice(1,-1);\n\t\tif (Object.hasOwnProperty.call(entityMap, k)) {\n\t\t\treturn entityMap[k];\n\t\t}else if(k.charAt(0) === '#'){\n\t\t\treturn fixedFromCharCode(parseInt(k.substr(1).replace('x','0x')))\n\t\t}else{\n\t\t\terrorHandler.error('entity not found:'+a);\n\t\t\treturn a;\n\t\t}\n\t}\n\tfunction appendText(end){//has some bugs\n\t\tif(end>start){\n\t\t\tvar xt = source.substring(start,end).replace(/&#?\\w+;/g,entityReplacer);\n\t\t\tlocator&&position(start);\n\t\t\tdomBuilder.characters(xt,0,end-start);\n\t\t\tstart = end\n\t\t}\n\t}\n\tfunction position(p,m){\n\t\twhile(p>=lineEnd && (m = linePattern.exec(source))){\n\t\t\tlineStart = m.index;\n\t\t\tlineEnd = lineStart + m[0].length;\n\t\t\tlocator.lineNumber++;\n\t\t\t//console.log('line++:',locator,startPos,endPos)\n\t\t}\n\t\tlocator.columnNumber = p-lineStart+1;\n\t}\n\tvar lineStart = 0;\n\tvar lineEnd = 0;\n\tvar linePattern = /.*(?:\\r\\n?|\\n)|.*$/g\n\tvar locator = domBuilder.locator;\n\n\tvar parseStack = [{currentNSMap:defaultNSMapCopy}]\n\tvar closeMap = {};\n\tvar start = 0;\n\twhile(true){\n\t\ttry{\n\t\t\tvar tagStart = source.indexOf('<',start);\n\t\t\tif(tagStart<0){\n\t\t\t\tif(!source.substr(start).match(/^\\s*$/)){\n\t\t\t\t\tvar doc = domBuilder.doc;\n\t    \t\t\tvar text = doc.createTextNode(source.substr(start));\n\t    \t\t\tdoc.appendChild(text);\n\t    \t\t\tdomBuilder.currentElement = text;\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif(tagStart>start){\n\t\t\t\tappendText(tagStart);\n\t\t\t}\n\t\t\tswitch(source.charAt(tagStart+1)){\n\t\t\tcase '/':\n\t\t\t\tvar end = source.indexOf('>',tagStart+3);\n\t\t\t\tvar tagName = source.substring(tagStart + 2, end).replace(/[ \\t\\n\\r]+$/g, '');\n\t\t\t\tvar config = parseStack.pop();\n\t\t\t\tif(end<0){\n\n\t        \t\ttagName = source.substring(tagStart+2).replace(/[\\s<].*/,'');\n\t        \t\terrorHandler.error(\"end tag name: \"+tagName+' is not complete:'+config.tagName);\n\t        \t\tend = tagStart+1+tagName.length;\n\t        \t}else if(tagName.match(/\\s</)){\n\t        \t\ttagName = tagName.replace(/[\\s<].*/,'');\n\t        \t\terrorHandler.error(\"end tag name: \"+tagName+' maybe not complete');\n\t        \t\tend = tagStart+1+tagName.length;\n\t\t\t\t}\n\t\t\t\tvar localNSMap = config.localNSMap;\n\t\t\t\tvar endMatch = config.tagName == tagName;\n\t\t\t\tvar endIgnoreCaseMach = endMatch || config.tagName&&config.tagName.toLowerCase() == tagName.toLowerCase()\n\t\t        if(endIgnoreCaseMach){\n\t\t        \tdomBuilder.endElement(config.uri,config.localName,tagName);\n\t\t\t\t\tif(localNSMap){\n\t\t\t\t\t\tfor (var prefix in localNSMap) {\n\t\t\t\t\t\t\tif (Object.prototype.hasOwnProperty.call(localNSMap, prefix)) {\n\t\t\t\t\t\t\t\tdomBuilder.endPrefixMapping(prefix);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(!endMatch){\n\t\t            \terrorHandler.fatalError(\"end tag name: \"+tagName+' is not match the current start tagName:'+config.tagName ); // No known test case\n\t\t\t\t\t}\n\t\t        }else{\n\t\t        \tparseStack.push(config)\n\t\t        }\n\n\t\t\t\tend++;\n\t\t\t\tbreak;\n\t\t\t\t// end elment\n\t\t\tcase '?':// <?...?>\n\t\t\t\tlocator&&position(tagStart);\n\t\t\t\tend = parseInstruction(source,tagStart,domBuilder);\n\t\t\t\tbreak;\n\t\t\tcase '!':// <!doctype,<![CDATA,<!--\n\t\t\t\tlocator&&position(tagStart);\n\t\t\t\tend = parseDCC(source,tagStart,domBuilder,errorHandler);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tlocator&&position(tagStart);\n\t\t\t\tvar el = new ElementAttributes();\n\t\t\t\tvar currentNSMap = parseStack[parseStack.length-1].currentNSMap;\n\t\t\t\t//elStartEnd\n\t\t\t\tvar end = parseElementStartPart(source,tagStart,el,currentNSMap,entityReplacer,errorHandler);\n\t\t\t\tvar len = el.length;\n\n\n\t\t\t\tif(!el.closed && fixSelfClosed(source,end,el.tagName,closeMap)){\n\t\t\t\t\tel.closed = true;\n\t\t\t\t\tif(!entityMap.nbsp){\n\t\t\t\t\t\terrorHandler.warning('unclosed xml attribute');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(locator && len){\n\t\t\t\t\tvar locator2 = copyLocator(locator,{});\n\t\t\t\t\t//try{//attribute position fixed\n\t\t\t\t\tfor(var i = 0;i<len;i++){\n\t\t\t\t\t\tvar a = el[i];\n\t\t\t\t\t\tposition(a.offset);\n\t\t\t\t\t\ta.locator = copyLocator(locator,{});\n\t\t\t\t\t}\n\t\t\t\t\tdomBuilder.locator = locator2\n\t\t\t\t\tif(appendElement(el,domBuilder,currentNSMap)){\n\t\t\t\t\t\tparseStack.push(el)\n\t\t\t\t\t}\n\t\t\t\t\tdomBuilder.locator = locator;\n\t\t\t\t}else{\n\t\t\t\t\tif(appendElement(el,domBuilder,currentNSMap)){\n\t\t\t\t\t\tparseStack.push(el)\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (NAMESPACE.isHTML(el.uri) && !el.closed) {\n\t\t\t\t\tend = parseHtmlSpecialContent(source,end,el.tagName,entityReplacer,domBuilder)\n\t\t\t\t} else {\n\t\t\t\t\tend++;\n\t\t\t\t}\n\t\t\t}\n\t\t}catch(e){\n\t\t\tif (e instanceof ParseError) {\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t\terrorHandler.error('element parse error: '+e)\n\t\t\tend = -1;\n\t\t}\n\t\tif(end>start){\n\t\t\tstart = end;\n\t\t}else{\n\t\t\t//TODO: 这里有可能sax回退，有位置错误风险\n\t\t\tappendText(Math.max(tagStart,start)+1);\n\t\t}\n\t}\n}\nfunction copyLocator(f,t){\n\tt.lineNumber = f.lineNumber;\n\tt.columnNumber = f.columnNumber;\n\treturn t;\n}\n\n/**\n * @see #appendElement(source,elStartEnd,el,selfClosed,entityReplacer,domBuilder,parseStack);\n * @return end of the elementStartPart(end of elementEndPart for selfClosed el)\n */\nfunction parseElementStartPart(source,start,el,currentNSMap,entityReplacer,errorHandler){\n\n\t/**\n\t * @param {string} qname\n\t * @param {string} value\n\t * @param {number} startIndex\n\t */\n\tfunction addAttribute(qname, value, startIndex) {\n\t\tif (el.attributeNames.hasOwnProperty(qname)) {\n\t\t\terrorHandler.fatalError('Attribute ' + qname + ' redefined')\n\t\t}\n\t\tel.addValue(\n\t\t\tqname,\n\t\t\t// @see https://www.w3.org/TR/xml/#AVNormalize\n\t\t\t// since the xmldom sax parser does not \"interpret\" DTD the following is not implemented:\n\t\t\t// - recursive replacement of (DTD) entity references\n\t\t\t// - trimming and collapsing multiple spaces into a single one for attributes that are not of type CDATA\n\t\t\tvalue.replace(/[\\t\\n\\r]/g, ' ').replace(/&#?\\w+;/g, entityReplacer),\n\t\t\tstartIndex\n\t\t)\n\t}\n\tvar attrName;\n\tvar value;\n\tvar p = ++start;\n\tvar s = S_TAG;//status\n\twhile(true){\n\t\tvar c = source.charAt(p);\n\t\tswitch(c){\n\t\tcase '=':\n\t\t\tif(s === S_ATTR){//attrName\n\t\t\t\tattrName = source.slice(start,p);\n\t\t\t\ts = S_EQ;\n\t\t\t}else if(s === S_ATTR_SPACE){\n\t\t\t\ts = S_EQ;\n\t\t\t}else{\n\t\t\t\t//fatalError: equal must after attrName or space after attrName\n\t\t\t\tthrow new Error('attribute equal must after attrName'); // No known test case\n\t\t\t}\n\t\t\tbreak;\n\t\tcase '\\'':\n\t\tcase '\"':\n\t\t\tif(s === S_EQ || s === S_ATTR //|| s == S_ATTR_SPACE\n\t\t\t\t){//equal\n\t\t\t\tif(s === S_ATTR){\n\t\t\t\t\terrorHandler.warning('attribute value must after \"=\"')\n\t\t\t\t\tattrName = source.slice(start,p)\n\t\t\t\t}\n\t\t\t\tstart = p+1;\n\t\t\t\tp = source.indexOf(c,start)\n\t\t\t\tif(p>0){\n\t\t\t\t\tvalue = source.slice(start, p);\n\t\t\t\t\taddAttribute(attrName, value, start-1);\n\t\t\t\t\ts = S_ATTR_END;\n\t\t\t\t}else{\n\t\t\t\t\t//fatalError: no end quot match\n\t\t\t\t\tthrow new Error('attribute value no end \\''+c+'\\' match');\n\t\t\t\t}\n\t\t\t}else if(s == S_ATTR_NOQUOT_VALUE){\n\t\t\t\tvalue = source.slice(start, p);\n\t\t\t\taddAttribute(attrName, value, start);\n\t\t\t\terrorHandler.warning('attribute \"'+attrName+'\" missed start quot('+c+')!!');\n\t\t\t\tstart = p+1;\n\t\t\t\ts = S_ATTR_END\n\t\t\t}else{\n\t\t\t\t//fatalError: no equal before\n\t\t\t\tthrow new Error('attribute value must after \"=\"'); // No known test case\n\t\t\t}\n\t\t\tbreak;\n\t\tcase '/':\n\t\t\tswitch(s){\n\t\t\tcase S_TAG:\n\t\t\t\tel.setTagName(source.slice(start,p));\n\t\t\tcase S_ATTR_END:\n\t\t\tcase S_TAG_SPACE:\n\t\t\tcase S_TAG_CLOSE:\n\t\t\t\ts =S_TAG_CLOSE;\n\t\t\t\tel.closed = true;\n\t\t\tcase S_ATTR_NOQUOT_VALUE:\n\t\t\tcase S_ATTR:\n\t\t\t\tbreak;\n\t\t\t\tcase S_ATTR_SPACE:\n\t\t\t\t\tel.closed = true;\n\t\t\t\tbreak;\n\t\t\t//case S_EQ:\n\t\t\tdefault:\n\t\t\t\tthrow new Error(\"attribute invalid close char('/')\") // No known test case\n\t\t\t}\n\t\t\tbreak;\n\t\tcase ''://end document\n\t\t\terrorHandler.error('unexpected end of input');\n\t\t\tif(s == S_TAG){\n\t\t\t\tel.setTagName(source.slice(start,p));\n\t\t\t}\n\t\t\treturn p;\n\t\tcase '>':\n\t\t\tswitch(s){\n\t\t\tcase S_TAG:\n\t\t\t\tel.setTagName(source.slice(start,p));\n\t\t\tcase S_ATTR_END:\n\t\t\tcase S_TAG_SPACE:\n\t\t\tcase S_TAG_CLOSE:\n\t\t\t\tbreak;//normal\n\t\t\tcase S_ATTR_NOQUOT_VALUE://Compatible state\n\t\t\tcase S_ATTR:\n\t\t\t\tvalue = source.slice(start,p);\n\t\t\t\tif(value.slice(-1) === '/'){\n\t\t\t\t\tel.closed  = true;\n\t\t\t\t\tvalue = value.slice(0,-1)\n\t\t\t\t}\n\t\t\tcase S_ATTR_SPACE:\n\t\t\t\tif(s === S_ATTR_SPACE){\n\t\t\t\t\tvalue = attrName;\n\t\t\t\t}\n\t\t\t\tif(s == S_ATTR_NOQUOT_VALUE){\n\t\t\t\t\terrorHandler.warning('attribute \"'+value+'\" missed quot(\")!');\n\t\t\t\t\taddAttribute(attrName, value, start)\n\t\t\t\t}else{\n\t\t\t\t\tif(!NAMESPACE.isHTML(currentNSMap['']) || !value.match(/^(?:disabled|checked|selected)$/i)){\n\t\t\t\t\t\terrorHandler.warning('attribute \"'+value+'\" missed value!! \"'+value+'\" instead!!')\n\t\t\t\t\t}\n\t\t\t\t\taddAttribute(value, value, start)\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase S_EQ:\n\t\t\t\tthrow new Error('attribute value missed!!');\n\t\t\t}\n//\t\t\tconsole.log(tagName,tagNamePattern,tagNamePattern.test(tagName))\n\t\t\treturn p;\n\t\t/*xml space '\\x20' | #x9 | #xD | #xA; */\n\t\tcase '\\u0080':\n\t\t\tc = ' ';\n\t\tdefault:\n\t\t\tif(c<= ' '){//space\n\t\t\t\tswitch(s){\n\t\t\t\tcase S_TAG:\n\t\t\t\t\tel.setTagName(source.slice(start,p));//tagName\n\t\t\t\t\ts = S_TAG_SPACE;\n\t\t\t\t\tbreak;\n\t\t\t\tcase S_ATTR:\n\t\t\t\t\tattrName = source.slice(start,p)\n\t\t\t\t\ts = S_ATTR_SPACE;\n\t\t\t\t\tbreak;\n\t\t\t\tcase S_ATTR_NOQUOT_VALUE:\n\t\t\t\t\tvar value = source.slice(start, p);\n\t\t\t\t\terrorHandler.warning('attribute \"'+value+'\" missed quot(\")!!');\n\t\t\t\t\taddAttribute(attrName, value, start)\n\t\t\t\tcase S_ATTR_END:\n\t\t\t\t\ts = S_TAG_SPACE;\n\t\t\t\t\tbreak;\n\t\t\t\t//case S_TAG_SPACE:\n\t\t\t\t//case S_EQ:\n\t\t\t\t//case S_ATTR_SPACE:\n\t\t\t\t//\tvoid();break;\n\t\t\t\t//case S_TAG_CLOSE:\n\t\t\t\t\t//ignore warning\n\t\t\t\t}\n\t\t\t}else{//not space\n//S_TAG,\tS_ATTR,\tS_EQ,\tS_ATTR_NOQUOT_VALUE\n//S_ATTR_SPACE,\tS_ATTR_END,\tS_TAG_SPACE, S_TAG_CLOSE\n\t\t\t\tswitch(s){\n\t\t\t\t//case S_TAG:void();break;\n\t\t\t\t//case S_ATTR:void();break;\n\t\t\t\t//case S_ATTR_NOQUOT_VALUE:void();break;\n\t\t\t\tcase S_ATTR_SPACE:\n\t\t\t\t\tvar tagName =  el.tagName;\n\t\t\t\t\tif (!NAMESPACE.isHTML(currentNSMap['']) || !attrName.match(/^(?:disabled|checked|selected)$/i)) {\n\t\t\t\t\t\terrorHandler.warning('attribute \"'+attrName+'\" missed value!! \"'+attrName+'\" instead2!!')\n\t\t\t\t\t}\n\t\t\t\t\taddAttribute(attrName, attrName, start);\n\t\t\t\t\tstart = p;\n\t\t\t\t\ts = S_ATTR;\n\t\t\t\t\tbreak;\n\t\t\t\tcase S_ATTR_END:\n\t\t\t\t\terrorHandler.warning('attribute space is required\"'+attrName+'\"!!')\n\t\t\t\tcase S_TAG_SPACE:\n\t\t\t\t\ts = S_ATTR;\n\t\t\t\t\tstart = p;\n\t\t\t\t\tbreak;\n\t\t\t\tcase S_EQ:\n\t\t\t\t\ts = S_ATTR_NOQUOT_VALUE;\n\t\t\t\t\tstart = p;\n\t\t\t\t\tbreak;\n\t\t\t\tcase S_TAG_CLOSE:\n\t\t\t\t\tthrow new Error(\"elements closed character '/' and '>' must be connected to\");\n\t\t\t\t}\n\t\t\t}\n\t\t}//end outer switch\n\t\t//console.log('p++',p)\n\t\tp++;\n\t}\n}\n/**\n * @return true if has new namespace define\n */\nfunction appendElement(el,domBuilder,currentNSMap){\n\tvar tagName = el.tagName;\n\tvar localNSMap = null;\n\t//var currentNSMap = parseStack[parseStack.length-1].currentNSMap;\n\tvar i = el.length;\n\twhile(i--){\n\t\tvar a = el[i];\n\t\tvar qName = a.qName;\n\t\tvar value = a.value;\n\t\tvar nsp = qName.indexOf(':');\n\t\tif(nsp>0){\n\t\t\tvar prefix = a.prefix = qName.slice(0,nsp);\n\t\t\tvar localName = qName.slice(nsp+1);\n\t\t\tvar nsPrefix = prefix === 'xmlns' && localName\n\t\t}else{\n\t\t\tlocalName = qName;\n\t\t\tprefix = null\n\t\t\tnsPrefix = qName === 'xmlns' && ''\n\t\t}\n\t\t//can not set prefix,because prefix !== ''\n\t\ta.localName = localName ;\n\t\t//prefix == null for no ns prefix attribute\n\t\tif(nsPrefix !== false){//hack!!\n\t\t\tif(localNSMap == null){\n\t\t\t\tlocalNSMap = {}\n\t\t\t\t//console.log(currentNSMap,0)\n\t\t\t\t_copy(currentNSMap,currentNSMap={})\n\t\t\t\t//console.log(currentNSMap,1)\n\t\t\t}\n\t\t\tcurrentNSMap[nsPrefix] = localNSMap[nsPrefix] = value;\n\t\t\ta.uri = NAMESPACE.XMLNS\n\t\t\tdomBuilder.startPrefixMapping(nsPrefix, value)\n\t\t}\n\t}\n\tvar i = el.length;\n\twhile(i--){\n\t\ta = el[i];\n\t\tvar prefix = a.prefix;\n\t\tif(prefix){//no prefix attribute has no namespace\n\t\t\tif(prefix === 'xml'){\n\t\t\t\ta.uri = NAMESPACE.XML;\n\t\t\t}if(prefix !== 'xmlns'){\n\t\t\t\ta.uri = currentNSMap[prefix || '']\n\n\t\t\t\t//{console.log('###'+a.qName,domBuilder.locator.systemId+'',currentNSMap,a.uri)}\n\t\t\t}\n\t\t}\n\t}\n\tvar nsp = tagName.indexOf(':');\n\tif(nsp>0){\n\t\tprefix = el.prefix = tagName.slice(0,nsp);\n\t\tlocalName = el.localName = tagName.slice(nsp+1);\n\t}else{\n\t\tprefix = null;//important!!\n\t\tlocalName = el.localName = tagName;\n\t}\n\t//no prefix element has default namespace\n\tvar ns = el.uri = currentNSMap[prefix || ''];\n\tdomBuilder.startElement(ns,localName,tagName,el);\n\t//endPrefixMapping and startPrefixMapping have not any help for dom builder\n\t//localNSMap = null\n\tif(el.closed){\n\t\tdomBuilder.endElement(ns,localName,tagName);\n\t\tif(localNSMap){\n\t\t\tfor (prefix in localNSMap) {\n\t\t\t\tif (Object.prototype.hasOwnProperty.call(localNSMap, prefix)) {\n\t\t\t\t\tdomBuilder.endPrefixMapping(prefix);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}else{\n\t\tel.currentNSMap = currentNSMap;\n\t\tel.localNSMap = localNSMap;\n\t\t//parseStack.push(el);\n\t\treturn true;\n\t}\n}\nfunction parseHtmlSpecialContent(source,elStartEnd,tagName,entityReplacer,domBuilder){\n\tif(/^(?:script|textarea)$/i.test(tagName)){\n\t\tvar elEndStart =  source.indexOf('</'+tagName+'>',elStartEnd);\n\t\tvar text = source.substring(elStartEnd+1,elEndStart);\n\t\tif(/[&<]/.test(text)){\n\t\t\tif(/^script$/i.test(tagName)){\n\t\t\t\t//if(!/\\]\\]>/.test(text)){\n\t\t\t\t\t//lexHandler.startCDATA();\n\t\t\t\t\tdomBuilder.characters(text,0,text.length);\n\t\t\t\t\t//lexHandler.endCDATA();\n\t\t\t\t\treturn elEndStart;\n\t\t\t\t//}\n\t\t\t}//}else{//text area\n\t\t\t\ttext = text.replace(/&#?\\w+;/g,entityReplacer);\n\t\t\t\tdomBuilder.characters(text,0,text.length);\n\t\t\t\treturn elEndStart;\n\t\t\t//}\n\n\t\t}\n\t}\n\treturn elStartEnd+1;\n}\nfunction fixSelfClosed(source,elStartEnd,tagName,closeMap){\n\t//if(tagName in closeMap){\n\tvar pos = closeMap[tagName];\n\tif(pos == null){\n\t\t//console.log(tagName)\n\t\tpos =  source.lastIndexOf('</'+tagName+'>')\n\t\tif(pos<elStartEnd){//忘记闭合\n\t\t\tpos = source.lastIndexOf('</'+tagName)\n\t\t}\n\t\tcloseMap[tagName] =pos\n\t}\n\treturn pos<elStartEnd;\n\t//}\n}\n\nfunction _copy (source, target) {\n\tfor (var n in source) {\n\t\tif (Object.prototype.hasOwnProperty.call(source, n)) {\n\t\t\ttarget[n] = source[n];\n\t\t}\n\t}\n}\n\nfunction parseDCC(source,start,domBuilder,errorHandler){//sure start with '<!'\n\tvar next= source.charAt(start+2)\n\tswitch(next){\n\tcase '-':\n\t\tif(source.charAt(start + 3) === '-'){\n\t\t\tvar end = source.indexOf('-->',start+4);\n\t\t\t//append comment source.substring(4,end)//<!--\n\t\t\tif(end>start){\n\t\t\t\tdomBuilder.comment(source,start+4,end-start-4);\n\t\t\t\treturn end+3;\n\t\t\t}else{\n\t\t\t\terrorHandler.error(\"Unclosed comment\");\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}else{\n\t\t\t//error\n\t\t\treturn -1;\n\t\t}\n\tdefault:\n\t\tif(source.substr(start+3,6) == 'CDATA['){\n\t\t\tvar end = source.indexOf(']]>',start+9);\n\t\t\tdomBuilder.startCDATA();\n\t\t\tdomBuilder.characters(source,start+9,end-start-9);\n\t\t\tdomBuilder.endCDATA()\n\t\t\treturn end+3;\n\t\t}\n\t\t//<!DOCTYPE\n\t\t//startDTD(java.lang.String name, java.lang.String publicId, java.lang.String systemId)\n\t\tvar matchs = split(source,start);\n\t\tvar len = matchs.length;\n\t\tif(len>1 && /!doctype/i.test(matchs[0][0])){\n\t\t\tvar name = matchs[1][0];\n\t\t\tvar pubid = false;\n\t\t\tvar sysid = false;\n\t\t\tif(len>3){\n\t\t\t\tif(/^public$/i.test(matchs[2][0])){\n\t\t\t\t\tpubid = matchs[3][0];\n\t\t\t\t\tsysid = len>4 && matchs[4][0];\n\t\t\t\t}else if(/^system$/i.test(matchs[2][0])){\n\t\t\t\t\tsysid = matchs[3][0];\n\t\t\t\t}\n\t\t\t}\n\t\t\tvar lastMatch = matchs[len-1]\n\t\t\tdomBuilder.startDTD(name, pubid, sysid);\n\t\t\tdomBuilder.endDTD();\n\n\t\t\treturn lastMatch.index+lastMatch[0].length\n\t\t}\n\t}\n\treturn -1;\n}\n\n\n\nfunction parseInstruction(source,start,domBuilder){\n\tvar end = source.indexOf('?>',start);\n\tif(end){\n\t\tvar match = source.substring(start,end).match(/^<\\?(\\S*)\\s*([\\s\\S]*?)\\s*$/);\n\t\tif(match){\n\t\t\tvar len = match[0].length;\n\t\t\tdomBuilder.processingInstruction(match[1], match[2]) ;\n\t\t\treturn end+2;\n\t\t}else{//error\n\t\t\treturn -1;\n\t\t}\n\t}\n\treturn -1;\n}\n\nfunction ElementAttributes(){\n\tthis.attributeNames = {}\n}\nElementAttributes.prototype = {\n\tsetTagName:function(tagName){\n\t\tif(!tagNamePattern.test(tagName)){\n\t\t\tthrow new Error('invalid tagName:'+tagName)\n\t\t}\n\t\tthis.tagName = tagName\n\t},\n\taddValue:function(qName, value, offset) {\n\t\tif(!tagNamePattern.test(qName)){\n\t\t\tthrow new Error('invalid attribute:'+qName)\n\t\t}\n\t\tthis.attributeNames[qName] = this.length;\n\t\tthis[this.length++] = {qName:qName,value:value,offset:offset}\n\t},\n\tlength:0,\n\tgetLocalName:function(i){return this[i].localName},\n\tgetLocator:function(i){return this[i].locator},\n\tgetQName:function(i){return this[i].qName},\n\tgetURI:function(i){return this[i].uri},\n\tgetValue:function(i){return this[i].value}\n//\t,getIndex:function(uri, localName)){\n//\t\tif(localName){\n//\n//\t\t}else{\n//\t\t\tvar qName = uri\n//\t\t}\n//\t},\n//\tgetValue:function(){return this.getValue(this.getIndex.apply(this,arguments))},\n//\tgetType:function(uri,localName){}\n//\tgetType:function(i){},\n}\n\n\n\nfunction split(source,start){\n\tvar match;\n\tvar buf = [];\n\tvar reg = /'[^']+'|\"[^\"]+\"|[^\\s<>\\/=]+=?|(\\/?\\s*>|<)/g;\n\treg.lastIndex = start;\n\treg.exec(source);//skip <\n\twhile(match = reg.exec(source)){\n\t\tbuf.push(match);\n\t\tif(match[1])return buf;\n\t}\n}\n\nexports.XMLReader = XMLReader;\nexports.ParseError = ParseError;\n", "var conventions = require(\"./conventions\");\nvar dom = require('./dom')\nvar entities = require('./entities');\nvar sax = require('./sax');\n\nvar DOMImplementation = dom.DOMImplementation;\n\nvar NAMESPACE = conventions.NAMESPACE;\n\nvar ParseError = sax.ParseError;\nvar XMLReader = sax.XMLReader;\n\n/**\n * Normalizes line ending according to https://www.w3.org/TR/xml11/#sec-line-ends:\n *\n * > XML parsed entities are often stored in computer files which,\n * > for editing convenience, are organized into lines.\n * > These lines are typically separated by some combination\n * > of the characters CARRIAGE RETURN (#xD) and LINE FEED (#xA).\n * >\n * > To simplify the tasks of applications, the XML processor must behave\n * > as if it normalized all line breaks in external parsed entities (including the document entity)\n * > on input, before parsing, by translating all of the following to a single #xA character:\n * >\n * > 1. the two-character sequence #xD #xA\n * > 2. the two-character sequence #xD #x85\n * > 3. the single character #x85\n * > 4. the single character #x2028\n * > 5. any #xD character that is not immediately followed by #xA or #x85.\n *\n * @param {string} input\n * @returns {string}\n */\nfunction normalizeLineEndings(input) {\n\treturn input\n\t\t.replace(/\\r[\\n\\u0085]/g, '\\n')\n\t\t.replace(/[\\r\\u0085\\u2028]/g, '\\n')\n}\n\n/**\n * @typedef Locator\n * @property {number} [columnNumber]\n * @property {number} [lineNumber]\n */\n\n/**\n * @typedef DOMParserOptions\n * @property {DOMHandler} [domBuilder]\n * @property {Function} [errorHandler]\n * @property {(string) => string} [normalizeLineEndings] used to replace line endings before parsing\n * \t\t\t\t\t\tdefaults to `normalizeLineEndings`\n * @property {Locator} [locator]\n * @property {Record<string, string>} [xmlns]\n *\n * @see normalizeLineEndings\n */\n\n/**\n * The DOMParser interface provides the ability to parse XML or HTML source code\n * from a string into a DOM `Document`.\n *\n * _xmldom is different from the spec in that it allows an `options` parameter,\n * to override the default behavior._\n *\n * @param {DOMParserOptions} [options]\n * @constructor\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMParser\n * @see https://html.spec.whatwg.org/multipage/dynamic-markup-insertion.html#dom-parsing-and-serialization\n */\nfunction DOMParser(options){\n\tthis.options = options ||{locator:{}};\n}\n\nDOMParser.prototype.parseFromString = function(source,mimeType){\n\tvar options = this.options;\n\tvar sax =  new XMLReader();\n\tvar domBuilder = options.domBuilder || new DOMHandler();//contentHandler and LexicalHandler\n\tvar errorHandler = options.errorHandler;\n\tvar locator = options.locator;\n\tvar defaultNSMap = options.xmlns||{};\n\tvar isHTML = /\\/x?html?$/.test(mimeType);//mimeType.toLowerCase().indexOf('html') > -1;\n  \tvar entityMap = isHTML ? entities.HTML_ENTITIES : entities.XML_ENTITIES;\n\tif(locator){\n\t\tdomBuilder.setDocumentLocator(locator)\n\t}\n\n\tsax.errorHandler = buildErrorHandler(errorHandler,domBuilder,locator);\n\tsax.domBuilder = options.domBuilder || domBuilder;\n\tif(isHTML){\n\t\tdefaultNSMap[''] = NAMESPACE.HTML;\n\t}\n\tdefaultNSMap.xml = defaultNSMap.xml || NAMESPACE.XML;\n\tvar normalize = options.normalizeLineEndings || normalizeLineEndings;\n\tif (source && typeof source === 'string') {\n\t\tsax.parse(\n\t\t\tnormalize(source),\n\t\t\tdefaultNSMap,\n\t\t\tentityMap\n\t\t)\n\t} else {\n\t\tsax.errorHandler.error('invalid doc source')\n\t}\n\treturn domBuilder.doc;\n}\nfunction buildErrorHandler(errorImpl,domBuilder,locator){\n\tif(!errorImpl){\n\t\tif(domBuilder instanceof DOMHandler){\n\t\t\treturn domBuilder;\n\t\t}\n\t\terrorImpl = domBuilder ;\n\t}\n\tvar errorHandler = {}\n\tvar isCallback = errorImpl instanceof Function;\n\tlocator = locator||{}\n\tfunction build(key){\n\t\tvar fn = errorImpl[key];\n\t\tif(!fn && isCallback){\n\t\t\tfn = errorImpl.length == 2?function(msg){errorImpl(key,msg)}:errorImpl;\n\t\t}\n\t\terrorHandler[key] = fn && function(msg){\n\t\t\tfn('[xmldom '+key+']\\t'+msg+_locator(locator));\n\t\t}||function(){};\n\t}\n\tbuild('warning');\n\tbuild('error');\n\tbuild('fatalError');\n\treturn errorHandler;\n}\n\n//console.log('#\\n\\n\\n\\n\\n\\n\\n####')\n/**\n * +ContentHandler+ErrorHandler\n * +LexicalHandler+EntityResolver2\n * -DeclHandler-DTDHandler\n *\n * DefaultHandler:EntityResolver, DTDHandler, ContentHandler, ErrorHandler\n * DefaultHandler2:DefaultHandler,LexicalHandler, DeclHandler, EntityResolver2\n * @link http://www.saxproject.org/apidoc/org/xml/sax/helpers/DefaultHandler.html\n */\nfunction DOMHandler() {\n    this.cdata = false;\n}\nfunction position(locator,node){\n\tnode.lineNumber = locator.lineNumber;\n\tnode.columnNumber = locator.columnNumber;\n}\n/**\n * @see org.xml.sax.ContentHandler#startDocument\n * @link http://www.saxproject.org/apidoc/org/xml/sax/ContentHandler.html\n */\nDOMHandler.prototype = {\n\tstartDocument : function() {\n    \tthis.doc = new DOMImplementation().createDocument(null, null, null);\n    \tif (this.locator) {\n        \tthis.doc.documentURI = this.locator.systemId;\n    \t}\n\t},\n\tstartElement:function(namespaceURI, localName, qName, attrs) {\n\t\tvar doc = this.doc;\n\t    var el = doc.createElementNS(namespaceURI, qName||localName);\n\t    var len = attrs.length;\n\t    appendElement(this, el);\n\t    this.currentElement = el;\n\n\t\tthis.locator && position(this.locator,el)\n\t    for (var i = 0 ; i < len; i++) {\n\t        var namespaceURI = attrs.getURI(i);\n\t        var value = attrs.getValue(i);\n\t        var qName = attrs.getQName(i);\n\t\t\tvar attr = doc.createAttributeNS(namespaceURI, qName);\n\t\t\tthis.locator &&position(attrs.getLocator(i),attr);\n\t\t\tattr.value = attr.nodeValue = value;\n\t\t\tel.setAttributeNode(attr)\n\t    }\n\t},\n\tendElement:function(namespaceURI, localName, qName) {\n\t\tvar current = this.currentElement\n\t\tvar tagName = current.tagName;\n\t\tthis.currentElement = current.parentNode;\n\t},\n\tstartPrefixMapping:function(prefix, uri) {\n\t},\n\tendPrefixMapping:function(prefix) {\n\t},\n\tprocessingInstruction:function(target, data) {\n\t    var ins = this.doc.createProcessingInstruction(target, data);\n\t    this.locator && position(this.locator,ins)\n\t    appendElement(this, ins);\n\t},\n\tignorableWhitespace:function(ch, start, length) {\n\t},\n\tcharacters:function(chars, start, length) {\n\t\tchars = _toString.apply(this,arguments)\n\t\t//console.log(chars)\n\t\tif(chars){\n\t\t\tif (this.cdata) {\n\t\t\t\tvar charNode = this.doc.createCDATASection(chars);\n\t\t\t} else {\n\t\t\t\tvar charNode = this.doc.createTextNode(chars);\n\t\t\t}\n\t\t\tif(this.currentElement){\n\t\t\t\tthis.currentElement.appendChild(charNode);\n\t\t\t}else if(/^\\s*$/.test(chars)){\n\t\t\t\tthis.doc.appendChild(charNode);\n\t\t\t\t//process xml\n\t\t\t}\n\t\t\tthis.locator && position(this.locator,charNode)\n\t\t}\n\t},\n\tskippedEntity:function(name) {\n\t},\n\tendDocument:function() {\n\t\tthis.doc.normalize();\n\t},\n\tsetDocumentLocator:function (locator) {\n\t    if(this.locator = locator){// && !('lineNumber' in locator)){\n\t    \tlocator.lineNumber = 0;\n\t    }\n\t},\n\t//LexicalHandler\n\tcomment:function(chars, start, length) {\n\t\tchars = _toString.apply(this,arguments)\n\t    var comm = this.doc.createComment(chars);\n\t    this.locator && position(this.locator,comm)\n\t    appendElement(this, comm);\n\t},\n\n\tstartCDATA:function() {\n\t    //used in characters() methods\n\t    this.cdata = true;\n\t},\n\tendCDATA:function() {\n\t    this.cdata = false;\n\t},\n\n\tstartDTD:function(name, publicId, systemId) {\n\t\tvar impl = this.doc.implementation;\n\t    if (impl && impl.createDocumentType) {\n\t        var dt = impl.createDocumentType(name, publicId, systemId);\n\t        this.locator && position(this.locator,dt)\n\t        appendElement(this, dt);\n\t\t\t\t\tthis.doc.doctype = dt;\n\t    }\n\t},\n\t/**\n\t * @see org.xml.sax.ErrorHandler\n\t * @link http://www.saxproject.org/apidoc/org/xml/sax/ErrorHandler.html\n\t */\n\twarning:function(error) {\n\t\tconsole.warn('[xmldom warning]\\t'+error,_locator(this.locator));\n\t},\n\terror:function(error) {\n\t\tconsole.error('[xmldom error]\\t'+error,_locator(this.locator));\n\t},\n\tfatalError:function(error) {\n\t\tthrow new ParseError(error, this.locator);\n\t}\n}\nfunction _locator(l){\n\tif(l){\n\t\treturn '\\n@'+(l.systemId ||'')+'#[line:'+l.lineNumber+',col:'+l.columnNumber+']'\n\t}\n}\nfunction _toString(chars,start,length){\n\tif(typeof chars == 'string'){\n\t\treturn chars.substr(start,length)\n\t}else{//java sax connect width xmldom on rhino(what about: \"? && !(chars instanceof String)\")\n\t\tif(chars.length >= start+length || start){\n\t\t\treturn new java.lang.String(chars,start,length)+'';\n\t\t}\n\t\treturn chars;\n\t}\n}\n\n/*\n * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/LexicalHandler.html\n * used method of org.xml.sax.ext.LexicalHandler:\n *  #comment(chars, start, length)\n *  #startCDATA()\n *  #endCDATA()\n *  #startDTD(name, publicId, systemId)\n *\n *\n * IGNORED method of org.xml.sax.ext.LexicalHandler:\n *  #endDTD()\n *  #startEntity(name)\n *  #endEntity(name)\n *\n *\n * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/DeclHandler.html\n * IGNORED method of org.xml.sax.ext.DeclHandler\n * \t#attributeDecl(eName, aName, type, mode, value)\n *  #elementDecl(name, model)\n *  #externalEntityDecl(name, publicId, systemId)\n *  #internalEntityDecl(name, value)\n * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/EntityResolver2.html\n * IGNORED method of org.xml.sax.EntityResolver2\n *  #resolveEntity(String name,String publicId,String baseURI,String systemId)\n *  #resolveEntity(publicId, systemId)\n *  #getExternalSubset(name, baseURI)\n * @link http://www.saxproject.org/apidoc/org/xml/sax/DTDHandler.html\n * IGNORED method of org.xml.sax.DTDHandler\n *  #notationDecl(name, publicId, systemId) {};\n *  #unparsedEntityDecl(name, publicId, systemId, notationName) {};\n */\n\"endDTD,startEntity,endEntity,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,resolveEntity,getExternalSubset,notationDecl,unparsedEntityDecl\".replace(/\\w+/g,function(key){\n\tDOMHandler.prototype[key] = function(){return null}\n})\n\n/* Private static helpers treated below as private instance methods, so don't need to add these to the public API; we might use a Relator to also get rid of non-standard public properties */\nfunction appendElement (hander,node) {\n    if (!hander.currentElement) {\n        hander.doc.appendChild(node);\n    } else {\n        hander.currentElement.appendChild(node);\n    }\n}//appendChild and setAttributeNS are preformance key\n\nexports.__DOMHandler = DOMHandler;\nexports.normalizeLineEndings = normalizeLineEndings;\nexports.DOMParser = DOMParser;\n", "var dom = require('./dom')\nexports.DOMImplementation = dom.DOMImplementation\nexports.XMLSerializer = dom.XMLSerializer\nexports.DOMParser = require('./dom-parser').DOMParser\n", "\"use strict\";\n\n/**\n * Implementation of atob() according to the HTML and Infra specs, except that\n * instead of throwing INVALID_CHARACTER_ERR we return null.\n */\nfunction atob(data) {\n  if (arguments.length === 0) {\n    throw new TypeError(\"1 argument required, but only 0 present.\");\n  }\n\n  // Web IDL requires DOMStrings to just be converted using ECMAScript\n  // ToString, which in our case amounts to using a template literal.\n  data = `${data}`;\n  // \"Remove all ASCII whitespace from data.\"\n  data = data.replace(/[ \\t\\n\\f\\r]/g, \"\");\n  // \"If data's length divides by 4 leaving no remainder, then: if data ends\n  // with one or two U+003D (=) code points, then remove them from data.\"\n  if (data.length % 4 === 0) {\n    data = data.replace(/==?$/, \"\");\n  }\n  // \"If data's length divides by 4 leaving a remainder of 1, then return\n  // failure.\"\n  //\n  // \"If data contains a code point that is not one of\n  //\n  // U+002B (+)\n  // U+002F (/)\n  // ASCII alphanumeric\n  //\n  // then return failure.\"\n  if (data.length % 4 === 1 || /[^+/0-9A-Za-z]/.test(data)) {\n    return null;\n  }\n  // \"Let output be an empty byte sequence.\"\n  let output = \"\";\n  // \"Let buffer be an empty buffer that can have bits appended to it.\"\n  //\n  // We append bits via left-shift and or.  accumulatedBits is used to track\n  // when we've gotten to 24 bits.\n  let buffer = 0;\n  let accumulatedBits = 0;\n  // \"Let position be a position variable for data, initially pointing at the\n  // start of data.\"\n  //\n  // \"While position does not point past the end of data:\"\n  for (let i = 0; i < data.length; i++) {\n    // \"Find the code point pointed to by position in the second column of\n    // Table 1: The Base 64 Alphabet of RFC 4648. Let n be the number given in\n    // the first cell of the same row.\n    //\n    // \"Append to buffer the six bits corresponding to n, most significant bit\n    // first.\"\n    //\n    // atobLookup() implements the table from RFC 4648.\n    buffer <<= 6;\n    buffer |= atobLookup(data[i]);\n    accumulatedBits += 6;\n    // \"If buffer has accumulated 24 bits, interpret them as three 8-bit\n    // big-endian numbers. Append three bytes with values equal to those\n    // numbers to output, in the same order, and then empty buffer.\"\n    if (accumulatedBits === 24) {\n      output += String.fromCharCode((buffer & 0xff0000) >> 16);\n      output += String.fromCharCode((buffer & 0xff00) >> 8);\n      output += String.fromCharCode(buffer & 0xff);\n      buffer = accumulatedBits = 0;\n    }\n    // \"Advance position by 1.\"\n  }\n  // \"If buffer is not empty, it contains either 12 or 18 bits. If it contains\n  // 12 bits, then discard the last four and interpret the remaining eight as\n  // an 8-bit big-endian number. If it contains 18 bits, then discard the last\n  // two and interpret the remaining 16 as two 8-bit big-endian numbers. Append\n  // the one or two bytes with values equal to those one or two numbers to\n  // output, in the same order.\"\n  if (accumulatedBits === 12) {\n    buffer >>= 4;\n    output += String.fromCharCode(buffer);\n  } else if (accumulatedBits === 18) {\n    buffer >>= 2;\n    output += String.fromCharCode((buffer & 0xff00) >> 8);\n    output += String.fromCharCode(buffer & 0xff);\n  }\n  // \"Return output.\"\n  return output;\n}\n/**\n * A lookup table for atob(), which converts an ASCII character to the\n * corresponding six-bit number.\n */\n\nconst keystr =\n  \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\nfunction atobLookup(chr) {\n  const index = keystr.indexOf(chr);\n  // Throw exception if character is not in the lookup string; should not be hit in tests\n  return index < 0 ? undefined : index;\n}\n\nmodule.exports = atob;\n", "\"use strict\";\n\n/**\n * btoa() as defined by the HTML and Infra specs, which mostly just references\n * RFC 4648.\n */\nfunction btoa(s) {\n  if (arguments.length === 0) {\n    throw new TypeError(\"1 argument required, but only 0 present.\");\n  }\n\n  let i;\n  // String conversion as required by Web IDL.\n  s = `${s}`;\n  // \"The btoa() method must throw an \"InvalidCharacterError\" DOMException if\n  // data contains any character whose code point is greater than U+00FF.\"\n  for (i = 0; i < s.length; i++) {\n    if (s.charCodeAt(i) > 255) {\n      return null;\n    }\n  }\n  let out = \"\";\n  for (i = 0; i < s.length; i += 3) {\n    const groupsOfSix = [undefined, undefined, undefined, undefined];\n    groupsOfSix[0] = s.charCodeAt(i) >> 2;\n    groupsOfSix[1] = (s.charCodeAt(i) & 0x03) << 4;\n    if (s.length > i + 1) {\n      groupsOfSix[1] |= s.charCodeAt(i + 1) >> 4;\n      groupsOfSix[2] = (s.charCodeAt(i + 1) & 0x0f) << 2;\n    }\n    if (s.length > i + 2) {\n      groupsOfSix[2] |= s.charCodeAt(i + 2) >> 6;\n      groupsOfSix[3] = s.charCodeAt(i + 2) & 0x3f;\n    }\n    for (let j = 0; j < groupsOfSix.length; j++) {\n      if (typeof groupsOfSix[j] === \"undefined\") {\n        out += \"=\";\n      } else {\n        out += btoaLookup(groupsOfSix[j]);\n      }\n    }\n  }\n  return out;\n}\n\n/**\n * Lookup table for btoa(), which converts a six-bit number into the\n * corresponding ASCII character.\n */\nconst keystr =\n  \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\nfunction btoaLookup(index) {\n  if (index >= 0 && index < 64) {\n    return keystr[index];\n  }\n\n  // Throw INVALID_CHARACTER_ERR exception here -- won't be hit in the tests.\n  return undefined;\n}\n\nmodule.exports = btoa;\n", "\"use strict\";\n\nconst atob = require(\"./lib/atob\");\nconst btoa = require(\"./lib/btoa\");\n\nmodule.exports = {\n  atob,\n  btoa\n};\n", "/**\n * This module provides uniform\n * Shims APIs and globals that are not present in all JS environments,\n * the most common example for Strophe being browser APIs like WebSocket\n * and DOM that don't exist under nodejs.\n *\n * Usually these will be supplied in nodejs by conditionally requiring a\n * NPM module that provides a compatible implementation.\n */\n\n/* global globalThis */\n\n/**\n * WHATWG WebSockets API\n * https://www.w3.org/TR/websockets/\n *\n * Interface to use the web socket protocol\n *\n * Used implementations:\n * - supported browsers: built-in in WebSocket global\n *   https://developer.mozilla.org/en-US/docs/Web/API/WebSocket#Browser_compatibility\n * - nodejs: use standard-compliant 'ws' module\n *   https://www.npmjs.com/package/ws\n */\nfunction getWebSocketImplementation() {\n    if (typeof globalThis.WebSocket === 'undefined') {\n        try {\n            return require('ws');\n        } catch (err) {\n            throw new Error('You must install the \"ws\" package to use Strophe in nodejs.');\n        }\n    }\n    return globalThis.WebSocket;\n}\nexport const WebSocket = getWebSocketImplementation();\n\n/**\n * DOMParser\n * https://w3c.github.io/DOM-Parsing/#the-domparser-interface\n *\n * Interface to parse XML strings into Document objects\n *\n * Used implementations:\n * - supported browsers: built-in in DOMParser global\n *   https://developer.mozilla.org/en-US/docs/Web/API/DOMParser#Browser_compatibility\n * - nodejs: use '@xmldom/xmldom' module\n *   https://www.npmjs.com/package/@xmldom/xmldom\n */\nfunction getDOMParserImplementation() {\n    let DOMParserImplementation = globalThis.DOMParser;\n    if (typeof DOMParserImplementation === 'undefined') {\n        try {\n            DOMParserImplementation = require('@xmldom/xmldom').DOMParser;\n        } catch (err) {\n            throw new Error('You must install the \"@xmldom/xmldom\" package to use Strophe in nodejs.');\n        }\n    }\n    return DOMParserImplementation;\n}\nexport const DOMParser = getDOMParserImplementation();\n\n/**\n * Creates a dummy XML DOM document to serve as an element and text node generator.\n *\n * Used implementations:\n *  - IE < 10: avoid using createDocument() due to a memory leak, use ie-specific\n *    workaround\n *  - other supported browsers: use document's createDocument\n *  - nodejs: use '@xmldom/xmldom'\n */\nexport function getDummyXMLDOMDocument() {\n    if (typeof document === 'undefined') {\n        // NodeJS\n        try {\n            const DOMImplementation = require('@xmldom/xmldom').DOMImplementation;\n            return new DOMImplementation().createDocument('jabber:client', 'strophe', null);\n        } catch (err) {\n            throw new Error('You must install the \"@xmldom/xmldom\" package to use Strophe in nodejs.');\n        }\n    }\n    return document.implementation.createDocument('jabber:client', 'strophe', null);\n}\n", "/* global btoa */\nimport log from './log.js';\nimport * as shims from './shims.js';\nimport { ElementType, XHTML } from './constants.js';\n\n/**\n * Properly logs an error to the console\n * @param {Error} e\n */\nexport function handleError(e) {\n    if (typeof e.stack !== 'undefined') {\n        log.fatal(e.stack);\n    }\n    log.fatal('error: ' + e.message);\n}\n\n/**\n * @param {string} str\n * @return {string}\n */\nexport function utf16to8(str) {\n    let out = '';\n    const len = str.length;\n    for (let i = 0; i < len; i++) {\n        const c = str.charCodeAt(i);\n        if (c >= 0x0000 && c <= 0x007f) {\n            out += str.charAt(i);\n        } else if (c > 0x07ff) {\n            out += String.fromCharCode(0xe0 | ((c >> 12) & 0x0f));\n            out += String.fromCharCode(0x80 | ((c >> 6) & 0x3f));\n            out += String.fromCharCode(0x80 | ((c >> 0) & 0x3f));\n        } else {\n            out += String.fromCharCode(0xc0 | ((c >> 6) & 0x1f));\n            out += String.fromCharCode(0x80 | ((c >> 0) & 0x3f));\n        }\n    }\n    return out;\n}\n\n/**\n * @param {ArrayBufferLike} x\n * @param {ArrayBufferLike} y\n */\nexport function xorArrayBuffers(x, y) {\n    const xIntArray = new Uint8Array(x);\n    const yIntArray = new Uint8Array(y);\n    const zIntArray = new Uint8Array(x.byteLength);\n    for (let i = 0; i < x.byteLength; i++) {\n        zIntArray[i] = xIntArray[i] ^ yIntArray[i];\n    }\n    return zIntArray.buffer;\n}\n\n/**\n * @param {ArrayBufferLike} buffer\n * @return {string}\n */\nexport function arrayBufToBase64(buffer) {\n    // This function is due to mobz (https://stackoverflow.com/users/1234628/mobz)\n    // and Emmanuel (https://stackoverflow.com/users/288564/emmanuel)\n    let binary = '';\n    const bytes = new Uint8Array(buffer);\n    const len = bytes.byteLength;\n    for (let i = 0; i < len; i++) {\n        binary += String.fromCharCode(bytes[i]);\n    }\n    return btoa(binary);\n}\n\n/**\n * @param {string} str\n * @return {ArrayBufferLike}\n */\nexport function base64ToArrayBuf(str) {\n    return Uint8Array.from(atob(str), (c) => c.charCodeAt(0))?.buffer;\n}\n\n/**\n * @param {string} str\n * @return {ArrayBufferLike}\n */\nexport function stringToArrayBuf(str) {\n    const bytes = new TextEncoder().encode(str);\n    return bytes.buffer;\n}\n\n/**\n * @param {Cookies} cookies\n */\nexport function addCookies(cookies) {\n    if (typeof document === 'undefined') {\n        log.error(`addCookies: not adding any cookies, since there's no document object`);\n    }\n\n    /**\n     * @typedef {Object.<string, string>} Cookie\n     *\n     * A map of cookie names to string values or to maps of cookie values.\n     * @typedef {Cookie|Object.<string, Cookie>} Cookies\n     *\n     * For example:\n     * { \"myCookie\": \"1234\" }\n     *\n     * or:\n     * { \"myCookie\": {\n     *    \"value\": \"1234\",\n     *    \"domain\": \".example.org\",\n     *    \"path\": \"/\",\n     *    \"expires\": expirationDate\n     *    }\n     * }\n     *\n     * These values get passed to {@link Strophe.Connection} via options.cookies\n     */\n    cookies = cookies || {};\n    for (const cookieName in cookies) {\n        if (Object.prototype.hasOwnProperty.call(cookies, cookieName)) {\n            let expires = '';\n            let domain = '';\n            let path = '';\n            const cookieObj = cookies[cookieName];\n            const isObj = typeof cookieObj === 'object';\n            const cookieValue = escape(unescape(isObj ? cookieObj.value : cookieObj));\n            if (isObj) {\n                expires = cookieObj.expires ? ';expires=' + cookieObj.expires : '';\n                domain = cookieObj.domain ? ';domain=' + cookieObj.domain : '';\n                path = cookieObj.path ? ';path=' + cookieObj.path : '';\n            }\n            document.cookie = cookieName + '=' + cookieValue + expires + domain + path;\n        }\n    }\n}\n\n/** @type {Document} */\nlet _xmlGenerator = null;\n\n/**\n * Get the DOM document to generate elements.\n * @return {Document} - The currently used DOM document.\n */\nexport function xmlGenerator() {\n    if (!_xmlGenerator) {\n        _xmlGenerator = shims.getDummyXMLDOMDocument();\n    }\n    return _xmlGenerator;\n}\n\n/**\n * Creates an XML DOM text node.\n * Provides a cross implementation version of document.createTextNode.\n * @param {string} text - The content of the text node.\n * @return {Text} - A new XML DOM text node.\n */\nexport function xmlTextNode(text) {\n    return xmlGenerator().createTextNode(text);\n}\n\n/**\n * Creates an XML DOM node.\n * @param {string} html - The content of the html node.\n * @return {XMLDocument}\n */\nexport function xmlHtmlNode(html) {\n    const parser = new shims.DOMParser();\n    return parser.parseFromString(html, 'text/xml');\n}\n\n/**\n * Create an XML DOM element.\n *\n * This function creates an XML DOM element correctly across all\n * implementations. Note that these are not HTML DOM elements, which\n * aren't appropriate for XMPP stanzas.\n *\n * @param {string} name - The name for the element.\n * @param {Array<Array<string>>|Object.<string,string|number>|string|number} [attrs]\n *    An optional array or object containing\n *    key/value pairs to use as element attributes.\n *    The object should be in the format `{'key': 'value'}`.\n *    The array should have the format `[['key1', 'value1'], ['key2', 'value2']]`.\n * @param {string|number} [text] - The text child data for the element.\n *\n * @return {Element} A new XML DOM element.\n */\nexport function xmlElement(name, attrs, text) {\n    if (!name) return null;\n\n    const node = xmlGenerator().createElement(name);\n\n    if (text && (typeof text === 'string' || typeof text === 'number')) {\n        node.appendChild(xmlTextNode(text.toString()));\n    } else if (typeof attrs === 'string' || typeof attrs === 'number') {\n        node.appendChild(xmlTextNode(/** @type {number|string} */ (attrs).toString()));\n        return node;\n    }\n\n    if (!attrs) {\n        return node;\n    } else if (Array.isArray(attrs)) {\n        for (const attr of attrs) {\n            if (Array.isArray(attr)) {\n                // eslint-disable-next-line no-eq-null\n                if (attr[0] != null && attr[1] != null) {\n                    node.setAttribute(attr[0], attr[1]);\n                }\n            }\n        }\n    } else if (typeof attrs === 'object') {\n        for (const k of Object.keys(attrs)) {\n            // eslint-disable-next-line no-eq-null\n            if (k && attrs[k] != null) {\n                node.setAttribute(k, attrs[k].toString());\n            }\n        }\n    }\n\n    return node;\n}\n\n/**\n * Utility method to determine whether a tag is allowed\n * in the XHTML_IM namespace.\n *\n * XHTML tag names are case sensitive and must be lower case.\n * @method Strophe.XHTML.validTag\n * @param {string} tag\n */\nexport function validTag(tag) {\n    for (let i = 0; i < XHTML.tags.length; i++) {\n        if (tag === XHTML.tags[i]) {\n            return true;\n        }\n    }\n    return false;\n}\n\n/**\n * @typedef {'a'|'blockquote'|'br'|'cite'|'em'|'img'|'li'|'ol'|'p'|'span'|'strong'|'ul'|'body'} XHTMLAttrs\n */\n\n/**\n * Utility method to determine whether an attribute is allowed\n * as recommended per XEP-0071\n *\n * XHTML attribute names are case sensitive and must be lower case.\n * @method Strophe.XHTML.validAttribute\n * @param {string} tag\n * @param {string} attribute\n */\nexport function validAttribute(tag, attribute) {\n    const attrs = XHTML.attributes[/** @type {XHTMLAttrs} */ (tag)];\n\n    if (attrs?.length > 0) {\n        for (let i = 0; i < attrs.length; i++) {\n            if (attribute === attrs[i]) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\n/**\n * @method Strophe.XHTML.validCSS\n * @param {string} style\n */\nexport function validCSS(style) {\n    for (let i = 0; i < XHTML.css.length; i++) {\n        if (style === XHTML.css[i]) {\n            return true;\n        }\n    }\n    return false;\n}\n\n/**\n * Copy an HTML DOM Element into an XML DOM.\n * This function copies a DOM element and all its descendants and returns\n * the new copy.\n * @method Strophe.createHtml\n * @param {HTMLElement} elem - A DOM element.\n * @return {Node} - A new, copied DOM element tree.\n */\nfunction createFromHtmlElement(elem) {\n    let el;\n    const tag = elem.nodeName.toLowerCase(); // XHTML tags must be lower case.\n    if (validTag(tag)) {\n        try {\n            el = xmlElement(tag);\n\n            if (tag in XHTML.attributes) {\n                const attrs = XHTML.attributes[/** @type {XHTMLAttrs} */ (tag)];\n\n                for (let i = 0; i < attrs.length; i++) {\n                    const attribute = attrs[i];\n                    let value = elem.getAttribute(attribute);\n\n                    if (typeof value === 'undefined' || value === null || value === '') {\n                        continue;\n                    }\n\n                    if (attribute === 'style' && typeof value === 'object') {\n                        value = /** @type {Object.<'csstext',string>} */ (value).cssText ?? value; // we're dealing with IE, need to get CSS out\n                    }\n\n                    // filter out invalid css styles\n                    if (attribute === 'style') {\n                        const css = [];\n                        const cssAttrs = value.split(';');\n                        for (let j = 0; j < cssAttrs.length; j++) {\n                            const attr = cssAttrs[j].split(':');\n                            const cssName = attr[0].replace(/^\\s*/, '').replace(/\\s*$/, '').toLowerCase();\n                            if (validCSS(cssName)) {\n                                const cssValue = attr[1].replace(/^\\s*/, '').replace(/\\s*$/, '');\n                                css.push(cssName + ': ' + cssValue);\n                            }\n                        }\n                        if (css.length > 0) {\n                            value = css.join('; ');\n                            el.setAttribute(attribute, value);\n                        }\n                    } else {\n                        el.setAttribute(attribute, value);\n                    }\n                }\n                for (let i = 0; i < elem.childNodes.length; i++) {\n                    el.appendChild(createHtml(elem.childNodes[i]));\n                }\n            }\n        } catch (e) {\n            // invalid elements\n            el = xmlTextNode('');\n        }\n    } else {\n        el = xmlGenerator().createDocumentFragment();\n        for (let i = 0; i < elem.childNodes.length; i++) {\n            el.appendChild(createHtml(elem.childNodes[i]));\n        }\n    }\n    return el;\n}\n\n/**\n * Copy an HTML DOM Node into an XML DOM.\n * This function copies a DOM element and all its descendants and returns\n * the new copy.\n * @method Strophe.createHtml\n * @param {Node} node - A DOM element.\n * @return {Node} - A new, copied DOM element tree.\n */\nexport function createHtml(node) {\n    if (node.nodeType === ElementType.NORMAL) {\n        return createFromHtmlElement(/** @type {HTMLElement} */ (node));\n    } else if (node.nodeType === ElementType.FRAGMENT) {\n        const el = xmlGenerator().createDocumentFragment();\n        for (let i = 0; i < node.childNodes.length; i++) {\n            el.appendChild(createHtml(node.childNodes[i]));\n        }\n        return el;\n    } else if (node.nodeType === ElementType.TEXT) {\n        return xmlTextNode(node.nodeValue);\n    }\n}\n\n/**\n * Copy an XML DOM element.\n *\n * This function copies a DOM element and all its descendants and returns\n * the new copy.\n * @method Strophe.copyElement\n * @param {Node} node - A DOM element.\n * @return {Element|Text} - A new, copied DOM element tree.\n */\nexport function copyElement(node) {\n    let out;\n\n    if (node.nodeType === ElementType.NORMAL) {\n        const el = /** @type {Element} */ (node);\n        out = xmlElement(el.tagName);\n\n        for (let i = 0; i < el.attributes.length; i++) {\n            out.setAttribute(el.attributes[i].nodeName, el.attributes[i].value);\n        }\n        for (let i = 0; i < el.childNodes.length; i++) {\n            out.appendChild(copyElement(el.childNodes[i]));\n        }\n    } else if (node.nodeType === ElementType.TEXT) {\n        out = xmlGenerator().createTextNode(node.nodeValue);\n    }\n    return out;\n}\n\n/**\n * Excapes invalid xml characters.\n * @method Strophe.xmlescape\n * @param {string} text - text to escape.\n * @return {string} - Escaped text.\n */\nexport function xmlescape(text) {\n    text = text.replace(/\\&/g, '&amp;');\n    text = text.replace(/</g, '&lt;');\n    text = text.replace(/>/g, '&gt;');\n    text = text.replace(/'/g, '&apos;');\n    text = text.replace(/\"/g, '&quot;');\n    return text;\n}\n\n/**\n * Unexcapes invalid xml characters.\n * @method Strophe.xmlunescape\n * @param {string} text - text to unescape.\n * @return {string} - Unescaped text.\n */\nexport function xmlunescape(text) {\n    text = text.replace(/\\&amp;/g, '&');\n    text = text.replace(/&lt;/g, '<');\n    text = text.replace(/&gt;/g, '>');\n    text = text.replace(/&apos;/g, \"'\");\n    text = text.replace(/&quot;/g, '\"');\n    return text;\n}\n\n/**\n * Map a function over some or all child elements of a given element.\n *\n * This is a small convenience function for mapping a function over\n * some or all of the children of an element.  If elemName is null, all\n * children will be passed to the function, otherwise only children\n * whose tag names match elemName will be passed.\n *\n * @method Strophe.forEachChild\n * @param {Element} elem - The element to operate on.\n * @param {string} elemName - The child element tag name filter.\n * @param {Function} func - The function to apply to each child.  This\n *    function should take a single argument, a DOM element.\n */\nexport function forEachChild(elem, elemName, func) {\n    for (let i = 0; i < elem.childNodes.length; i++) {\n        const childNode = elem.childNodes[i];\n        if (childNode.nodeType === ElementType.NORMAL && (!elemName || this.isTagEqual(childNode, elemName))) {\n            func(childNode);\n        }\n    }\n}\n\n/**\n * Compare an element's tag name with a string.\n * This function is case sensitive.\n * @method Strophe.isTagEqual\n * @param {Element} el - A DOM element.\n * @param {string} name - The element name.\n * @return {boolean}\n *  true if the element's tag name matches _el_, and false\n *  otherwise.\n */\nexport function isTagEqual(el, name) {\n    return el.tagName === name;\n}\n\n/**\n * Get the concatenation of all text children of an element.\n * @method Strophe.getText\n * @param {Element} elem - A DOM element.\n * @return {string} - A String with the concatenated text of all text element children.\n */\nexport function getText(elem) {\n    if (!elem) {\n        return null;\n    }\n\n    let str = '';\n    if (!elem.childNodes?.length && elem.nodeType === ElementType.TEXT) {\n        str += elem.nodeValue;\n    }\n    for (let i = 0; i < elem.childNodes?.length ?? 0; i++) {\n        if (elem.childNodes[i].nodeType === ElementType.TEXT) {\n            str += elem.childNodes[i].nodeValue;\n        }\n    }\n    return xmlescape(str);\n}\n\n/**\n * Escape the node part (also called local part) of a JID.\n * @method Strophe.escapeNode\n * @param {string} node - A node (or local part).\n * @return {string} An escaped node (or local part).\n */\nexport function escapeNode(node) {\n    if (typeof node !== 'string') {\n        return node;\n    }\n    return node\n        .replace(/^\\s+|\\s+$/g, '')\n        .replace(/\\\\/g, '\\\\5c')\n        .replace(/ /g, '\\\\20')\n        .replace(/\\\"/g, '\\\\22')\n        .replace(/\\&/g, '\\\\26')\n        .replace(/\\'/g, '\\\\27')\n        .replace(/\\//g, '\\\\2f')\n        .replace(/:/g, '\\\\3a')\n        .replace(/</g, '\\\\3c')\n        .replace(/>/g, '\\\\3e')\n        .replace(/@/g, '\\\\40');\n}\n\n/**\n * Unescape a node part (also called local part) of a JID.\n * @method Strophe.unescapeNode\n * @param {string} node - A node (or local part).\n * @return {string} An unescaped node (or local part).\n */\nexport function unescapeNode(node) {\n    if (typeof node !== 'string') {\n        return node;\n    }\n    return node\n        .replace(/\\\\20/g, ' ')\n        .replace(/\\\\22/g, '\"')\n        .replace(/\\\\26/g, '&')\n        .replace(/\\\\27/g, \"'\")\n        .replace(/\\\\2f/g, '/')\n        .replace(/\\\\3a/g, ':')\n        .replace(/\\\\3c/g, '<')\n        .replace(/\\\\3e/g, '>')\n        .replace(/\\\\40/g, '@')\n        .replace(/\\\\5c/g, '\\\\');\n}\n\n/**\n * Get the node portion of a JID String.\n * @method Strophe.getNodeFromJid\n * @param {string} jid - A JID.\n * @return {string} - A String containing the node.\n */\nexport function getNodeFromJid(jid) {\n    if (jid.indexOf('@') < 0) {\n        return null;\n    }\n    return jid.split('@')[0];\n}\n\n/**\n * Get the domain portion of a JID String.\n * @method Strophe.getDomainFromJid\n * @param {string} jid - A JID.\n * @return {string} - A String containing the domain.\n */\nexport function getDomainFromJid(jid) {\n    const bare = getBareJidFromJid(jid);\n    if (bare.indexOf('@') < 0) {\n        return bare;\n    } else {\n        const parts = bare.split('@');\n        parts.splice(0, 1);\n        return parts.join('@');\n    }\n}\n\n/**\n * Get the resource portion of a JID String.\n * @method Strophe.getResourceFromJid\n * @param {string} jid - A JID.\n * @return {string} - A String containing the resource.\n */\nexport function getResourceFromJid(jid) {\n    if (!jid) {\n        return null;\n    }\n    const s = jid.split('/');\n    if (s.length < 2) {\n        return null;\n    }\n    s.splice(0, 1);\n    return s.join('/');\n}\n\n/**\n * Get the bare JID from a JID String.\n * @method Strophe.getBareJidFromJid\n * @param {string} jid - A JID.\n * @return {string} - A String containing the bare JID.\n */\nexport function getBareJidFromJid(jid) {\n    return jid ? jid.split('/')[0] : null;\n}\n\nconst utils = {\n    utf16to8,\n    xorArrayBuffers,\n    arrayBufToBase64,\n    base64ToArrayBuf,\n    stringToArrayBuf,\n    addCookies,\n};\n\nexport { utils as default };\n", "/**\n * Common namespace constants from the XMPP RFCs and XEPs.\n *\n * @typedef { Object } NS\n * @property {string} NS.HTTPBIND - HTTP BIND namespace from XEP 124.\n * @property {string} NS.BOSH - BOSH namespace from XEP 206.\n * @property {string} NS.CLIENT - Main XMPP client namespace.\n * @property {string} NS.AUTH - Legacy authentication namespace.\n * @property {string} NS.ROSTER - Roster operations namespace.\n * @property {string} NS.PROFILE - Profile namespace.\n * @property {string} NS.DISCO_INFO - Service discovery info namespace from XEP 30.\n * @property {string} NS.DISCO_ITEMS - Service discovery items namespace from XEP 30.\n * @property {string} NS.MUC - Multi-User Chat namespace from XEP 45.\n * @property {string} NS.SASL - XMPP SASL namespace from RFC 3920.\n * @property {string} NS.STREAM - XMPP Streams namespace from RFC 3920.\n * @property {string} NS.BIND - XMPP Binding namespace from RFC 3920 and RFC 6120.\n * @property {string} NS.SESSION - XMPP Session namespace from RFC 3920.\n * @property {string} NS.XHTML_IM - XHTML-IM namespace from XEP 71.\n * @property {string} NS.XHTML - XHTML body namespace from XEP 71.\n * @property {string} NS.STANZAS\n * @property {string} NS.FRAMING\n */\nexport const NS = {\n    HTTPBIND: 'http://jabber.org/protocol/httpbind',\n    BOSH: 'urn:xmpp:xbosh',\n    CLIENT: 'jabber:client',\n    AUTH: 'jabber:iq:auth',\n    ROSTER: 'jabber:iq:roster',\n    PROFILE: 'jabber:iq:profile',\n    DISCO_INFO: 'http://jabber.org/protocol/disco#info',\n    DISCO_ITEMS: 'http://jabber.org/protocol/disco#items',\n    MUC: 'http://jabber.org/protocol/muc',\n    SASL: 'urn:ietf:params:xml:ns:xmpp-sasl',\n    STREAM: 'http://etherx.jabber.org/streams',\n    FRAMING: 'urn:ietf:params:xml:ns:xmpp-framing',\n    BIND: 'urn:ietf:params:xml:ns:xmpp-bind',\n    SESSION: 'urn:ietf:params:xml:ns:xmpp-session',\n    VERSION: 'jabber:iq:version',\n    STANZAS: 'urn:ietf:params:xml:ns:xmpp-stanzas',\n    XHTML_IM: 'http://jabber.org/protocol/xhtml-im',\n    XHTML: 'http://www.w3.org/1999/xhtml',\n};\n\n/**\n * Contains allowed tags, tag attributes, and css properties.\n * Used in the {@link Strophe.createHtml} function to filter incoming html into the allowed XHTML-IM subset.\n * See [XEP-0071](http://xmpp.org/extensions/xep-0071.html#profile-summary) for the list of recommended\n * allowed tags and their attributes.\n */\nexport const XHTML = {\n    tags: ['a', 'blockquote', 'br', 'cite', 'em', 'img', 'li', 'ol', 'p', 'span', 'strong', 'ul', 'body'],\n    attributes: {\n        'a': ['href'],\n        'blockquote': ['style'],\n        /** @type {never[]} */\n        'br': [],\n        'cite': ['style'],\n        /** @type {never[]} */\n        'em': [],\n        'img': ['src', 'alt', 'style', 'height', 'width'],\n        'li': ['style'],\n        'ol': ['style'],\n        'p': ['style'],\n        'span': ['style'],\n        /** @type {never[]} */\n        'strong': [],\n        'ul': ['style'],\n        /** @type {never[]} */\n        'body': [],\n    },\n    css: [\n        'background-color',\n        'color',\n        'font-family',\n        'font-size',\n        'font-style',\n        'font-weight',\n        'margin-left',\n        'margin-right',\n        'text-align',\n        'text-decoration',\n    ],\n};\n\n/** @typedef {number} connstatus */\n\n/**\n * Connection status constants for use by the connection handler\n * callback.\n *\n * @typedef {Object} Status\n * @property {connstatus} Status.ERROR - An error has occurred\n * @property {connstatus} Status.CONNECTING - The connection is currently being made\n * @property {connstatus} Status.CONNFAIL - The connection attempt failed\n * @property {connstatus} Status.AUTHENTICATING - The connection is authenticating\n * @property {connstatus} Status.AUTHFAIL - The authentication attempt failed\n * @property {connstatus} Status.CONNECTED - The connection has succeeded\n * @property {connstatus} Status.DISCONNECTED - The connection has been terminated\n * @property {connstatus} Status.DISCONNECTING - The connection is currently being terminated\n * @property {connstatus} Status.ATTACHED - The connection has been attached\n * @property {connstatus} Status.REDIRECT - The connection has been redirected\n * @property {connstatus} Status.CONNTIMEOUT - The connection has timed out\n * @property {connstatus} Status.BINDREQUIRED - The JID resource needs to be bound for this session\n * @property {connstatus} Status.ATTACHFAIL - Failed to attach to a pre-existing session\n * @property {connstatus} Status.RECONNECTING - Not used by Strophe, but added for integrators\n */\nexport const Status = {\n    ERROR: 0,\n    CONNECTING: 1,\n    CONNFAIL: 2,\n    AUTHENTICATING: 3,\n    AUTHFAIL: 4,\n    CONNECTED: 5,\n    DISCONNECTED: 6,\n    DISCONNECTING: 7,\n    ATTACHED: 8,\n    REDIRECT: 9,\n    CONNTIMEOUT: 10,\n    BINDREQUIRED: 11,\n    ATTACHFAIL: 12,\n    RECONNECTING: 13,\n};\n\nexport const ErrorCondition = {\n    BAD_FORMAT: 'bad-format',\n    CONFLICT: 'conflict',\n    MISSING_JID_NODE: 'x-strophe-bad-non-anon-jid',\n    NO_AUTH_MECH: 'no-auth-mech',\n    UNKNOWN_REASON: 'unknown',\n};\n\n/**\n * Logging level indicators.\n * @typedef {0|1|2|3|4} LogLevel\n * @typedef {'DEBUG'|'INFO'|'WARN'|'ERROR'|'FATAL'} LogLevelName\n * @typedef {Record<LogLevelName, LogLevel>} LogLevels\n */\nexport const LOG_LEVELS = {\n    DEBUG: 0,\n    INFO: 1,\n    WARN: 2,\n    ERROR: 3,\n    FATAL: 4,\n};\n\n/**\n * DOM element types.\n *\n * - ElementType.NORMAL - Normal element.\n * - ElementType.TEXT - Text data element.\n * - ElementType.FRAGMENT - XHTML fragment element.\n */\nexport const ElementType = {\n    NORMAL: 1,\n    TEXT: 3,\n    CDATA: 4,\n    FRAGMENT: 11,\n};\n", "/**\n * @typedef {import('./constants').LogLevel} LogLevel\n */\nimport { LOG_LEVELS } from './constants.js';\n\nlet logLevel = LOG_LEVELS.DEBUG;\n\nconst log = {\n    /**\n     * Library consumers can use this function to set the log level of Strophe.\n     * The default log level is Strophe.LogLevel.INFO.\n     * @param {LogLevel} level\n     * @example Strophe.setLogLevel(Strophe.LogLevel.DEBUG);\n     */\n    setLogLevel(level) {\n        if (level < LOG_LEVELS.DEBUG || level > LOG_LEVELS.FATAL) {\n            throw new Error(\"Invalid log level supplied to setLogLevel\");\n        }\n        logLevel = level;\n    },\n\n    /**\n     *\n     * Please note that data sent and received over the wire is logged\n     * via {@link Strophe.Connection#rawInput|Strophe.Connection.rawInput()}\n     * and {@link Strophe.Connection#rawOutput|Strophe.Connection.rawOutput()}.\n     *\n     * The different levels and their meanings are\n     *\n     *   DEBUG - Messages useful for debugging purposes.\n     *   INFO - Informational messages.  This is mostly information like\n     *     'disconnect was called' or 'SASL auth succeeded'.\n     *   WARN - Warnings about potential problems.  This is mostly used\n     *     to report transient connection errors like request timeouts.\n     *   ERROR - Some error occurred.\n     *   FATAL - A non-recoverable fatal error occurred.\n     *\n     * @param {number} level - The log level of the log message.\n     *     This will be one of the values in Strophe.LOG_LEVELS.\n     * @param {string} msg - The log message.\n     */\n    log(level, msg) {\n        if (level < logLevel) {\n            return;\n        }\n\n        if (level >= LOG_LEVELS.ERROR) {\n            console?.error(msg);\n        } else if (level === LOG_LEVELS.INFO) {\n            console?.info(msg);\n        } else if (level === LOG_LEVELS.WARN) {\n            console?.warn(msg);\n        } else if (level === LOG_LEVELS.DEBUG) {\n            console?.debug(msg);\n        }\n    },\n\n    /**\n     * Log a message at the Strophe.LOG_LEVELS.DEBUG level.\n     * @param {string} msg - The log message.\n     */\n    debug(msg) {\n        this.log(LOG_LEVELS.DEBUG, msg);\n    },\n\n    /**\n     * Log a message at the Strophe.LOG_LEVELS.INFO level.\n     * @param {string} msg - The log message.\n     */\n    info(msg) {\n        this.log(LOG_LEVELS.INFO, msg);\n    },\n\n    /**\n     * Log a message at the Strophe.LOG_LEVELS.WARN level.\n     * @param {string} msg - The log message.\n     */\n    warn(msg) {\n        this.log(LOG_LEVELS.WARN, msg);\n    },\n\n    /**\n     * Log a message at the Strophe.LOG_LEVELS.ERROR level.\n     * @param {string} msg - The log message.\n     */\n    error(msg) {\n        this.log(LOG_LEVELS.ERROR, msg);\n    },\n\n    /**\n     * Log a message at the Strophe.LOG_LEVELS.FATAL level.\n     * @param {string} msg - The log message.\n     */\n    fatal(msg) {\n        this.log(LOG_LEVELS.FATAL, msg);\n    },\n};\n\nexport default log;\n", "import { ElementType, NS } from './constants.js';\nimport { copyElement, createHtml, xmlElement, xmlGenerator, xmlTextNode, xmlescape } from './utils.js';\n\n/**\n * Create a {@link Strophe.Builder}\n * This is an alias for `new Strophe.Builder(name, attrs)`.\n * @param {string} name - The root element name.\n * @param {Object.<string,string|number>} [attrs] - The attributes for the root element in object notation.\n * @return {Builder} A new Strophe.Builder object.\n */\nexport function $build(name, attrs) {\n    return new Builder(name, attrs);\n}\n\n/**\n * Create a {@link Strophe.Builder} with a `<message/>` element as the root.\n * @param {Object.<string,string>} [attrs] - The <message/> element attributes in object notation.\n * @return {Builder} A new Strophe.Builder object.\n */\nexport function $msg(attrs) {\n    return new Builder('message', attrs);\n}\n\n/**\n * Create a {@link Strophe.Builder} with an `<iq/>` element as the root.\n * @param {Object.<string,string>} [attrs] - The <iq/> element attributes in object notation.\n * @return {Builder} A new Strophe.Builder object.\n */\nexport function $iq(attrs) {\n    return new Builder('iq', attrs);\n}\n\n/**\n * Create a {@link Strophe.Builder} with a `<presence/>` element as the root.\n * @param {Object.<string,string>} [attrs] - The <presence/> element attributes in object notation.\n * @return {Builder} A new Strophe.Builder object.\n */\nexport function $pres(attrs) {\n    return new Builder('presence', attrs);\n}\n\n/**\n * This class provides an interface similar to JQuery but for building\n * DOM elements easily and rapidly.  All the functions except for `toString()`\n * and tree() return the object, so calls can be chained.\n *\n * The corresponding DOM manipulations to get a similar fragment would be\n * a lot more tedious and probably involve several helper variables.\n *\n * Since adding children makes new operations operate on the child, up()\n * is provided to traverse up the tree.  To add two children, do\n * > builder.c('child1', ...).up().c('child2', ...)\n *\n * The next operation on the Builder will be relative to the second child.\n *\n * @example\n *  // Here's an example using the $iq() builder helper.\n *  $iq({to: 'you', from: 'me', type: 'get', id: '1'})\n *      .c('query', {xmlns: 'strophe:example'})\n *      .c('example')\n *      .toString()\n *\n *  // The above generates this XML fragment\n *  //  <iq to='you' from='me' type='get' id='1'>\n *  //    <query xmlns='strophe:example'>\n *  //      <example/>\n *  //    </query>\n *  //  </iq>\n */\nclass Builder {\n    /**\n     * @typedef {Object.<string, string|number>} StanzaAttrs\n     * @property {string} [StanzaAttrs.xmlns]\n     */\n\n    /**\n     * The attributes should be passed in object notation.\n     * @param {string} name - The name of the root element.\n     * @param {StanzaAttrs} [attrs] - The attributes for the root element in object notation.\n     * @example const b = new Builder('message', {to: 'you', from: 'me'});\n     * @example const b = new Builder('messsage', {'xml:lang': 'en'});\n     */\n    constructor(name, attrs) {\n        // Set correct namespace for jabber:client elements\n        if (name === 'presence' || name === 'message' || name === 'iq') {\n            if (attrs && !attrs.xmlns) {\n                attrs.xmlns = NS.CLIENT;\n            } else if (!attrs) {\n                attrs = { xmlns: NS.CLIENT };\n            }\n        }\n        // Holds the tree being built.\n        this.nodeTree = xmlElement(name, attrs);\n        // Points to the current operation node.\n        this.node = this.nodeTree;\n    }\n\n    /**\n     * Render a DOM element and all descendants to a String.\n     * @param {Element|Builder} elem - A DOM element.\n     * @return {string} - The serialized element tree as a String.\n     */\n    static serialize(elem) {\n        if (!elem) return null;\n\n        const el = elem instanceof Builder ? elem.tree() : elem;\n\n        const names = [...Array(el.attributes.length).keys()].map((i) => el.attributes[i].nodeName);\n        names.sort();\n        let result = names.reduce(\n            (a, n) => `${a} ${n}=\"${xmlescape(el.attributes.getNamedItem(n).value)}\"`,\n            `<${el.nodeName}`\n        );\n\n        if (el.childNodes.length > 0) {\n            result += '>';\n            for (let i = 0; i < el.childNodes.length; i++) {\n                const child = el.childNodes[i];\n                switch (child.nodeType) {\n                    case ElementType.NORMAL:\n                        // normal element, so recurse\n                        result += Builder.serialize(/** @type {Element} */ (child));\n                        break;\n                    case ElementType.TEXT:\n                        // text element to escape values\n                        result += xmlescape(child.nodeValue);\n                        break;\n                    case ElementType.CDATA:\n                        // cdata section so don't escape values\n                        result += '<![CDATA[' + child.nodeValue + ']]>';\n                }\n            }\n            result += '</' + el.nodeName + '>';\n        } else {\n            result += '/>';\n        }\n        return result;\n    }\n\n    /**\n     * Return the DOM tree.\n     *\n     * This function returns the current DOM tree as an element object.  This\n     * is suitable for passing to functions like Strophe.Connection.send().\n     *\n     * @return {Element} The DOM tree as a element object.\n     */\n    tree() {\n        return this.nodeTree;\n    }\n\n    /**\n     * Serialize the DOM tree to a String.\n     *\n     * This function returns a string serialization of the current DOM\n     * tree.  It is often used internally to pass data to a\n     * Strophe.Request object.\n     *\n     * @return {string} The serialized DOM tree in a String.\n     */\n    toString() {\n        return Builder.serialize(this.nodeTree);\n    }\n\n    /**\n     * Make the current parent element the new current element.\n     * This function is often used after c() to traverse back up the tree.\n     *\n     * @example\n     *  // For example, to add two children to the same element\n     *  builder.c('child1', {}).up().c('child2', {});\n     *\n     * @return {Builder} The Strophe.Builder object.\n     */\n    up() {\n        // Depending on context, parentElement is not always available\n        this.node = this.node.parentElement ? this.node.parentElement : /** @type {Element} */ (this.node.parentNode);\n        return this;\n    }\n\n    /**\n     * Make the root element the new current element.\n     *\n     * When at a deeply nested element in the tree, this function can be used\n     * to jump back to the root of the tree, instead of having to repeatedly\n     * call up().\n     *\n     * @return {Builder} The Strophe.Builder object.\n     */\n    root() {\n        this.node = this.nodeTree;\n        return this;\n    }\n\n    /**\n     * Add or modify attributes of the current element.\n     *\n     * The attributes should be passed in object notation.\n     * This function does not move the current element pointer.\n     * @param {Object.<string, string|number|null>} moreattrs - The attributes to add/modify in object notation.\n     *  If an attribute is set to `null` or `undefined`, it will be removed.\n     * @return {Builder} The Strophe.Builder object.\n     */\n    attrs(moreattrs) {\n        for (const k in moreattrs) {\n            if (Object.prototype.hasOwnProperty.call(moreattrs, k)) {\n                // eslint-disable-next-line no-eq-null\n                if (moreattrs[k] != null) {\n                    this.node.setAttribute(k, moreattrs[k].toString());\n                } else {\n                    this.node.removeAttribute(k);\n                }\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Add a child to the current element and make it the new current\n     * element.\n     *\n     * This function moves the current element pointer to the child,\n     * unless text is provided.  If you need to add another child, it\n     * is necessary to use up() to go back to the parent in the tree.\n     *\n     * @param {string} name - The name of the child.\n     * @param {Object.<string, string>|string} [attrs] - The attributes of the child in object notation.\n     * @param {string} [text] - The text to add to the child.\n     *\n     * @return {Builder} The Strophe.Builder object.\n     */\n    c(name, attrs, text) {\n        const child = xmlElement(name, attrs, text);\n        this.node.appendChild(child);\n        if (typeof text !== 'string' && typeof text !== 'number') {\n            this.node = child;\n        }\n        return this;\n    }\n\n    /**\n     * Add a child to the current element and make it the new current\n     * element.\n     *\n     * This function is the same as c() except that instead of using a\n     * name and an attributes object to create the child it uses an\n     * existing DOM element object.\n     *\n     * @param {Element} elem - A DOM element.\n     * @return {Builder} The Strophe.Builder object.\n     */\n    cnode(elem) {\n        let impNode;\n        const xmlGen = xmlGenerator();\n        try {\n            impNode = xmlGen.importNode !== undefined;\n        } catch (e) {\n            impNode = false;\n        }\n\n        const newElem = impNode ? xmlGen.importNode(elem, true) : copyElement(elem);\n        this.node.appendChild(newElem);\n        this.node = /** @type {Element} */ (newElem);\n        return this;\n    }\n\n    /**\n     * Add a child text element.\n     *\n     * This *does not* make the child the new current element since there\n     * are no children of text elements.\n     *\n     * @param {string} text - The text data to append to the current element.\n     * @return {Builder} The Strophe.Builder object.\n     */\n    t(text) {\n        const child = xmlTextNode(text);\n        this.node.appendChild(child);\n        return this;\n    }\n\n    /**\n     * Replace current element contents with the HTML passed in.\n     *\n     * This *does not* make the child the new current element\n     *\n     * @param {string} html - The html to insert as contents of current element.\n     * @return {Builder} The Strophe.Builder object.\n     */\n    h(html) {\n        const fragment = xmlGenerator().createElement('body');\n        // force the browser to try and fix any invalid HTML tags\n        fragment.innerHTML = html;\n        // copy cleaned html into an xml dom\n        const xhtml = createHtml(fragment);\n        while (xhtml.childNodes.length > 0) {\n            this.node.appendChild(xhtml.childNodes[0]);\n        }\n        return this;\n    }\n}\n\nexport default Builder;\n", "import { DOMParser } from './shims';\nimport log from './log.js';\nimport Builder from './builder.js';\nimport { ErrorCondition } from './constants.js';\n\n/**\n * _Private_ variable that keeps track of the request ids for connections.\n */\nlet _requestId = 0;\n\n/**\n * Helper class that provides a cross implementation abstraction\n * for a BOSH related XMLHttpRequest.\n *\n * The Request class is used internally to encapsulate BOSH request\n * information.  It is not meant to be used from user's code.\n *\n * @property {number} id\n * @property {number} sends\n * @property {XMLHttpRequest} xhr\n */\nclass Request {\n    /**\n     * Create and initialize a new Request object.\n     *\n     * @param {Element} elem - The XML data to be sent in the request.\n     * @param {Function} func - The function that will be called when the\n     *     XMLHttpRequest readyState changes.\n     * @param {number} rid - The BOSH rid attribute associated with this request.\n     * @param {number} [sends=0] - The number of times this same request has been sent.\n     */\n    constructor(elem, func, rid, sends = 0) {\n        this.id = ++_requestId;\n        this.xmlData = elem;\n        this.data = Builder.serialize(elem);\n        // save original function in case we need to make a new request\n        // from this one.\n        this.origFunc = func;\n        this.func = func;\n        this.rid = rid;\n        this.date = NaN;\n        this.sends = sends;\n        this.abort = false;\n        this.dead = null;\n\n        this.age = () => (this.date ? (new Date().valueOf() - this.date.valueOf()) / 1000 : 0);\n        this.timeDead = () => (this.dead ? (new Date().valueOf() - this.dead.valueOf()) / 1000 : 0);\n        this.xhr = this._newXHR();\n    }\n\n    /**\n     * Get a response from the underlying XMLHttpRequest.\n     * This function attempts to get a response from the request and checks\n     * for errors.\n     * @throws \"parsererror\" - A parser error occured.\n     * @throws \"bad-format\" - The entity has sent XML that cannot be processed.\n     * @return {Element} - The DOM element tree of the response.\n     */\n    getResponse() {\n        let node = this.xhr.responseXML?.documentElement;\n        if (node) {\n            if (node.tagName === 'parsererror') {\n                log.error('invalid response received');\n                log.error('responseText: ' + this.xhr.responseText);\n                log.error('responseXML: ' + Builder.serialize(node));\n                throw new Error('parsererror');\n            }\n        } else if (this.xhr.responseText) {\n            // In Node (with xhr2) or React Native, we may get responseText but no responseXML.\n            // We can try to parse it manually.\n            log.debug('Got responseText but no responseXML; attempting to parse it with DOMParser...');\n            node = new DOMParser().parseFromString(this.xhr.responseText, 'application/xml').documentElement;\n\n            const parserError = node?.getElementsByTagName('parsererror').item(0);\n            if (!node || parserError) {\n                if (parserError) {\n                    log.error('invalid response received: ' + parserError.textContent);\n                    log.error('responseText: ' + this.xhr.responseText);\n                }\n                const error = new Error();\n                error.name = ErrorCondition.BAD_FORMAT;\n                throw error;\n            }\n        }\n        return node;\n    }\n\n    /**\n     * _Private_ helper function to create XMLHttpRequests.\n     * This function creates XMLHttpRequests across all implementations.\n     * @private\n     * @return {XMLHttpRequest}\n     */\n    _newXHR() {\n        const xhr = new XMLHttpRequest();\n        if (xhr.overrideMimeType) {\n            xhr.overrideMimeType('text/xml; charset=utf-8');\n        }\n        // use Function.bind() to prepend ourselves as an argument\n        xhr.onreadystatechange = this.func.bind(null, this);\n        return xhr;\n    }\n}\n\nexport default Request;\n", "/**\n * A JavaScript library to enable BOSH in Strophejs.\n *\n * this library uses Bidirectional-streams Over Synchronous HTTP (BOSH)\n * to emulate a persistent, stateful, two-way connection to an XMPP server.\n * More information on BOSH can be found in XEP 124.\n */\n\n/**\n * @typedef {import(\"./connection.js\").default} Connection\n */\nimport log from './log.js';\nimport Builder, { $build } from './builder.js';\nimport Request from './request.js';\nimport {getBareJidFromJid, getDomainFromJid, getNodeFromJid} from './utils.js';\nimport { Status, NS } from './constants.js';\n\nlet timeoutMultiplier = 1.1;\nlet secondaryTimeoutMultiplier = 0.1;\n\n/**\n * _Private_ helper class that handles BOSH Connections\n * The Bosh class is used internally by Connection\n * to encapsulate BOSH sessions. It is not meant to be used from user's code.\n */\nclass Bosh {\n    /**\n     * @param {Connection} connection - The Connection that will use BOSH.\n     */\n    constructor(connection) {\n        this._conn = connection;\n        /* request id for body tags */\n        this.rid = Math.floor(Math.random() * 4294967295);\n        /* The current session ID. */\n        this.sid = null;\n\n        // default BOSH values\n        this.hold = 1;\n        this.wait = 60;\n        this.window = 5;\n        this.errors = 0;\n        this.inactivity = null;\n\n        /**\n         * BOSH-Connections will have all stanzas wrapped in a <body> tag when\n         * passed to {@link Connection#xmlInput|xmlInput()} or {@link Connection#xmlOutput|xmlOutput()}.\n         * To strip this tag, User code can set {@link Bosh#strip|strip} to `true`:\n         *\n         * > // You can set `strip` on the prototype\n         * > Bosh.prototype.strip = true;\n         *\n         * > // Or you can set it on the Bosh instance (which is `._proto` on the connection instance.\n         * > const conn = new Connection();\n         * > conn._proto.strip = true;\n         *\n         * This will enable stripping of the body tag in both\n         * {@link Connection#xmlInput|xmlInput} and {@link Connection#xmlOutput|xmlOutput}.\n         *\n         * @property {boolean} [strip=false]\n         */\n        this.strip = Bosh.prototype.strip ?? false;\n\n        this.lastResponseHeaders = null;\n        /** @type {Request[]} */\n        this._requests = [];\n    }\n\n    /**\n     * @param {number} m\n     */\n    static setTimeoutMultiplier(m) {\n        timeoutMultiplier = m;\n    }\n\n    /**\n     * @returns {number}\n     */\n    static getTimeoutMultplier() {\n        return timeoutMultiplier;\n    }\n\n    /**\n     * @param {number} m\n     */\n    static setSecondaryTimeoutMultiplier(m) {\n        secondaryTimeoutMultiplier = m;\n    }\n\n    /**\n     * @returns {number}\n     */\n    static getSecondaryTimeoutMultplier() {\n        return secondaryTimeoutMultiplier;\n    }\n\n    /**\n     * _Private_ helper function to generate the <body/> wrapper for BOSH.\n     * @private\n     * @return {Builder} - A Builder with a <body/> element.\n     */\n    _buildBody() {\n        const bodyWrap = $build('body', {\n            'rid': this.rid++,\n            'xmlns': NS.HTTPBIND,\n        });\n        if (this.sid !== null) {\n            bodyWrap.attrs({ 'sid': this.sid });\n        }\n        if (this._conn.options.keepalive && this._conn._sessionCachingSupported()) {\n            this._cacheSession();\n        }\n        return bodyWrap;\n    }\n\n    /**\n     * Reset the connection.\n     * This function is called by the reset function of the Connection\n     */\n    _reset() {\n        this.rid = Math.floor(Math.random() * 4294967295);\n        this.sid = null;\n        this.errors = 0;\n        if (this._conn._sessionCachingSupported()) {\n            sessionStorage.removeItem('strophe-bosh-session');\n        }\n\n        this._conn.nextValidRid(this.rid);\n    }\n\n    /**\n     * _Private_ function that initializes the BOSH connection.\n     * Creates and sends the Request that initializes the BOSH connection.\n     * @param {number} wait - The optional HTTPBIND wait value.  This is the\n     *     time the server will wait before returning an empty result for\n     *     a request.  The default setting of 60 seconds is recommended.\n     *     Other settings will require tweaks to the Strophe.TIMEOUT value.\n     * @param {number} hold - The optional HTTPBIND hold value.  This is the\n     *     number of connections the server will hold at one time.  This\n     *     should almost always be set to 1 (the default).\n     * @param {string} route\n     */\n    _connect(wait, hold, route) {\n        this.wait = wait || this.wait;\n        this.hold = hold || this.hold;\n        this.errors = 0;\n\n        const body = this._buildBody().attrs({\n            'to': this._conn.domain,\n            'xml:lang': 'en',\n            'wait': this.wait,\n            'hold': this.hold,\n            'content': 'text/xml; charset=utf-8',\n            'ver': '1.6',\n            'xmpp:version': '1.0',\n            'xmlns:xmpp': NS.BOSH,\n        });\n        if (route) {\n            body.attrs({ route });\n        }\n\n        const _connect_cb = this._conn._connect_cb;\n        this._requests.push(\n            new Request(\n                body.tree(),\n                this._onRequestStateChange.bind(this, _connect_cb.bind(this._conn)),\n                Number(body.tree().getAttribute('rid'))\n            )\n        );\n        this._throttledRequestHandler();\n    }\n\n    /**\n     * Attach to an already created and authenticated BOSH session.\n     *\n     * This function is provided to allow Strophe to attach to BOSH\n     * sessions which have been created externally, perhaps by a Web\n     * application.  This is often used to support auto-login type features\n     * without putting user credentials into the page.\n     *\n     * @param {string} jid - The full JID that is bound by the session.\n     * @param {string} sid - The SID of the BOSH session.\n     * @param {number} rid - The current RID of the BOSH session.  This RID\n     *     will be used by the next request.\n     * @param {Function} callback The connect callback function.\n     * @param {number} wait - The optional HTTPBIND wait value.  This is the\n     *     time the server will wait before returning an empty result for\n     *     a request.  The default setting of 60 seconds is recommended.\n     *     Other settings will require tweaks to the Strophe.TIMEOUT value.\n     * @param {number} hold - The optional HTTPBIND hold value.  This is the\n     *     number of connections the server will hold at one time.  This\n     *     should almost always be set to 1 (the default).\n     * @param {number} wind - The optional HTTBIND window value.  This is the\n     *     allowed range of request ids that are valid.  The default is 5.\n     */\n    _attach(jid, sid, rid, callback, wait, hold, wind) {\n        this._conn.jid = jid;\n        this.sid = sid;\n        this.rid = rid;\n\n        this._conn.connect_callback = callback;\n        this._conn.domain = getDomainFromJid(this._conn.jid);\n        this._conn.authenticated = true;\n        this._conn.connected = true;\n\n        this.wait = wait || this.wait;\n        this.hold = hold || this.hold;\n        this.window = wind || this.window;\n\n        this._conn._changeConnectStatus(Status.ATTACHED, null);\n    }\n\n    /**\n     * Attempt to restore a cached BOSH session\n     *\n     * @param {string} jid - The full JID that is bound by the session.\n     *     This parameter is optional but recommended, specifically in cases\n     *     where prebinded BOSH sessions are used where it's important to know\n     *     that the right session is being restored.\n     * @param {Function} callback The connect callback function.\n     * @param {number} wait - The optional HTTPBIND wait value.  This is the\n     *     time the server will wait before returning an empty result for\n     *     a request.  The default setting of 60 seconds is recommended.\n     *     Other settings will require tweaks to the Strophe.TIMEOUT value.\n     * @param {number} hold - The optional HTTPBIND hold value.  This is the\n     *     number of connections the server will hold at one time.  This\n     *     should almost always be set to 1 (the default).\n     * @param {number} wind - The optional HTTBIND window value.  This is the\n     *     allowed range of request ids that are valid.  The default is 5.\n     */\n    _restore(jid, callback, wait, hold, wind) {\n        const session = JSON.parse(sessionStorage.getItem('strophe-bosh-session'));\n        if (\n            typeof session !== 'undefined' &&\n            session !== null &&\n            session.rid &&\n            session.sid &&\n            session.jid &&\n            (typeof jid === 'undefined' ||\n                jid === null ||\n                getBareJidFromJid(session.jid) === getBareJidFromJid(jid) ||\n                // If authcid is null, then it's an anonymous login, so\n                // we compare only the domains:\n                (getNodeFromJid(jid) === null && getDomainFromJid(session.jid) === jid))\n        ) {\n            this._conn.restored = true;\n            this._attach(session.jid, session.sid, session.rid, callback, wait, hold, wind);\n        } else {\n            const error = new Error('_restore: no restoreable session.');\n            error.name = 'StropheSessionError';\n            throw error;\n        }\n    }\n\n    /**\n     * _Private_ handler for the beforeunload event.\n     * This handler is used to process the Bosh-part of the initial request.\n     * @private\n     */\n    _cacheSession() {\n        if (this._conn.authenticated) {\n            if (this._conn.jid && this.rid && this.sid) {\n                sessionStorage.setItem(\n                    'strophe-bosh-session',\n                    JSON.stringify({\n                        'jid': this._conn.jid,\n                        'rid': this.rid,\n                        'sid': this.sid,\n                    })\n                );\n            }\n        } else {\n            sessionStorage.removeItem('strophe-bosh-session');\n        }\n    }\n\n    /**\n     * _Private_ handler for initial connection request.\n     * This handler is used to process the Bosh-part of the initial request.\n     * @param {Element} bodyWrap - The received stanza.\n     */\n    _connect_cb(bodyWrap) {\n        const typ = bodyWrap.getAttribute('type');\n        if (typ !== null && typ === 'terminate') {\n            // an error occurred\n            let cond = bodyWrap.getAttribute('condition');\n            log.error('BOSH-Connection failed: ' + cond);\n            const conflict = bodyWrap.getElementsByTagName('conflict');\n            if (cond !== null) {\n                if (cond === 'remote-stream-error' && conflict.length > 0) {\n                    cond = 'conflict';\n                }\n                this._conn._changeConnectStatus(Status.CONNFAIL, cond);\n            } else {\n                this._conn._changeConnectStatus(Status.CONNFAIL, 'unknown');\n            }\n            this._conn._doDisconnect(cond);\n            return Status.CONNFAIL;\n        }\n\n        // check to make sure we don't overwrite these if _connect_cb is\n        // called multiple times in the case of missing stream:features\n        if (!this.sid) {\n            this.sid = bodyWrap.getAttribute('sid');\n        }\n        const wind = bodyWrap.getAttribute('requests');\n        if (wind) {\n            this.window = parseInt(wind, 10);\n        }\n        const hold = bodyWrap.getAttribute('hold');\n        if (hold) {\n            this.hold = parseInt(hold, 10);\n        }\n        const wait = bodyWrap.getAttribute('wait');\n        if (wait) {\n            this.wait = parseInt(wait, 10);\n        }\n        const inactivity = bodyWrap.getAttribute('inactivity');\n        if (inactivity) {\n            this.inactivity = parseInt(inactivity, 10);\n        }\n    }\n\n    /**\n     * _Private_ part of Connection.disconnect for Bosh\n     * @param {Element|Builder} pres - This stanza will be sent before disconnecting.\n     */\n    _disconnect(pres) {\n        this._sendTerminate(pres);\n    }\n\n    /**\n     * _Private_ function to disconnect.\n     * Resets the SID and RID.\n     */\n    _doDisconnect() {\n        this.sid = null;\n        this.rid = Math.floor(Math.random() * 4294967295);\n        if (this._conn._sessionCachingSupported()) {\n            sessionStorage.removeItem('strophe-bosh-session');\n        }\n\n        this._conn.nextValidRid(this.rid);\n    }\n\n    /**\n     * _Private_ function to check if the Request queue is empty.\n     * @return {boolean} - True, if there are no Requests queued, False otherwise.\n     */\n    _emptyQueue() {\n        return this._requests.length === 0;\n    }\n\n    /**\n     * _Private_ function to call error handlers registered for HTTP errors.\n     * @private\n     * @param {Request} req - The request that is changing readyState.\n     */\n    _callProtocolErrorHandlers(req) {\n        const reqStatus = Bosh._getRequestStatus(req);\n        const err_callback = this._conn.protocolErrorHandlers.HTTP[reqStatus];\n        if (err_callback) {\n            err_callback.call(this, reqStatus);\n        }\n    }\n\n    /**\n     * _Private_ function to handle the error count.\n     *\n     * Requests are resent automatically until their error count reaches\n     * 5.  Each time an error is encountered, this function is called to\n     * increment the count and disconnect if the count is too high.\n     * @private\n     * @param {number} reqStatus - The request status.\n     */\n    _hitError(reqStatus) {\n        this.errors++;\n        log.warn('request errored, status: ' + reqStatus + ', number of errors: ' + this.errors);\n        if (this.errors > 4) {\n            this._conn._onDisconnectTimeout();\n        }\n    }\n\n    /**\n     * @callback connectionCallback\n     * @param {Connection} connection\n     */\n\n    /**\n     * Called on stream start/restart when no stream:features\n     * has been received and sends a blank poll request.\n     * @param {connectionCallback} callback\n     */\n    _no_auth_received(callback) {\n        log.warn(\n            'Server did not yet offer a supported authentication ' + 'mechanism. Sending a blank poll request.'\n        );\n        if (callback) {\n            callback = callback.bind(this._conn);\n        } else {\n            callback = this._conn._connect_cb.bind(this._conn);\n        }\n        const body = this._buildBody();\n        this._requests.push(\n            new Request(\n                body.tree(),\n                this._onRequestStateChange.bind(this, callback),\n                Number(body.tree().getAttribute('rid'))\n            )\n        );\n        this._throttledRequestHandler();\n    }\n\n    /**\n     * _Private_ timeout handler for handling non-graceful disconnection.\n     * Cancels all remaining Requests and clears the queue.\n     */\n    _onDisconnectTimeout() {\n        this._abortAllRequests();\n    }\n\n    /**\n     * _Private_ helper function that makes sure all pending requests are aborted.\n     */\n    _abortAllRequests() {\n        while (this._requests.length > 0) {\n            const req = this._requests.pop();\n            req.abort = true;\n            req.xhr.abort();\n            req.xhr.onreadystatechange = function () {};\n        }\n    }\n\n    /**\n     * _Private_ handler called by {@link Connection#_onIdle|Connection._onIdle()}.\n     * Sends all queued Requests or polls with empty Request if there are none.\n     */\n    _onIdle() {\n        const data = this._conn._data;\n        // if no requests are in progress, poll\n        if (this._conn.authenticated && this._requests.length === 0 && data.length === 0 && !this._conn.disconnecting) {\n            log.debug('no requests during idle cycle, sending blank request');\n            data.push(null);\n        }\n\n        if (this._conn.paused) {\n            return;\n        }\n\n        if (this._requests.length < 2 && data.length > 0) {\n            const body = this._buildBody();\n            for (let i = 0; i < data.length; i++) {\n                if (data[i] !== null) {\n                    if (data[i] === 'restart') {\n                        body.attrs({\n                            'to': this._conn.domain,\n                            'xml:lang': 'en',\n                            'xmpp:restart': 'true',\n                            'xmlns:xmpp': NS.BOSH,\n                        });\n                    } else {\n                        body.cnode(/** @type {Element} */ (data[i])).up();\n                    }\n                }\n            }\n            delete this._conn._data;\n            this._conn._data = [];\n            this._requests.push(\n                new Request(\n                    body.tree(),\n                    this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)),\n                    Number(body.tree().getAttribute('rid'))\n                )\n            );\n            this._throttledRequestHandler();\n        }\n\n        if (this._requests.length > 0) {\n            const time_elapsed = this._requests[0].age();\n            if (this._requests[0].dead !== null) {\n                if (this._requests[0].timeDead() > Math.floor(timeoutMultiplier * this.wait)) {\n                    this._throttledRequestHandler();\n                }\n            }\n            if (time_elapsed > Math.floor(timeoutMultiplier * this.wait)) {\n                log.warn(\n                    'Request ' +\n                        this._requests[0].id +\n                        ' timed out, over ' +\n                        Math.floor(timeoutMultiplier * this.wait) +\n                        ' seconds since last activity'\n                );\n                this._throttledRequestHandler();\n            }\n        }\n    }\n\n    /**\n     * Returns the HTTP status code from a {@link Request}\n     * @private\n     * @param {Request} req - The {@link Request} instance.\n     * @param {number} [def] - The default value that should be returned if no status value was found.\n     */\n    static _getRequestStatus(req, def) {\n        let reqStatus;\n        if (req.xhr.readyState === 4) {\n            try {\n                reqStatus = req.xhr.status;\n            } catch (e) {\n                // ignore errors from undefined status attribute. Works\n                // around a browser bug\n                log.error(\"Caught an error while retrieving a request's status, \" + 'reqStatus: ' + reqStatus);\n            }\n        }\n        if (typeof reqStatus === 'undefined') {\n            reqStatus = typeof def === 'number' ? def : 0;\n        }\n        return reqStatus;\n    }\n\n    /**\n     * _Private_ handler for {@link Request} state changes.\n     *\n     * This function is called when the XMLHttpRequest readyState changes.\n     * It contains a lot of error handling logic for the many ways that\n     * requests can fail, and calls the request callback when requests\n     * succeed.\n     * @private\n     *\n     * @param {Function} func - The handler for the request.\n     * @param {Request} req - The request that is changing readyState.\n     */\n    _onRequestStateChange(func, req) {\n        log.debug('request id ' + req.id + '.' + req.sends + ' state changed to ' + req.xhr.readyState);\n        if (req.abort) {\n            req.abort = false;\n            return;\n        }\n        if (req.xhr.readyState !== 4) {\n            // The request is not yet complete\n            return;\n        }\n        const reqStatus = Bosh._getRequestStatus(req);\n        this.lastResponseHeaders = req.xhr.getAllResponseHeaders();\n        if (this._conn.disconnecting && reqStatus >= 400) {\n            this._hitError(reqStatus);\n            this._callProtocolErrorHandlers(req);\n            return;\n        }\n\n        const reqIs0 = this._requests[0] === req;\n        const reqIs1 = this._requests[1] === req;\n\n        const valid_request = reqStatus > 0 && reqStatus < 500;\n        const too_many_retries = req.sends > this._conn.maxRetries;\n        if (valid_request || too_many_retries) {\n            // remove from internal queue\n            this._removeRequest(req);\n            log.debug('request id ' + req.id + ' should now be removed');\n        }\n\n        if (reqStatus === 200) {\n            // request succeeded\n            // if request 1 finished, or request 0 finished and request\n            // 1 is over _TIMEOUT seconds old, we need to\n            // restart the other - both will be in the first spot, as the\n            // completed request has been removed from the queue already\n            if (\n                reqIs1 ||\n                (reqIs0 &&\n                    this._requests.length > 0 &&\n                    this._requests[0].age() > Math.floor(timeoutMultiplier * this.wait))\n            ) {\n                this._restartRequest(0);\n            }\n            this._conn.nextValidRid(req.rid + 1);\n            log.debug('request id ' + req.id + '.' + req.sends + ' got 200');\n            func(req); // call handler\n            this.errors = 0;\n        } else if (reqStatus === 0 || (reqStatus >= 400 && reqStatus < 600) || reqStatus >= 12000) {\n            // request failed\n            log.error('request id ' + req.id + '.' + req.sends + ' error ' + reqStatus + ' happened');\n            this._hitError(reqStatus);\n            this._callProtocolErrorHandlers(req);\n            if (reqStatus >= 400 && reqStatus < 500) {\n                this._conn._changeConnectStatus(Status.DISCONNECTING, null);\n                this._conn._doDisconnect();\n            }\n        } else {\n            log.error('request id ' + req.id + '.' + req.sends + ' error ' + reqStatus + ' happened');\n        }\n\n        if (!valid_request && !too_many_retries) {\n            this._throttledRequestHandler();\n        } else if (too_many_retries && !this._conn.connected) {\n            this._conn._changeConnectStatus(Status.CONNFAIL, 'giving-up');\n        }\n    }\n\n    /**\n     * _Private_ function to process a request in the queue.\n     *\n     * This function takes requests off the queue and sends them and\n     * restarts dead requests.\n     * @private\n     *\n     * @param {number} i - The index of the request in the queue.\n     */\n    _processRequest(i) {\n        let req = this._requests[i];\n        const reqStatus = Bosh._getRequestStatus(req, -1);\n\n        // make sure we limit the number of retries\n        if (req.sends > this._conn.maxRetries) {\n            this._conn._onDisconnectTimeout();\n            return;\n        }\n        const time_elapsed = req.age();\n        const primary_timeout = !isNaN(time_elapsed) && time_elapsed > Math.floor(timeoutMultiplier * this.wait);\n        const secondary_timeout =\n            req.dead !== null && req.timeDead() > Math.floor(secondaryTimeoutMultiplier * this.wait);\n        const server_error = req.xhr.readyState === 4 && (reqStatus < 1 || reqStatus >= 500);\n\n        if (primary_timeout || secondary_timeout || server_error) {\n            if (secondary_timeout) {\n                log.error(`Request ${this._requests[i].id} timed out (secondary), restarting`);\n            }\n            req.abort = true;\n            req.xhr.abort();\n            // setting to null fails on IE6, so set to empty function\n            req.xhr.onreadystatechange = function () {};\n            this._requests[i] = new Request(req.xmlData, req.origFunc, req.rid, req.sends);\n            req = this._requests[i];\n        }\n\n        if (req.xhr.readyState === 0) {\n            log.debug('request id ' + req.id + '.' + req.sends + ' posting');\n\n            try {\n                const content_type = this._conn.options.contentType || 'text/xml; charset=utf-8';\n                req.xhr.open('POST', this._conn.service, this._conn.options.sync ? false : true);\n                if (typeof req.xhr.setRequestHeader !== 'undefined') {\n                    // IE9 doesn't have setRequestHeader\n                    req.xhr.setRequestHeader('Content-Type', content_type);\n                }\n                if (this._conn.options.withCredentials) {\n                    req.xhr.withCredentials = true;\n                }\n            } catch (e2) {\n                log.error('XHR open failed: ' + e2.toString());\n                if (!this._conn.connected) {\n                    this._conn._changeConnectStatus(Status.CONNFAIL, 'bad-service');\n                }\n                this._conn.disconnect();\n                return;\n            }\n\n            // Fires the XHR request -- may be invoked immediately\n            // or on a gradually expanding retry window for reconnects\n            const sendFunc = () => {\n                req.date = new Date().valueOf();\n                if (this._conn.options.customHeaders) {\n                    const headers = this._conn.options.customHeaders;\n                    for (const header in headers) {\n                        if (Object.prototype.hasOwnProperty.call(headers, header)) {\n                            req.xhr.setRequestHeader(header, headers[header]);\n                        }\n                    }\n                }\n                req.xhr.send(req.data);\n            };\n\n            // Implement progressive backoff for reconnects --\n            // First retry (send === 1) should also be instantaneous\n            if (req.sends > 1) {\n                // Using a cube of the retry number creates a nicely\n                // expanding retry window\n                const backoff = Math.min(Math.floor(timeoutMultiplier * this.wait), Math.pow(req.sends, 3)) * 1000;\n                setTimeout(function () {\n                    // XXX: setTimeout should be called only with function expressions (23974bc1)\n                    sendFunc();\n                }, backoff);\n            } else {\n                sendFunc();\n            }\n\n            req.sends++;\n\n            if (this.strip && req.xmlData.nodeName === 'body' && req.xmlData.childNodes.length) {\n                this._conn.xmlOutput?.(req.xmlData.children[0]);\n            } else {\n                this._conn.xmlOutput?.(req.xmlData);\n            }\n            this._conn.rawOutput?.(req.data);\n        } else {\n            log.debug(\n                '_processRequest: ' +\n                    (i === 0 ? 'first' : 'second') +\n                    ' request has readyState of ' +\n                    req.xhr.readyState\n            );\n        }\n    }\n\n    /**\n     * _Private_ function to remove a request from the queue.\n     * @private\n     * @param {Request} req - The request to remove.\n     */\n    _removeRequest(req) {\n        log.debug('removing request');\n        for (let i = this._requests.length - 1; i >= 0; i--) {\n            if (req === this._requests[i]) {\n                this._requests.splice(i, 1);\n            }\n        }\n        // IE6 fails on setting to null, so set to empty function\n        req.xhr.onreadystatechange = function () {};\n        this._throttledRequestHandler();\n    }\n\n    /**\n     * _Private_ function to restart a request that is presumed dead.\n     * @private\n     *\n     * @param {number} i - The index of the request in the queue.\n     */\n    _restartRequest(i) {\n        const req = this._requests[i];\n        if (req.dead === null) {\n            req.dead = new Date();\n        }\n        this._processRequest(i);\n    }\n\n    /**\n     * _Private_ function to get a stanza out of a request.\n     * Tries to extract a stanza out of a Request Object.\n     * When this fails the current connection will be disconnected.\n     *\n     * @param {Request} req - The Request.\n     * @return {Element} - The stanza that was passed.\n     */\n    _reqToData(req) {\n        try {\n            return req.getResponse();\n        } catch (e) {\n            if (e.message !== 'parsererror') {\n                throw e;\n            }\n            this._conn.disconnect('strophe-parsererror');\n        }\n    }\n\n    /**\n     * _Private_ function to send initial disconnect sequence.\n     *\n     * This is the first step in a graceful disconnect.  It sends\n     * the BOSH server a terminate body and includes an unavailable\n     * presence if authentication has completed.\n     * @private\n     * @param {Element|Builder} [pres]\n     */\n    _sendTerminate(pres) {\n        log.debug('_sendTerminate was called');\n        const body = this._buildBody().attrs({ type: 'terminate' });\n\n        const el = pres instanceof Builder ? pres.tree() : pres;\n\n        if (pres) {\n            body.cnode(el);\n        }\n        const req = new Request(\n            body.tree(),\n            this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)),\n            Number(body.tree().getAttribute('rid'))\n        );\n        this._requests.push(req);\n        this._throttledRequestHandler();\n    }\n\n    /**\n     * _Private_ part of the Connection.send function for BOSH\n     * Just triggers the RequestHandler to send the messages that are in the queue\n     */\n    _send() {\n        clearTimeout(this._conn._idleTimeout);\n        this._throttledRequestHandler();\n        this._conn._idleTimeout = setTimeout(() => this._conn._onIdle(), 100);\n    }\n\n    /**\n     * Send an xmpp:restart stanza.\n     */\n    _sendRestart() {\n        this._throttledRequestHandler();\n        clearTimeout(this._conn._idleTimeout);\n    }\n\n    /**\n     * _Private_ function to throttle requests to the connection window.\n     *\n     * This function makes sure we don't send requests so fast that the\n     * request ids overflow the connection window in the case that one\n     * request died.\n     * @private\n     */\n    _throttledRequestHandler() {\n        if (!this._requests) {\n            log.debug('_throttledRequestHandler called with ' + 'undefined requests');\n        } else {\n            log.debug('_throttledRequestHandler called with ' + this._requests.length + ' requests');\n        }\n\n        if (!this._requests || this._requests.length === 0) {\n            return;\n        }\n\n        if (this._requests.length > 0) {\n            this._processRequest(0);\n        }\n\n        if (this._requests.length > 1 && Math.abs(this._requests[0].rid - this._requests[1].rid) < this.window) {\n            this._processRequest(1);\n        }\n    }\n}\n\nexport default Bosh;\n", "import { atob, btoa } from 'abab';\nimport Handler from './handler.js';\nimport TimedHandler from './timed-handler.js';\nimport Builder, { $build, $iq, $pres } from './builder.js';\nimport log from './log.js';\nimport { ErrorCondition, NS, Status } from './constants.js';\nimport SASLAnonymous from './sasl-anon.js';\nimport SASLExternal from './sasl-external.js';\nimport SASLOAuthBearer from './sasl-oauthbearer.js';\nimport SASLPlain from './sasl-plain.js';\nimport SASLSHA1 from './sasl-sha1.js';\nimport SASLSHA256 from './sasl-sha256.js';\nimport SASLSHA384 from './sasl-sha384.js';\nimport SASLSHA512 from './sasl-sha512.js';\nimport SASLXOAuth2 from './sasl-xoauth2.js';\nimport {\n    addCookies,\n    forEachChild,\n    getBareJidFromJid,\n    getDomainFromJid,\n    getNodeFromJid,\n    getResourceFromJid,\n    getText,\n    handleError,\n} from './utils.js';\nimport { SessionError } from './errors.js';\nimport Bosh from './bosh.js';\nimport WorkerWebsocket from './worker-websocket.js';\nimport Websocket from './websocket.js';\n\n/**\n * _Private_ variable Used to store plugin names that need\n * initialization during Connection construction.\n * @type {Object.<string, Object>}\n */\nconst connectionPlugins = {};\n\n/**\n * @typedef {import(\"./sasl.js\").default} SASLMechanism\n * @typedef {import(\"./request.js\").default} Request\n */\n\n/**\n * **XMPP Connection manager**\n *\n * This class is the main part of Strophe.  It manages a BOSH or websocket\n * connection to an XMPP server and dispatches events to the user callbacks\n * as data arrives.\n *\n * It supports various authentication mechanisms (e.g. SASL PLAIN, SASL SCRAM),\n * and more can be added via\n * {@link Connection#registerSASLMechanisms|registerSASLMechanisms()}.\n *\n * After creating a Connection object, the user will typically\n * call {@link Connection#connect|connect()} with a user supplied callback\n * to handle connection level events like authentication failure,\n * disconnection, or connection complete.\n *\n * The user will also have several event handlers defined by using\n * {@link Connection#addHandler|addHandler()} and\n * {@link Connection#addTimedHandler|addTimedHandler()}.\n * These will allow the user code to respond to interesting stanzas or do\n * something periodically with the connection. These handlers will be active\n * once authentication is finished.\n *\n * To send data to the connection, use {@link Connection#send|send()}.\n *\n * @memberof Strophe\n */\nclass Connection {\n    /**\n     * @typedef {Object.<string, string>} Cookie\n     * @typedef {Cookie|Object.<string, Cookie>} Cookies\n     */\n\n    /**\n     * @typedef {Object} ConnectionOptions\n     * @property {Cookies} [cookies]\n     *  Allows you to pass in cookies that will be included in HTTP requests.\n     *  Relevant to both the BOSH and Websocket transports.\n     *\n     *  The passed in value must be a map of cookie names and string values.\n     *\n     *  > { \"myCookie\": {\n     *  >     \"value\": \"1234\",\n     *  >     \"domain\": \".example.org\",\n     *  >     \"path\": \"/\",\n     *  >     \"expires\": expirationDate\n     *  >     }\n     *  > }\n     *\n     *  Note that cookies can't be set in this way for domains other than the one\n     *  that's hosting Strophe (i.e. cross-domain).\n     *  Those cookies need to be set under those domains, for example they can be\n     *  set server-side by making a XHR call to that domain to ask it to set any\n     *  necessary cookies.\n     * @property {SASLMechanism[]} [mechanisms]\n     *  Allows you to specify the SASL authentication mechanisms that this\n     *  instance of Connection (and therefore your XMPP client) will support.\n     *\n     *  The value must be an array of objects with {@link SASLMechanism}\n     *  prototypes.\n     *\n     *  If nothing is specified, then the following mechanisms (and their\n     *  priorities) are registered:\n     *\n     *      Mechanism       Priority\n     *      ------------------------\n     *      SCRAM-SHA-512   72\n     *      SCRAM-SHA-384   71\n     *      SCRAM-SHA-256   70\n     *      SCRAM-SHA-1     60\n     *      PLAIN           50\n     *      OAUTHBEARER     40\n     *      X-OAUTH2        30\n     *      ANONYMOUS       20\n     *      EXTERNAL        10\n     *\n     * @property {boolean} [explicitResourceBinding]\n     *  If `explicitResourceBinding` is set to `true`, then the XMPP client\n     *  needs to explicitly call {@link Connection.bind} once the XMPP\n     *  server has advertised the `urn:ietf:propertys:xml:ns:xmpp-bind` feature.\n     *\n     *  Making this step explicit allows client authors to first finish other\n     *  stream related tasks, such as setting up an XEP-0198 Stream Management\n     *  session, before binding the JID resource for this session.\n     *\n     * @property {'ws'|'wss'} [protocol]\n     *  _Note: This option is only relevant to Websocket connections, and not BOSH_\n     *\n     *  If you want to connect to the current host with a WebSocket connection you\n     *  can tell Strophe to use WebSockets through the \"protocol\" option.\n     *  Valid values are `ws` for WebSocket and `wss` for Secure WebSocket.\n     *  So to connect to \"wss://CURRENT_HOSTNAME/xmpp-websocket\" you would call\n     *\n     *      const conn = new Strophe.Connection(\n     *          \"/xmpp-websocket/\",\n     *          {protocol: \"wss\"}\n     *      );\n     *\n     *  Note that relative URLs _NOT_ starting with a \"/\" will also include the path\n     *  of the current site.\n     *\n     *  Also because downgrading security is not permitted by browsers, when using\n     *  relative URLs both BOSH and WebSocket connections will use their secure\n     *  variants if the current connection to the site is also secure (https).\n     *\n     * @property {string} [worker]\n     *  _Note: This option is only relevant to Websocket connections, and not BOSH_\n     *\n     *  Set this option to URL from where the shared worker script should be loaded.\n     *\n     *  To run the websocket connection inside a shared worker.\n     *  This allows you to share a single websocket-based connection between\n     *  multiple Connection instances, for example one per browser tab.\n     *\n     *  The script to use is the one in `src/shared-connection-worker.js`.\n     *\n     * @property {boolean} [sync]\n     *  Used to control whether BOSH HTTP requests will be made synchronously or not.\n     *  The default behaviour is asynchronous. If you want to make requests\n     *  synchronous, make \"sync\" evaluate to true.\n     *\n     *  > const conn = new Strophe.Connection(\"/http-bind/\", {sync: true});\n     *\n     *  You can also toggle this on an already established connection.\n     *\n     *  > conn.options.sync = true;\n     *\n     * @property {string[]} [customHeaders]\n     *  Used to provide custom HTTP headers to be included in the BOSH HTTP requests.\n     *\n     * @property {boolean} [keepalive]\n     *  Used to instruct Strophe to maintain the current BOSH session across\n     *  interruptions such as webpage reloads.\n     *\n     *  It will do this by caching the sessions tokens in sessionStorage, and when\n     *  \"restore\" is called it will check whether there are cached tokens with\n     *  which it can resume an existing session.\n     *\n     * @property {boolean} [withCredentials]\n     *  Used to indicate wether cookies should be included in HTTP requests (by default\n     *  they're not).\n     *  Set this value to `true` if you are connecting to a BOSH service\n     *  and for some reason need to send cookies to it.\n     *  In order for this to work cross-domain, the server must also enable\n     *  credentials by setting the `Access-Control-Allow-Credentials` response header\n     *  to \"true\". For most usecases however this setting should be false (which\n     *  is the default).\n     *  Additionally, when using `Access-Control-Allow-Credentials`, the\n     *  `Access-Control-Allow-Origin` header can't be set to the wildcard \"*\", but\n     *  instead must be restricted to actual domains.\n     *\n     * @property {string} [contentType]\n     *  Used to change the default Content-Type, which is \"text/xml; charset=utf-8\".\n     *  Can be useful to reduce the amount of CORS preflight requests that are sent\n     *  to the server.\n     */\n\n    /**\n     * Create and initialize a {@link Connection} object.\n     *\n     * The transport-protocol for this connection will be chosen automatically\n     * based on the given service parameter. URLs starting with \"ws://\" or\n     * \"wss://\" will use WebSockets, URLs starting with \"http://\", \"https://\"\n     * or without a protocol will use [BOSH](https://xmpp.org/extensions/xep-0124.html).\n     *\n     * To make Strophe connect to the current host you can leave out the protocol\n     * and host part and just pass the path:\n     *\n     *  const conn = new Strophe.Connection(\"/http-bind/\");\n     *\n     * @param {string} service - The BOSH or WebSocket service URL.\n     * @param {ConnectionOptions} options - A object containing configuration options\n     */\n    constructor(service, options = {}) {\n        // The service URL\n        this.service = service;\n        // Configuration options\n        this.options = options;\n\n        this.setProtocol();\n\n        /* The connected JID. */\n        this.jid = '';\n        /* the JIDs domain */\n        this.domain = null;\n        /* stream:features */\n        this.features = null;\n\n        // SASL\n        /**\n         * @typedef {Object.<string, any>} SASLData\n         * @property {Object} [SASLData.keys]\n         */\n\n        /** @type {SASLData} */\n        this._sasl_data = {};\n        this.do_bind = false;\n        this.do_session = false;\n\n        /** @type {Object.<string, SASLMechanism>} */\n        this.mechanisms = {};\n\n        /** @type {TimedHandler[]} */\n        this.timedHandlers = [];\n\n        /** @type {Handler[]} */\n        this.handlers = [];\n\n        /** @type {TimedHandler[]} */\n        this.removeTimeds = [];\n\n        /** @type {Handler[]} */\n        this.removeHandlers = [];\n\n        /** @type {TimedHandler[]} */\n        this.addTimeds = [];\n\n        /** @type {Handler[]} */\n        this.addHandlers = [];\n\n        this.protocolErrorHandlers = {\n            /** @type {Object.<number, Function>} */\n            'HTTP': {},\n            /** @type {Object.<number, Function>} */\n            'websocket': {},\n        };\n\n        this._idleTimeout = null;\n        this._disconnectTimeout = null;\n\n        this.authenticated = false;\n        this.connected = false;\n        this.disconnecting = false;\n        this.do_authentication = true;\n        this.paused = false;\n        this.restored = false;\n\n        /** @type {(Element|'restart')[]} */\n        this._data = [];\n        this._uniqueId = 0;\n\n        this._sasl_success_handler = null;\n        this._sasl_failure_handler = null;\n        this._sasl_challenge_handler = null;\n\n        // Max retries before disconnecting\n        this.maxRetries = 5;\n\n        // Call onIdle callback every 1/10th of a second\n        this._idleTimeout = setTimeout(() => this._onIdle(), 100);\n\n        addCookies(this.options.cookies);\n        this.registerSASLMechanisms(this.options.mechanisms);\n\n        // A client must always respond to incoming IQ \"set\" and \"get\" stanzas.\n        // See https://datatracker.ietf.org/doc/html/rfc6120#section-8.2.3\n        //\n        // This is a fallback handler which gets called when no other handler\n        // was called for a received IQ \"set\" or \"get\".\n        this.iqFallbackHandler = new Handler(\n            /**\n             * @param {Element} iq\n             */\n            (iq) =>\n                this.send(\n                    $iq({ type: 'error', id: iq.getAttribute('id') })\n                        .c('error', { 'type': 'cancel' })\n                        .c('service-unavailable', { 'xmlns': NS.STANZAS })\n                ),\n            null,\n            'iq',\n            ['get', 'set']\n        );\n\n        // initialize plugins\n        for (const k in connectionPlugins) {\n            if (Object.prototype.hasOwnProperty.call(connectionPlugins, k)) {\n                const F = function () {};\n                F.prototype = connectionPlugins[k];\n                // @ts-ignore\n                this[k] = new F();\n                // @ts-ignore\n                this[k].init(this);\n            }\n        }\n    }\n\n    /**\n     * Extends the Connection object with the given plugin.\n     * @param {string} name - The name of the extension.\n     * @param {Object} ptype - The plugin's prototype.\n     */\n    static addConnectionPlugin(name, ptype) {\n        connectionPlugins[name] = ptype;\n    }\n\n    /**\n     * Select protocal based on this.options or this.service\n     */\n    setProtocol() {\n        const proto = this.options.protocol || '';\n        if (this.options.worker) {\n            this._proto = new WorkerWebsocket(this);\n        } else if (\n            this.service.indexOf('ws:') === 0 ||\n            this.service.indexOf('wss:') === 0 ||\n            proto.indexOf('ws') === 0\n        ) {\n            this._proto = new Websocket(this);\n        } else {\n            this._proto = new Bosh(this);\n        }\n    }\n\n    /**\n     * Reset the connection.\n     *\n     * This function should be called after a connection is disconnected\n     * before that connection is reused.\n     */\n    reset() {\n        this._proto._reset();\n\n        // SASL\n        this.do_session = false;\n        this.do_bind = false;\n\n        // handler lists\n        this.timedHandlers = [];\n        this.handlers = [];\n        this.removeTimeds = [];\n        this.removeHandlers = [];\n        this.addTimeds = [];\n        this.addHandlers = [];\n\n        this.authenticated = false;\n        this.connected = false;\n        this.disconnecting = false;\n        this.restored = false;\n        this._data = [];\n        /** @type {Request[]} */\n        this._requests = [];\n        this._uniqueId = 0;\n    }\n\n    /**\n     * Pause the request manager.\n     *\n     * This will prevent Strophe from sending any more requests to the\n     * server.  This is very useful for temporarily pausing\n     * BOSH-Connections while a lot of send() calls are happening quickly.\n     * This causes Strophe to send the data in a single request, saving\n     * many request trips.\n     */\n    pause() {\n        this.paused = true;\n    }\n\n    /**\n     * Resume the request manager.\n     *\n     * This resumes after pause() has been called.\n     */\n    resume() {\n        this.paused = false;\n    }\n\n    /**\n     * Generate a unique ID for use in <iq/> elements.\n     *\n     * All <iq/> stanzas are required to have unique id attributes.  This\n     * function makes creating these easy.  Each connection instance has\n     * a counter which starts from zero, and the value of this counter\n     * plus a colon followed by the suffix becomes the unique id. If no\n     * suffix is supplied, the counter is used as the unique id.\n     *\n     * Suffixes are used to make debugging easier when reading the stream\n     * data, and their use is recommended.  The counter resets to 0 for\n     * every new connection for the same reason.  For connections to the\n     * same server that authenticate the same way, all the ids should be\n     * the same, which makes it easy to see changes.  This is useful for\n     * automated testing as well.\n     *\n     * @param {string} suffix - A optional suffix to append to the id.\n     * @returns {string} A unique string to be used for the id attribute.\n     */\n    // eslint-disable-next-line class-methods-use-this\n    getUniqueId(suffix) {\n        const uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n            const r = (Math.random() * 16) | 0,\n                v = c === 'x' ? r : (r & 0x3) | 0x8;\n            return v.toString(16);\n        });\n        if (typeof suffix === 'string' || typeof suffix === 'number') {\n            return uuid + ':' + suffix;\n        } else {\n            return uuid + '';\n        }\n    }\n\n    /**\n     * Register a handler function for when a protocol (websocker or HTTP)\n     * error occurs.\n     *\n     * NOTE: Currently only HTTP errors for BOSH requests are handled.\n     * Patches that handle websocket errors would be very welcome.\n     *\n     * @example\n     *  function onError(err_code){\n     *    //do stuff\n     *  }\n     *\n     *  const conn = Strophe.connect('http://example.com/http-bind');\n     *  conn.addProtocolErrorHandler('HTTP', 500, onError);\n     *  // Triggers HTTP 500 error and onError handler will be called\n     *  conn.connect('user_jid@incorrect_jabber_host', 'secret', onConnect);\n     *\n     * @param {'HTTP'|'websocket'} protocol - 'HTTP' or 'websocket'\n     * @param {number} status_code - Error status code (e.g 500, 400 or 404)\n     * @param {Function} callback - Function that will fire on Http error\n     */\n    addProtocolErrorHandler(protocol, status_code, callback) {\n        this.protocolErrorHandlers[protocol][status_code] = callback;\n    }\n\n    /**\n     * @typedef {Object} Password\n     * @property {string} Password.name\n     * @property {string} Password.ck\n     * @property {string} Password.sk\n     * @property {number} Password.iter\n     * @property {string} Password.salt\n     */\n\n    /**\n     * Starts the connection process.\n     *\n     * As the connection process proceeds, the user supplied callback will\n     * be triggered multiple times with status updates.  The callback\n     * should take two arguments - the status code and the error condition.\n     *\n     * The status code will be one of the values in the Strophe.Status\n     * constants.  The error condition will be one of the conditions\n     * defined in RFC 3920 or the condition 'strophe-parsererror'.\n     *\n     * The Parameters _wait_, _hold_ and _route_ are optional and only relevant\n     * for BOSH connections. Please see XEP 124 for a more detailed explanation\n     * of the optional parameters.\n     *\n     * @param {string} jid - The user's JID.  This may be a bare JID,\n     *     or a full JID.  If a node is not supplied, SASL OAUTHBEARER or\n     *     SASL ANONYMOUS authentication will be attempted (OAUTHBEARER will\n     *     process the provided password value as an access token).\n     *   (String or Object) pass - The user's password, or an object containing\n     *     the users SCRAM client and server keys, in a fashion described as follows:\n     *\n     *     { name: String, representing the hash used (eg. SHA-1),\n     *       salt: String, base64 encoded salt used to derive the client key,\n     *       iter: Int,    the iteration count used to derive the client key,\n     *       ck:   String, the base64 encoding of the SCRAM client key\n     *       sk:   String, the base64 encoding of the SCRAM server key\n     *     }\n     * @param {string|Password} pass - The user password\n     * @param {Function} callback - The connect callback function.\n     * @param {number} [wait] - The optional HTTPBIND wait value.  This is the\n     *     time the server will wait before returning an empty result for\n     *     a request.  The default setting of 60 seconds is recommended.\n     * @param {number} [hold] - The optional HTTPBIND hold value.  This is the\n     *     number of connections the server will hold at one time.  This\n     *     should almost always be set to 1 (the default).\n     * @param {string} [route] - The optional route value.\n     * @param {string} [authcid] - The optional alternative authentication identity\n     *     (username) if intending to impersonate another user.\n     *     When using the SASL-EXTERNAL authentication mechanism, for example\n     *     with client certificates, then the authcid value is used to\n     *     determine whether an authorization JID (authzid) should be sent to\n     *     the server. The authzid should NOT be sent to the server if the\n     *     authzid and authcid are the same. So to prevent it from being sent\n     *     (for example when the JID is already contained in the client\n     *     certificate), set authcid to that same JID. See XEP-178 for more\n     *     details.\n     *  @param {number} [disconnection_timeout=3000] - The optional disconnection timeout\n     *     in milliseconds before _doDisconnect will be called.\n     */\n    connect(jid, pass, callback, wait, hold, route, authcid, disconnection_timeout = 3000) {\n        this.jid = jid;\n        /** Authorization identity */\n        this.authzid = getBareJidFromJid(this.jid);\n        /** Authentication identity (User name) */\n        this.authcid = authcid || getNodeFromJid(this.jid);\n        /** Authentication identity (User password) */\n        this.pass = pass;\n\n        /**\n         * The SASL SCRAM client and server keys. This variable will be populated with a non-null\n         * object of the above described form after a successful SCRAM connection\n         */\n        this.scram_keys = null;\n\n        this.connect_callback = callback;\n        this.disconnecting = false;\n        this.connected = false;\n        this.authenticated = false;\n        this.restored = false;\n        this.disconnection_timeout = disconnection_timeout;\n\n        // parse jid for domain\n        this.domain = getDomainFromJid(this.jid);\n\n        this._changeConnectStatus(Status.CONNECTING, null);\n\n        this._proto._connect(wait, hold, route);\n    }\n\n    /**\n     * Attach to an already created and authenticated BOSH session.\n     *\n     * This function is provided to allow Strophe to attach to BOSH\n     * sessions which have been created externally, perhaps by a Web\n     * application.  This is often used to support auto-login type features\n     * without putting user credentials into the page.\n     *\n     * @param {string|Function} jid - The full JID that is bound by the session.\n     * @param {string} [sid] - The SID of the BOSH session.\n     * @param {number} [rid] - The current RID of the BOSH session.  This RID\n     *     will be used by the next request.\n     * @param {Function} [callback] - The connect callback function.\n     * @param {number} [wait] - The optional HTTPBIND wait value.  This is the\n     *     time the server will wait before returning an empty result for\n     *     a request.  The default setting of 60 seconds is recommended.\n     *     Other settings will require tweaks to the Strophe.TIMEOUT value.\n     * @param {number} [hold] - The optional HTTPBIND hold value.  This is the\n     *     number of connections the server will hold at one time.  This\n     *     should almost always be set to 1 (the default).\n     * @param {number} [wind] - The optional HTTBIND window value.  This is the\n     *     allowed range of request ids that are valid.  The default is 5.\n     */\n    attach(jid, sid, rid, callback, wait, hold, wind) {\n        if (this._proto instanceof Bosh && typeof jid === 'string') {\n            return this._proto._attach(jid, sid, rid, callback, wait, hold, wind);\n        } else if (this._proto instanceof WorkerWebsocket && typeof jid === 'function') {\n            const callback = jid;\n            return this._proto._attach(callback);\n        } else {\n            throw new SessionError('The \"attach\" method is not available for your connection protocol');\n        }\n    }\n\n    /**\n     * Attempt to restore a cached BOSH session.\n     *\n     * This function is only useful in conjunction with providing the\n     * \"keepalive\":true option when instantiating a new {@link Connection}.\n     *\n     * When \"keepalive\" is set to true, Strophe will cache the BOSH tokens\n     * RID (Request ID) and SID (Session ID) and then when this function is\n     * called, it will attempt to restore the session from those cached\n     * tokens.\n     *\n     * This function must therefore be called instead of connect or attach.\n     *\n     * For an example on how to use it, please see examples/restore.js\n     *\n     * @param {string} jid - The user's JID.  This may be a bare JID or a full JID.\n     * @param {Function} callback - The connect callback function.\n     * @param {number} [wait] - The optional HTTPBIND wait value.  This is the\n     *     time the server will wait before returning an empty result for\n     *     a request.  The default setting of 60 seconds is recommended.\n     * @param {number} [hold] - The optional HTTPBIND hold value.  This is the\n     *     number of connections the server will hold at one time.  This\n     *     should almost always be set to 1 (the default).\n     * @param {number} [wind] - The optional HTTBIND window value.  This is the\n     *     allowed range of request ids that are valid.  The default is 5.\n     */\n    restore(jid, callback, wait, hold, wind) {\n        if (!(this._proto instanceof Bosh) || !this._sessionCachingSupported()) {\n            throw new SessionError('The \"restore\" method can only be used with a BOSH connection.');\n        }\n\n        if (this._sessionCachingSupported()) {\n            this._proto._restore(jid, callback, wait, hold, wind);\n        }\n    }\n\n    /**\n     * Checks whether sessionStorage and JSON are supported and whether we're\n     * using BOSH.\n     */\n    _sessionCachingSupported() {\n        if (this._proto instanceof Bosh) {\n            if (!JSON) {\n                return false;\n            }\n            try {\n                sessionStorage.setItem('_strophe_', '_strophe_');\n                sessionStorage.removeItem('_strophe_');\n            } catch (e) {\n                return false;\n            }\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * User overrideable function that receives XML data coming into the\n     * connection.\n     *\n     * The default function does nothing.  User code can override this with\n     * > Connection.xmlInput = function (elem) {\n     * >   (user code)\n     * > };\n     *\n     * Due to limitations of current Browsers' XML-Parsers the opening and closing\n     * <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n     *\n     * BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n     * <Bosh.strip> if you want to strip this tag.\n     *\n     * @param {Node|MessageEvent} elem - The XML data received by the connection.\n     */\n    // eslint-disable-next-line no-unused-vars, class-methods-use-this\n    xmlInput(elem) {\n        return;\n    }\n\n    /**\n     * User overrideable function that receives XML data sent to the\n     * connection.\n     *\n     * The default function does nothing.  User code can override this with\n     * > Connection.xmlOutput = function (elem) {\n     * >   (user code)\n     * > };\n     *\n     * Due to limitations of current Browsers' XML-Parsers the opening and closing\n     * <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n     *\n     * BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n     * <Bosh.strip> if you want to strip this tag.\n     *\n     * @param {Element} elem - The XMLdata sent by the connection.\n     */\n    // eslint-disable-next-line no-unused-vars, class-methods-use-this\n    xmlOutput(elem) {\n        return;\n    }\n\n    /**\n     * User overrideable function that receives raw data coming into the\n     * connection.\n     *\n     * The default function does nothing.  User code can override this with\n     * > Connection.rawInput = function (data) {\n     * >   (user code)\n     * > };\n     *\n     * @param {string} data - The data received by the connection.\n     */\n    // eslint-disable-next-line no-unused-vars, class-methods-use-this\n    rawInput(data) {\n        return;\n    }\n\n    /**\n     * User overrideable function that receives raw data sent to the\n     * connection.\n     *\n     * The default function does nothing.  User code can override this with\n     * > Connection.rawOutput = function (data) {\n     * >   (user code)\n     * > };\n     *\n     * @param {string} data - The data sent by the connection.\n     */\n    // eslint-disable-next-line no-unused-vars, class-methods-use-this\n    rawOutput(data) {\n        return;\n    }\n\n    /**\n     * User overrideable function that receives the new valid rid.\n     *\n     * The default function does nothing. User code can override this with\n     * > Connection.nextValidRid = function (rid) {\n     * >    (user code)\n     * > };\n     *\n     * @param {number} rid - The next valid rid\n     */\n    // eslint-disable-next-line no-unused-vars, class-methods-use-this\n    nextValidRid(rid) {\n        return;\n    }\n\n    /**\n     * Send a stanza.\n     *\n     * This function is called to push data onto the send queue to\n     * go out over the wire.  Whenever a request is sent to the BOSH\n     * server, all pending data is sent and the queue is flushed.\n     *\n     * @param {Element|Builder|Element[]|Builder[]} stanza - The stanza to send\n     */\n    send(stanza) {\n        if (stanza === null) return;\n\n        if (Array.isArray(stanza)) {\n            stanza.forEach((s) => this._queueData(s instanceof Builder ? s.tree() : s));\n        } else {\n            const el = stanza instanceof Builder ? stanza.tree() : stanza;\n            this._queueData(el);\n        }\n        this._proto._send();\n    }\n\n    /**\n     * Immediately send any pending outgoing data.\n     *\n     * Normally send() queues outgoing data until the next idle period\n     * (100ms), which optimizes network use in the common cases when\n     * several send()s are called in succession. flush() can be used to\n     * immediately send all pending data.\n     */\n    flush() {\n        // cancel the pending idle period and run the idle function\n        // immediately\n        clearTimeout(this._idleTimeout);\n        this._onIdle();\n    }\n\n    /**\n     * Helper function to send presence stanzas. The main benefit is for\n     * sending presence stanzas for which you expect a responding presence\n     * stanza with the same id (for example when leaving a chat room).\n     *\n     * @param {Element} stanza - The stanza to send.\n     * @param {Function} [callback] - The callback function for a successful request.\n     * @param {Function} [errback] - The callback function for a failed or timed\n     *    out request.  On timeout, the stanza will be null.\n     * @param {number} [timeout] - The time specified in milliseconds for a\n     *    timeout to occur.\n     * @return {string} The id used to send the presence.\n     */\n    sendPresence(stanza, callback, errback, timeout) {\n        /** @type {TimedHandler} */\n        let timeoutHandler = null;\n\n        const el = stanza instanceof Builder ? stanza.tree() : stanza;\n\n        let id = el.getAttribute('id');\n        if (!id) {\n            // inject id if not found\n            id = this.getUniqueId('sendPresence');\n            el.setAttribute('id', id);\n        }\n\n        if (typeof callback === 'function' || typeof errback === 'function') {\n            const handler = this.addHandler(\n                /** @param {Element} stanza */\n                (stanza) => {\n                    // remove timeout handler if there is one\n                    if (timeoutHandler) this.deleteTimedHandler(timeoutHandler);\n\n                    if (stanza.getAttribute('type') === 'error') {\n                        errback?.(stanza);\n                    } else if (callback) {\n                        callback(stanza);\n                    }\n                },\n                null,\n                'presence',\n                null,\n                id\n            );\n\n            // if timeout specified, set up a timeout handler.\n            if (timeout) {\n                timeoutHandler = this.addTimedHandler(timeout, () => {\n                    // get rid of normal handler\n                    this.deleteHandler(handler);\n                    // call errback on timeout with null stanza\n                    errback?.(null);\n                    return false;\n                });\n            }\n        }\n        this.send(el);\n        return id;\n    }\n\n    /**\n     * Helper function to send IQ stanzas.\n     *\n     * @param {Element|Builder} stanza - The stanza to send.\n     * @param {Function} [callback] - The callback function for a successful request.\n     * @param {Function} [errback] - The callback function for a failed or timed\n     *     out request.  On timeout, the stanza will be null.\n     * @param {number} [timeout] - The time specified in milliseconds for a\n     *     timeout to occur.\n     * @return {string} The id used to send the IQ.\n     */\n    sendIQ(stanza, callback, errback, timeout) {\n        /** @type {TimedHandler} */\n        let timeoutHandler = null;\n\n        const el = stanza instanceof Builder ? stanza.tree() : stanza;\n\n        let id = el.getAttribute('id');\n        if (!id) {\n            // inject id if not found\n            id = this.getUniqueId('sendIQ');\n            el.setAttribute('id', id);\n        }\n\n        if (typeof callback === 'function' || typeof errback === 'function') {\n            const handler = this.addHandler(\n                /** @param {Element} stanza */\n                (stanza) => {\n                    // remove timeout handler if there is one\n                    if (timeoutHandler) this.deleteTimedHandler(timeoutHandler);\n\n                    const iqtype = stanza.getAttribute('type');\n                    if (iqtype === 'result') {\n                        callback?.(stanza);\n                    } else if (iqtype === 'error') {\n                        errback?.(stanza);\n                    } else {\n                        const error = new Error(`Got bad IQ type of ${iqtype}`);\n                        error.name = 'StropheError';\n                        throw error;\n                    }\n                },\n                null,\n                'iq',\n                ['error', 'result'],\n                id\n            );\n\n            // if timeout specified, set up a timeout handler.\n            if (timeout) {\n                timeoutHandler = this.addTimedHandler(timeout, () => {\n                    // get rid of normal handler\n                    this.deleteHandler(handler);\n                    // call errback on timeout with null stanza\n                    errback?.(null);\n                    return false;\n                });\n            }\n        }\n        this.send(el);\n        return id;\n    }\n\n    /**\n     * Queue outgoing data for later sending.  Also ensures that the data\n     * is a DOMElement.\n     * @private\n     * @param {Element} element\n     */\n    _queueData(element) {\n        if (element === null || !element.tagName || !element.childNodes) {\n            const error = new Error('Cannot queue non-DOMElement.');\n            error.name = 'StropheError';\n            throw error;\n        }\n        this._data.push(element);\n    }\n\n    /**\n     * Send an xmpp:restart stanza.\n     * @private\n     */\n    _sendRestart() {\n        this._data.push('restart');\n        this._proto._sendRestart();\n        this._idleTimeout = setTimeout(() => this._onIdle(), 100);\n    }\n\n    /**\n     * Add a timed handler to the connection.\n     *\n     * This function adds a timed handler.  The provided handler will\n     * be called every period milliseconds until it returns false,\n     * the connection is terminated, or the handler is removed.  Handlers\n     * that wish to continue being invoked should return true.\n     *\n     * Because of method binding it is necessary to save the result of\n     * this function if you wish to remove a handler with\n     * deleteTimedHandler().\n     *\n     * Note that user handlers are not active until authentication is\n     * successful.\n     *\n     * @param {number} period - The period of the handler.\n     * @param {Function} handler - The callback function.\n     * @return {TimedHandler} A reference to the handler that can be used to remove it.\n     */\n    addTimedHandler(period, handler) {\n        const thand = new TimedHandler(period, handler);\n        this.addTimeds.push(thand);\n        return thand;\n    }\n\n    /**\n     * Delete a timed handler for a connection.\n     *\n     * This function removes a timed handler from the connection.  The\n     * handRef parameter is *not* the function passed to addTimedHandler(),\n     * but is the reference returned from addTimedHandler().\n     * @param {TimedHandler} handRef - The handler reference.\n     */\n    deleteTimedHandler(handRef) {\n        // this must be done in the Idle loop so that we don't change\n        // the handlers during iteration\n        this.removeTimeds.push(handRef);\n    }\n\n    /**\n     * @typedef {Object} HandlerOptions\n     * @property {boolean} [HandlerOptions.matchBareFromJid]\n     * @property {boolean} [HandlerOptions.ignoreNamespaceFragment]\n     */\n\n    /**\n     * Add a stanza handler for the connection.\n     *\n     * This function adds a stanza handler to the connection.  The\n     * handler callback will be called for any stanza that matches\n     * the parameters.  Note that if multiple parameters are supplied,\n     * they must all match for the handler to be invoked.\n     *\n     * The handler will receive the stanza that triggered it as its argument.\n     * *The handler should return true if it is to be invoked again;\n     * returning false will remove the handler after it returns.*\n     *\n     * As a convenience, the ns parameters applies to the top level element\n     * and also any of its immediate children.  This is primarily to make\n     * matching /iq/query elements easy.\n     *\n     * ### Options\n     *\n     * With the options argument, you can specify boolean flags that affect how\n     * matches are being done.\n     *\n     * Currently two flags exist:\n     *\n     * * *matchBareFromJid*:\n     *     When set to true, the from parameter and the\n     *     from attribute on the stanza will be matched as bare JIDs instead\n     *     of full JIDs. To use this, pass {matchBareFromJid: true} as the\n     *     value of options. The default value for matchBareFromJid is false.\n     *\n     * * *ignoreNamespaceFragment*:\n     *     When set to true, a fragment specified on the stanza's namespace\n     *     URL will be ignored when it's matched with the one configured for\n     *     the handler.\n     *\n     *     This means that if you register like this:\n     *\n     *     >   connection.addHandler(\n     *     >       handler,\n     *     >       'http://jabber.org/protocol/muc',\n     *     >       null, null, null, null,\n     *     >       {'ignoreNamespaceFragment': true}\n     *     >   );\n     *\n     *     Then a stanza with XML namespace of\n     *     'http://jabber.org/protocol/muc#user' will also be matched. If\n     *     'ignoreNamespaceFragment' is false, then only stanzas with\n     *     'http://jabber.org/protocol/muc' will be matched.\n     *\n     * ### Deleting the handler\n     *\n     * The return value should be saved if you wish to remove the handler\n     * with `deleteHandler()`.\n     *\n     * @param {Function} handler - The user callback.\n     * @param {string} ns - The namespace to match.\n     * @param {string} name - The stanza name to match.\n     * @param {string|string[]} type - The stanza type (or types if an array) to match.\n     * @param {string} [id] - The stanza id attribute to match.\n     * @param {string} [from] - The stanza from attribute to match.\n     * @param {HandlerOptions} [options] - The handler options\n     * @return {Handler} A reference to the handler that can be used to remove it.\n     */\n    addHandler(handler, ns, name, type, id, from, options) {\n        const hand = new Handler(handler, ns, name, type, id, from, options);\n        this.addHandlers.push(hand);\n        return hand;\n    }\n\n    /**\n     * Delete a stanza handler for a connection.\n     *\n     * This function removes a stanza handler from the connection.  The\n     * handRef parameter is *not* the function passed to addHandler(),\n     * but is the reference returned from addHandler().\n     *\n     * @param {Handler} handRef - The handler reference.\n     */\n    deleteHandler(handRef) {\n        // this must be done in the Idle loop so that we don't change\n        // the handlers during iteration\n        this.removeHandlers.push(handRef);\n        // If a handler is being deleted while it is being added,\n        // prevent it from getting added\n        const i = this.addHandlers.indexOf(handRef);\n        if (i >= 0) {\n            this.addHandlers.splice(i, 1);\n        }\n    }\n\n    /**\n     * Register the SASL mechanisms which will be supported by this instance of\n     * Connection (i.e. which this XMPP client will support).\n     * @param {SASLMechanism[]} mechanisms - Array of objects with SASLMechanism prototypes\n     */\n    registerSASLMechanisms(mechanisms) {\n        this.mechanisms = {};\n        (\n            mechanisms || [\n                SASLAnonymous,\n                SASLExternal,\n                SASLOAuthBearer,\n                SASLXOAuth2,\n                SASLPlain,\n                SASLSHA1,\n                SASLSHA256,\n                SASLSHA384,\n                SASLSHA512,\n            ]\n        ).forEach((m) => this.registerSASLMechanism(m));\n    }\n\n    /**\n     * Register a single SASL mechanism, to be supported by this client.\n     * @param {any} Mechanism - Object with a Strophe.SASLMechanism prototype\n     */\n    registerSASLMechanism(Mechanism) {\n        const mechanism = new Mechanism();\n        this.mechanisms[mechanism.mechname] = mechanism;\n    }\n\n    /**\n     * Start the graceful disconnection process.\n     *\n     * This function starts the disconnection process.  This process starts\n     * by sending unavailable presence and sending BOSH body of type\n     * terminate.  A timeout handler makes sure that disconnection happens\n     * even if the BOSH server does not respond.\n     * If the Connection object isn't connected, at least tries to abort all pending requests\n     * so the connection object won't generate successful requests (which were already opened).\n     *\n     * The user supplied connection callback will be notified of the\n     * progress as this process happens.\n     *\n     * @param {string} [reason] - The reason the disconnect is occuring.\n     */\n    disconnect(reason) {\n        this._changeConnectStatus(Status.DISCONNECTING, reason);\n        if (reason) {\n            log.info('Disconnect was called because: ' + reason);\n        } else {\n            log.debug('Disconnect was called');\n        }\n        if (this.connected) {\n            let pres = null;\n            this.disconnecting = true;\n            if (this.authenticated) {\n                pres = $pres({\n                    'xmlns': NS.CLIENT,\n                    'type': 'unavailable',\n                });\n            }\n            // setup timeout handler\n            this._disconnectTimeout = this._addSysTimedHandler(\n                this.disconnection_timeout,\n                this._onDisconnectTimeout.bind(this)\n            );\n            this._proto._disconnect(pres);\n        } else {\n            log.debug('Disconnect was called before Strophe connected to the server');\n            this._proto._abortAllRequests();\n            this._doDisconnect();\n        }\n    }\n\n    /**\n     * _Private_ helper function that makes sure plugins and the user's\n     * callback are notified of connection status changes.\n     * @param {number} status - the new connection status, one of the values\n     *     in Strophe.Status\n     * @param {string|null} [condition] - the error condition\n     * @param {Element} [elem] - The triggering stanza.\n     */\n    _changeConnectStatus(status, condition, elem) {\n        // notify all plugins listening for status changes\n        for (const k in connectionPlugins) {\n            if (Object.prototype.hasOwnProperty.call(connectionPlugins, k)) {\n                // @ts-ignore\n                const plugin = this[k];\n                if (plugin.statusChanged) {\n                    try {\n                        plugin.statusChanged(status, condition);\n                    } catch (err) {\n                        log.error(`${k} plugin caused an exception changing status: ${err}`);\n                    }\n                }\n            }\n        }\n        // notify the user's callback\n        if (this.connect_callback) {\n            try {\n                this.connect_callback(status, condition, elem);\n            } catch (e) {\n                handleError(e);\n                log.error(`User connection callback caused an exception: ${e}`);\n            }\n        }\n    }\n\n    /**\n     * _Private_ function to disconnect.\n     *\n     * This is the last piece of the disconnection logic.  This resets the\n     * connection and alerts the user's connection callback.\n     * @param {string|null} [condition] - the error condition\n     */\n    _doDisconnect(condition) {\n        if (typeof this._idleTimeout === 'number') {\n            clearTimeout(this._idleTimeout);\n        }\n\n        // Cancel Disconnect Timeout\n        if (this._disconnectTimeout !== null) {\n            this.deleteTimedHandler(this._disconnectTimeout);\n            this._disconnectTimeout = null;\n        }\n\n        log.debug('_doDisconnect was called');\n        this._proto._doDisconnect();\n\n        this.authenticated = false;\n        this.disconnecting = false;\n        this.restored = false;\n\n        // delete handlers\n        this.handlers = [];\n        this.timedHandlers = [];\n        this.removeTimeds = [];\n        this.removeHandlers = [];\n        this.addTimeds = [];\n        this.addHandlers = [];\n\n        // tell the parent we disconnected\n        this._changeConnectStatus(Status.DISCONNECTED, condition);\n        this.connected = false;\n    }\n\n    /**\n     * _Private_ handler to processes incoming data from the the connection.\n     *\n     * Except for _connect_cb handling the initial connection request,\n     * this function handles the incoming data for all requests.  This\n     * function also fires stanza handlers that match each incoming\n     * stanza.\n     * @param {Element | Request} req - The request that has data ready.\n     * @param {string} [raw] - The stanza as raw string.\n     */\n    _dataRecv(req, raw) {\n        const elem = /** @type {Element} */ (\n            '_reqToData' in this._proto ? this._proto._reqToData(/** @type {Request} */ (req)) : req\n        );\n        if (elem === null) {\n            return;\n        }\n\n        if (this.xmlInput !== Connection.prototype.xmlInput) {\n            if (elem.nodeName === this._proto.strip && elem.childNodes.length) {\n                this.xmlInput(elem.childNodes[0]);\n            } else {\n                this.xmlInput(elem);\n            }\n        }\n        if (this.rawInput !== Connection.prototype.rawInput) {\n            if (raw) {\n                this.rawInput(raw);\n            } else {\n                this.rawInput(Builder.serialize(elem));\n            }\n        }\n\n        // remove handlers scheduled for deletion\n        while (this.removeHandlers.length > 0) {\n            const hand = this.removeHandlers.pop();\n            const i = this.handlers.indexOf(hand);\n            if (i >= 0) {\n                this.handlers.splice(i, 1);\n            }\n        }\n\n        // add handlers scheduled for addition\n        while (this.addHandlers.length > 0) {\n            this.handlers.push(this.addHandlers.pop());\n        }\n\n        // handle graceful disconnect\n        if (this.disconnecting && this._proto._emptyQueue()) {\n            this._doDisconnect();\n            return;\n        }\n\n        const type = elem.getAttribute('type');\n        if (type !== null && type === 'terminate') {\n            // Don't process stanzas that come in after disconnect\n            if (this.disconnecting) {\n                return;\n            }\n            // an error occurred\n            let cond = elem.getAttribute('condition');\n            const conflict = elem.getElementsByTagName('conflict');\n            if (cond !== null) {\n                if (cond === 'remote-stream-error' && conflict.length > 0) {\n                    cond = 'conflict';\n                }\n                this._changeConnectStatus(Status.CONNFAIL, cond);\n            } else {\n                this._changeConnectStatus(Status.CONNFAIL, ErrorCondition.UNKNOWN_REASON);\n            }\n            this._doDisconnect(cond);\n            return;\n        }\n\n        // send each incoming stanza through the handler chain\n        forEachChild(\n            elem,\n            null,\n            /** @param {Element} child */\n            (child) => {\n                const matches = [];\n                this.handlers = this.handlers.reduce((handlers, handler) => {\n                    try {\n                        if (handler.isMatch(child) && (this.authenticated || !handler.user)) {\n                            if (handler.run(child)) {\n                                handlers.push(handler);\n                            }\n                            matches.push(handler);\n                        } else {\n                            handlers.push(handler);\n                        }\n                    } catch (e) {\n                        // if the handler throws an exception, we consider it as false\n                        log.warn('Removing Strophe handlers due to uncaught exception: ' + e.message);\n                    }\n\n                    return handlers;\n                }, []);\n\n                // If no handler was fired for an incoming IQ with type=\"set\",\n                // then we return an IQ error stanza with service-unavailable.\n                if (!matches.length && this.iqFallbackHandler.isMatch(child)) {\n                    this.iqFallbackHandler.run(child);\n                }\n            }\n        );\n    }\n\n    /**\n     * @callback connectionCallback\n     * @param {Connection} connection\n     */\n\n    /**\n     * _Private_ handler for initial connection request.\n     *\n     * This handler is used to process the initial connection request\n     * response from the BOSH server. It is used to set up authentication\n     * handlers and start the authentication process.\n     *\n     * SASL authentication will be attempted if available, otherwise\n     * the code will fall back to legacy authentication.\n     *\n     * @param {Element | Request} req - The current request.\n     * @param {connectionCallback} _callback - low level (xmpp) connect callback function.\n     *     Useful for plugins with their own xmpp connect callback (when they\n     *     want to do something special).\n     * @param {string} [raw] - The stanza as raw string.\n     */\n    _connect_cb(req, _callback, raw) {\n        log.debug('_connect_cb was called');\n        this.connected = true;\n\n        let bodyWrap;\n        try {\n            bodyWrap = /** @type {Element} */ (\n                '_reqToData' in this._proto ? this._proto._reqToData(/** @type {Request} */ (req)) : req\n            );\n        } catch (e) {\n            if (e.name !== ErrorCondition.BAD_FORMAT) {\n                throw e;\n            }\n            this._changeConnectStatus(Status.CONNFAIL, ErrorCondition.BAD_FORMAT);\n            this._doDisconnect(ErrorCondition.BAD_FORMAT);\n        }\n        if (!bodyWrap) {\n            return;\n        }\n\n        if (this.xmlInput !== Connection.prototype.xmlInput) {\n            if (bodyWrap.nodeName === this._proto.strip && bodyWrap.childNodes.length) {\n                this.xmlInput(bodyWrap.childNodes[0]);\n            } else {\n                this.xmlInput(bodyWrap);\n            }\n        }\n        if (this.rawInput !== Connection.prototype.rawInput) {\n            if (raw) {\n                this.rawInput(raw);\n            } else {\n                this.rawInput(Builder.serialize(bodyWrap));\n            }\n        }\n\n        const conncheck = this._proto._connect_cb(bodyWrap);\n        if (conncheck === Status.CONNFAIL) {\n            return;\n        }\n\n        // Check for the stream:features tag\n        let hasFeatures;\n        if (bodyWrap.getElementsByTagNameNS) {\n            hasFeatures = bodyWrap.getElementsByTagNameNS(NS.STREAM, 'features').length > 0;\n        } else {\n            hasFeatures =\n                bodyWrap.getElementsByTagName('stream:features').length > 0 ||\n                bodyWrap.getElementsByTagName('features').length > 0;\n        }\n        if (!hasFeatures) {\n            this._proto._no_auth_received(_callback);\n            return;\n        }\n\n        const matched = Array.from(bodyWrap.getElementsByTagName('mechanism'))\n            .map((m) => this.mechanisms[m.textContent])\n            .filter((m) => m);\n\n        if (matched.length === 0) {\n            if (bodyWrap.getElementsByTagName('auth').length === 0) {\n                // There are no matching SASL mechanisms and also no legacy\n                // auth available.\n                this._proto._no_auth_received(_callback);\n                return;\n            }\n        }\n        if (this.do_authentication !== false) {\n            this.authenticate(matched);\n        }\n    }\n\n    /**\n     * Sorts an array of objects with prototype SASLMechanism according to\n     * their priorities.\n     * @param {SASLMechanism[]} mechanisms - Array of SASL mechanisms.\n     */\n    // eslint-disable-next-line  class-methods-use-this\n    sortMechanismsByPriority(mechanisms) {\n        // Sorting mechanisms according to priority.\n        for (let i = 0; i < mechanisms.length - 1; ++i) {\n            let higher = i;\n            for (let j = i + 1; j < mechanisms.length; ++j) {\n                if (mechanisms[j].priority > mechanisms[higher].priority) {\n                    higher = j;\n                }\n            }\n            if (higher !== i) {\n                const swap = mechanisms[i];\n                mechanisms[i] = mechanisms[higher];\n                mechanisms[higher] = swap;\n            }\n        }\n        return mechanisms;\n    }\n\n    /**\n     * Set up authentication\n     *\n     * Continues the initial connection request by setting up authentication\n     * handlers and starting the authentication process.\n     *\n     * SASL authentication will be attempted if available, otherwise\n     * the code will fall back to legacy authentication.\n     *\n     * @param {SASLMechanism[]} matched - Array of SASL mechanisms supported.\n     */\n    authenticate(matched) {\n        if (!this._attemptSASLAuth(matched)) {\n            this._attemptLegacyAuth();\n        }\n    }\n\n    /**\n     * Iterate through an array of SASL mechanisms and attempt authentication\n     * with the highest priority (enabled) mechanism.\n     *\n     * @private\n     * @param {SASLMechanism[]} mechanisms - Array of SASL mechanisms.\n     * @return {Boolean} mechanism_found - true or false, depending on whether a\n     *  valid SASL mechanism was found with which authentication could be started.\n     */\n    _attemptSASLAuth(mechanisms) {\n        mechanisms = this.sortMechanismsByPriority(mechanisms || []);\n        let mechanism_found = false;\n        for (let i = 0; i < mechanisms.length; ++i) {\n            if (!mechanisms[i].test(this)) {\n                continue;\n            }\n            this._sasl_success_handler = this._addSysHandler(\n                this._sasl_success_cb.bind(this),\n                null,\n                'success',\n                null,\n                null\n            );\n            this._sasl_failure_handler = this._addSysHandler(\n                this._sasl_failure_cb.bind(this),\n                null,\n                'failure',\n                null,\n                null\n            );\n            this._sasl_challenge_handler = this._addSysHandler(\n                this._sasl_challenge_cb.bind(this),\n                null,\n                'challenge',\n                null,\n                null\n            );\n\n            this._sasl_mechanism = mechanisms[i];\n            this._sasl_mechanism.onStart(this);\n\n            const request_auth_exchange = $build('auth', {\n                'xmlns': NS.SASL,\n                'mechanism': this._sasl_mechanism.mechname,\n            });\n            if (this._sasl_mechanism.isClientFirst) {\n                const response = this._sasl_mechanism.clientChallenge(this);\n                request_auth_exchange.t(btoa(/** @type {string} */ (response)));\n            }\n            this.send(request_auth_exchange.tree());\n            mechanism_found = true;\n            break;\n        }\n        return mechanism_found;\n    }\n\n    /**\n     * _Private_ handler for the SASL challenge\n     * @private\n     * @param {Element} elem\n     */\n    async _sasl_challenge_cb(elem) {\n        const challenge = atob(getText(elem));\n        const response = await this._sasl_mechanism.onChallenge(this, challenge);\n        const stanza = $build('response', { 'xmlns': NS.SASL });\n        if (response) stanza.t(btoa(response));\n        this.send(stanza.tree());\n        return true;\n    }\n\n    /**\n     * Attempt legacy (i.e. non-SASL) authentication.\n     * @private\n     */\n    _attemptLegacyAuth() {\n        if (getNodeFromJid(this.jid) === null) {\n            // we don't have a node, which is required for non-anonymous\n            // client connections\n            this._changeConnectStatus(Status.CONNFAIL, ErrorCondition.MISSING_JID_NODE);\n            this.disconnect(ErrorCondition.MISSING_JID_NODE);\n        } else {\n            // Fall back to legacy authentication\n            this._changeConnectStatus(Status.AUTHENTICATING, null);\n            this._addSysHandler(this._onLegacyAuthIQResult.bind(this), null, null, null, '_auth_1');\n            this.send(\n                $iq({\n                    'type': 'get',\n                    'to': this.domain,\n                    'id': '_auth_1',\n                })\n                    .c('query', { xmlns: NS.AUTH })\n                    .c('username', {})\n                    .t(getNodeFromJid(this.jid))\n                    .tree()\n            );\n        }\n    }\n\n    /**\n     * _Private_ handler for legacy authentication.\n     *\n     * This handler is called in response to the initial <iq type='get'/>\n     * for legacy authentication.  It builds an authentication <iq/> and\n     * sends it, creating a handler (calling back to _auth2_cb()) to\n     * handle the result\n     * @private\n     * @return {false} `false` to remove the handler.\n     */\n    // eslint-disable-next-line no-unused-vars\n    //\n    _onLegacyAuthIQResult() {\n        const pass = typeof this.pass === 'string' ? this.pass : '';\n\n        // build plaintext auth iq\n        const iq = $iq({ type: 'set', id: '_auth_2' })\n            .c('query', { xmlns: NS.AUTH })\n            .c('username', {})\n            .t(getNodeFromJid(this.jid))\n            .up()\n            .c('password')\n            .t(pass);\n\n        if (!getResourceFromJid(this.jid)) {\n            // since the user has not supplied a resource, we pick\n            // a default one here.  unlike other auth methods, the server\n            // cannot do this for us.\n            this.jid = getBareJidFromJid(this.jid) + '/strophe';\n        }\n        iq.up().c('resource', {}).t(getResourceFromJid(this.jid));\n\n        this._addSysHandler(this._auth2_cb.bind(this), null, null, null, '_auth_2');\n        this.send(iq.tree());\n        return false;\n    }\n\n    /**\n     * _Private_ handler for succesful SASL authentication.\n     * @private\n     * @param {Element} elem - The matching stanza.\n     * @return {false} `false` to remove the handler.\n     */\n    _sasl_success_cb(elem) {\n        if (this._sasl_data['server-signature']) {\n            let serverSignature;\n            const success = atob(getText(elem));\n            const attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n            const matches = success.match(attribMatch);\n            if (matches[1] === 'v') {\n                serverSignature = matches[2];\n            }\n            if (serverSignature !== this._sasl_data['server-signature']) {\n                // remove old handlers\n                this.deleteHandler(this._sasl_failure_handler);\n                this._sasl_failure_handler = null;\n                if (this._sasl_challenge_handler) {\n                    this.deleteHandler(this._sasl_challenge_handler);\n                    this._sasl_challenge_handler = null;\n                }\n                this._sasl_data = {};\n                return this._sasl_failure_cb(null);\n            }\n        }\n        log.info('SASL authentication succeeded.');\n\n        if (this._sasl_data.keys) {\n            this.scram_keys = this._sasl_data.keys;\n        }\n\n        if (this._sasl_mechanism) {\n            this._sasl_mechanism.onSuccess();\n        }\n        // remove old handlers\n        this.deleteHandler(this._sasl_failure_handler);\n        this._sasl_failure_handler = null;\n        if (this._sasl_challenge_handler) {\n            this.deleteHandler(this._sasl_challenge_handler);\n            this._sasl_challenge_handler = null;\n        }\n        /** @type {Handler[]} */\n        const streamfeature_handlers = [];\n\n        /**\n         * @param {Handler[]} handlers\n         * @param {Element} elem\n         */\n        const wrapper = (handlers, elem) => {\n            while (handlers.length) {\n                this.deleteHandler(handlers.pop());\n            }\n            this._onStreamFeaturesAfterSASL(elem);\n            return false;\n        };\n\n        streamfeature_handlers.push(\n            this._addSysHandler(\n                /** @param {Element} elem */\n                (elem) => wrapper(streamfeature_handlers, elem),\n                null,\n                'stream:features',\n                null,\n                null\n            )\n        );\n\n        streamfeature_handlers.push(\n            this._addSysHandler(\n                /** @param {Element} elem */\n                (elem) => wrapper(streamfeature_handlers, elem),\n                NS.STREAM,\n                'features',\n                null,\n                null\n            )\n        );\n\n        // we must send an xmpp:restart now\n        this._sendRestart();\n        return false;\n    }\n\n    /**\n     * @private\n     * @param {Element} elem - The matching stanza.\n     * @return {false} `false` to remove the handler.\n     */\n    _onStreamFeaturesAfterSASL(elem) {\n        // save stream:features for future usage\n        this.features = elem;\n        for (let i = 0; i < elem.childNodes.length; i++) {\n            const child = elem.childNodes[i];\n            if (child.nodeName === 'bind') {\n                this.do_bind = true;\n            }\n            if (child.nodeName === 'session') {\n                this.do_session = true;\n            }\n        }\n\n        if (!this.do_bind) {\n            this._changeConnectStatus(Status.AUTHFAIL, null);\n            return false;\n        } else if (!this.options.explicitResourceBinding) {\n            this.bind();\n        } else {\n            this._changeConnectStatus(Status.BINDREQUIRED, null);\n        }\n        return false;\n    }\n\n    /**\n     * Sends an IQ to the XMPP server to bind a JID resource for this session.\n     *\n     * https://tools.ietf.org/html/rfc6120#section-7.5\n     *\n     * If `explicitResourceBinding` was set to a truthy value in the options\n     * passed to the Connection constructor, then this function needs\n     * to be called explicitly by the client author.\n     *\n     * Otherwise it'll be called automatically as soon as the XMPP server\n     * advertises the \"urn:ietf:params:xml:ns:xmpp-bind\" stream feature.\n     */\n    bind() {\n        if (!this.do_bind) {\n            log.info(`Connection.prototype.bind called but \"do_bind\" is false`);\n            return;\n        }\n        this._addSysHandler(this._onResourceBindResultIQ.bind(this), null, null, null, '_bind_auth_2');\n\n        const resource = getResourceFromJid(this.jid);\n        if (resource) {\n            this.send(\n                $iq({ type: 'set', id: '_bind_auth_2' })\n                    .c('bind', { xmlns: NS.BIND })\n                    .c('resource', {})\n                    .t(resource)\n                    .tree()\n            );\n        } else {\n            this.send($iq({ type: 'set', id: '_bind_auth_2' }).c('bind', { xmlns: NS.BIND }).tree());\n        }\n    }\n\n    /**\n     * _Private_ handler for binding result and session start.\n     * @private\n     * @param {Element} elem - The matching stanza.\n     * @return {false} `false` to remove the handler.\n     */\n    _onResourceBindResultIQ(elem) {\n        if (elem.getAttribute('type') === 'error') {\n            log.warn('Resource binding failed.');\n            const conflict = elem.getElementsByTagName('conflict');\n            let condition;\n            if (conflict.length > 0) {\n                condition = ErrorCondition.CONFLICT;\n            }\n            this._changeConnectStatus(Status.AUTHFAIL, condition, elem);\n            return false;\n        }\n        // TODO - need to grab errors\n        const bind = elem.getElementsByTagName('bind');\n        if (bind.length > 0) {\n            const jidNode = bind[0].getElementsByTagName('jid');\n            if (jidNode.length > 0) {\n                this.authenticated = true;\n                this.jid = getText(jidNode[0]);\n                if (this.do_session) {\n                    this._establishSession();\n                } else {\n                    this._changeConnectStatus(Status.CONNECTED, null);\n                }\n            }\n        } else {\n            log.warn('Resource binding failed.');\n            this._changeConnectStatus(Status.AUTHFAIL, null, elem);\n            return false;\n        }\n    }\n\n    /**\n     * Send IQ request to establish a session with the XMPP server.\n     *\n     * See https://xmpp.org/rfcs/rfc3921.html#session\n     *\n     * Note: The protocol for session establishment has been determined as\n     * unnecessary and removed in RFC-6121.\n     * @private\n     */\n    _establishSession() {\n        if (!this.do_session) {\n            throw new Error(\n                `Connection.prototype._establishSession ` +\n                    `called but apparently ${NS.SESSION} wasn't advertised by the server`\n            );\n        }\n        this._addSysHandler(this._onSessionResultIQ.bind(this), null, null, null, '_session_auth_2');\n\n        this.send($iq({ type: 'set', id: '_session_auth_2' }).c('session', { xmlns: NS.SESSION }).tree());\n    }\n\n    /**\n     * _Private_ handler for the server's IQ response to a client's session\n     * request.\n     *\n     * This sets Connection.authenticated to true on success, which\n     * starts the processing of user handlers.\n     *\n     * See https://xmpp.org/rfcs/rfc3921.html#session\n     *\n     * Note: The protocol for session establishment has been determined as\n     * unnecessary and removed in RFC-6121.\n     * @private\n     * @param {Element} elem - The matching stanza.\n     * @return {false} `false` to remove the handler.\n     */\n    _onSessionResultIQ(elem) {\n        if (elem.getAttribute('type') === 'result') {\n            this.authenticated = true;\n            this._changeConnectStatus(Status.CONNECTED, null);\n        } else if (elem.getAttribute('type') === 'error') {\n            this.authenticated = false;\n            log.warn('Session creation failed.');\n            this._changeConnectStatus(Status.AUTHFAIL, null, elem);\n            return false;\n        }\n        return false;\n    }\n\n    /**\n     * _Private_ handler for SASL authentication failure.\n     * @param {Element} [elem] - The matching stanza.\n     * @return {false} `false` to remove the handler.\n     */\n    _sasl_failure_cb(elem) {\n        // delete unneeded handlers\n        if (this._sasl_success_handler) {\n            this.deleteHandler(this._sasl_success_handler);\n            this._sasl_success_handler = null;\n        }\n        if (this._sasl_challenge_handler) {\n            this.deleteHandler(this._sasl_challenge_handler);\n            this._sasl_challenge_handler = null;\n        }\n\n        if (this._sasl_mechanism) this._sasl_mechanism.onFailure();\n        this._changeConnectStatus(Status.AUTHFAIL, null, elem);\n        return false;\n    }\n\n    /**\n     * _Private_ handler to finish legacy authentication.\n     *\n     * This handler is called when the result from the jabber:iq:auth\n     * <iq/> stanza is returned.\n     * @private\n     * @param {Element} elem - The stanza that triggered the callback.\n     * @return {false} `false` to remove the handler.\n     */\n    _auth2_cb(elem) {\n        if (elem.getAttribute('type') === 'result') {\n            this.authenticated = true;\n            this._changeConnectStatus(Status.CONNECTED, null);\n        } else if (elem.getAttribute('type') === 'error') {\n            this._changeConnectStatus(Status.AUTHFAIL, null, elem);\n            this.disconnect('authentication failed');\n        }\n        return false;\n    }\n\n    /**\n     * _Private_ function to add a system level timed handler.\n     *\n     * This function is used to add a TimedHandler for the\n     * library code.  System timed handlers are allowed to run before\n     * authentication is complete.\n     * @param {number} period - The period of the handler.\n     * @param {Function} handler - The callback function.\n     */\n    _addSysTimedHandler(period, handler) {\n        const thand = new TimedHandler(period, handler);\n        thand.user = false;\n        this.addTimeds.push(thand);\n        return thand;\n    }\n\n    /**\n     * _Private_ function to add a system level stanza handler.\n     *\n     * This function is used to add a Handler for the\n     * library code.  System stanza handlers are allowed to run before\n     * authentication is complete.\n     * @param {Function} handler - The callback function.\n     * @param {string} ns - The namespace to match.\n     * @param {string} name - The stanza name to match.\n     * @param {string} type - The stanza type attribute to match.\n     * @param {string} id - The stanza id attribute to match.\n     */\n    _addSysHandler(handler, ns, name, type, id) {\n        const hand = new Handler(handler, ns, name, type, id);\n        hand.user = false;\n        this.addHandlers.push(hand);\n        return hand;\n    }\n\n    /**\n     * _Private_ timeout handler for handling non-graceful disconnection.\n     *\n     * If the graceful disconnect process does not complete within the\n     * time allotted, this handler finishes the disconnect anyway.\n     * @return {false} `false` to remove the handler.\n     */\n    _onDisconnectTimeout() {\n        log.debug('_onDisconnectTimeout was called');\n        this._changeConnectStatus(Status.CONNTIMEOUT, null);\n        this._proto._onDisconnectTimeout();\n        // actually disconnect\n        this._doDisconnect();\n        return false;\n    }\n\n    /**\n     * _Private_ handler to process events during idle cycle.\n     *\n     * This handler is called every 100ms to fire timed handlers that\n     * are ready and keep poll requests going.\n     */\n    _onIdle() {\n        // add timed handlers scheduled for addition\n        // NOTE: we add before remove in the case a timed handler is\n        // added and then deleted before the next _onIdle() call.\n        while (this.addTimeds.length > 0) {\n            this.timedHandlers.push(this.addTimeds.pop());\n        }\n\n        // remove timed handlers that have been scheduled for deletion\n        while (this.removeTimeds.length > 0) {\n            const thand = this.removeTimeds.pop();\n            const i = this.timedHandlers.indexOf(thand);\n            if (i >= 0) {\n                this.timedHandlers.splice(i, 1);\n            }\n        }\n\n        // call ready timed handlers\n        const now = new Date().getTime();\n        const newList = [];\n        for (let i = 0; i < this.timedHandlers.length; i++) {\n            const thand = this.timedHandlers[i];\n            if (this.authenticated || !thand.user) {\n                const since = thand.lastCalled + thand.period;\n                if (since - now <= 0) {\n                    if (thand.run()) {\n                        newList.push(thand);\n                    }\n                } else {\n                    newList.push(thand);\n                }\n            }\n        }\n        this.timedHandlers = newList;\n        clearTimeout(this._idleTimeout);\n        this._proto._onIdle();\n\n        // reactivate the timer only if connected\n        if (this.connected) {\n            this._idleTimeout = setTimeout(() => this._onIdle(), 100);\n        }\n    }\n}\n\nexport default Connection;\n", "import { forEachChild, getBareJidFromJid, handleError, isTagEqual } from './utils.js';\n\n/**\n * _Private_ helper class for managing stanza handlers.\n *\n * A Handler encapsulates a user provided callback function to be\n * executed when matching stanzas are received by the connection.\n * Handlers can be either one-off or persistant depending on their\n * return value. Returning true will cause a Handler to remain active, and\n * returning false will remove the Handler.\n *\n * Users will not use Handler objects directly, but instead they\n * will use {@link Connection.addHandler} and\n * {@link Connection.deleteHandler}.\n */\nclass Handler {\n    /**\n     * @typedef {Object} HandlerOptions\n     * @property {boolean} [HandlerOptions.matchBareFromJid]\n     * @property {boolean} [HandlerOptions.ignoreNamespaceFragment]\n     */\n\n    /**\n     * Create and initialize a new Handler.\n     *\n     * @param {Function} handler - A function to be executed when the handler is run.\n     * @param {string} ns - The namespace to match.\n     * @param {string} name - The element name to match.\n     * @param {string|string[]} type - The stanza type (or types if an array) to match.\n     * @param {string} [id] - The element id attribute to match.\n     * @param {string} [from] - The element from attribute to match.\n     * @param {HandlerOptions} [options] - Handler options\n     */\n    constructor(handler, ns, name, type, id, from, options) {\n        this.handler = handler;\n        this.ns = ns;\n        this.name = name;\n        this.type = type;\n        this.id = id;\n        this.options = options || { 'matchBareFromJid': false, 'ignoreNamespaceFragment': false };\n        if (this.options.matchBareFromJid) {\n            this.from = from ? getBareJidFromJid(from) : null;\n        } else {\n            this.from = from;\n        }\n        // whether the handler is a user handler or a system handler\n        this.user = true;\n    }\n\n    /**\n     * Returns the XML namespace attribute on an element.\n     * If `ignoreNamespaceFragment` was passed in for this handler, then the\n     * URL fragment will be stripped.\n     * @param {Element} elem - The XML element with the namespace.\n     * @return {string} - The namespace, with optionally the fragment stripped.\n     */\n    getNamespace(elem) {\n        let elNamespace = elem.getAttribute('xmlns');\n        if (elNamespace && this.options.ignoreNamespaceFragment) {\n            elNamespace = elNamespace.split('#')[0];\n        }\n        return elNamespace;\n    }\n\n    /**\n     * Tests if a stanza matches the namespace set for this Handler.\n     * @param {Element} elem - The XML element to test.\n     * @return {boolean} - true if the stanza matches and false otherwise.\n     */\n    namespaceMatch(elem) {\n        let nsMatch = false;\n        if (!this.ns) {\n            return true;\n        } else {\n            forEachChild(\n                elem,\n                null,\n                /** @param {Element} elem */\n                (elem) => {\n                    if (this.getNamespace(elem) === this.ns) {\n                        nsMatch = true;\n                    }\n                }\n            );\n            return nsMatch || this.getNamespace(elem) === this.ns;\n        }\n    }\n\n    /**\n     * Tests if a stanza matches the Handler.\n     * @param {Element} elem - The XML element to test.\n     * @return {boolean} - true if the stanza matches and false otherwise.\n     */\n    isMatch(elem) {\n        let from = elem.getAttribute('from');\n        if (this.options.matchBareFromJid) {\n            from = getBareJidFromJid(from);\n        }\n        const elem_type = elem.getAttribute('type');\n        if (\n            this.namespaceMatch(elem) &&\n            (!this.name || isTagEqual(elem, this.name)) &&\n            (!this.type ||\n                (Array.isArray(this.type) ? this.type.indexOf(elem_type) !== -1 : elem_type === this.type)) &&\n            (!this.id || elem.getAttribute('id') === this.id) &&\n            (!this.from || from === this.from)\n        ) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Run the callback on a matching stanza.\n     * @param {Element} elem - The DOM element that triggered the Handler.\n     * @return {boolean} - A boolean indicating if the handler should remain active.\n     */\n    run(elem) {\n        let result = null;\n        try {\n            result = this.handler(elem);\n        } catch (e) {\n            handleError(e);\n            throw e;\n        }\n        return result;\n    }\n\n    /**\n     * Get a String representation of the Handler object.\n     * @return {string}\n     */\n    toString() {\n        return '{Handler: ' + this.handler + '(' + this.name + ',' + this.id + ',' + this.ns + ')}';\n    }\n}\n\nexport default Handler;\n", "/**\n * _Private_ helper class for managing timed handlers.\n *\n * A Strophe.TimedHandler encapsulates a user provided callback that\n * should be called after a certain period of time or at regular\n * intervals.  The return value of the callback determines whether the\n * Strophe.TimedHandler will continue to fire.\n *\n * Users will not use Strophe.TimedHandler objects directly, but instead\n * they will use {@link Strophe.Connection#addTimedHandler|addTimedHandler()} and\n * {@link Strophe.Connection#deleteTimedHandler|deleteTimedHandler()}.\n *\n * @memberof Strophe\n */\nclass TimedHandler {\n    /**\n     * Create and initialize a new Strophe.TimedHandler object.\n     * @param {number} period - The number of milliseconds to wait before the\n     *     handler is called.\n     * @param {Function} handler - The callback to run when the handler fires.  This\n     *     function should take no arguments.\n     */\n    constructor(period, handler) {\n        this.period = period;\n        this.handler = handler;\n        this.lastCalled = new Date().getTime();\n        this.user = true;\n    }\n\n    /**\n     * Run the callback for the Strophe.TimedHandler.\n     *\n     * @return {boolean} Returns the result of running the handler,\n     *  which is `true` if the Strophe.TimedHandler should be called again,\n     *  and `false` otherwise.\n     */\n    run() {\n        this.lastCalled = new Date().getTime();\n        return this.handler();\n    }\n\n    /**\n     * Reset the last called time for the Strophe.TimedHandler.\n     */\n    reset() {\n        this.lastCalled = new Date().getTime();\n    }\n\n    /**\n     * Get a string representation of the Strophe.TimedHandler object.\n     * @return {string}\n     */\n    toString() {\n        return '{TimedHandler: ' + this.handler + '(' + this.period + ')}';\n    }\n}\n\nexport default TimedHandler;\n", "/**\n * @typedef {import(\"./connection.js\").default} Connection\n */\n\n/**\n * Encapsulates an SASL authentication mechanism.\n *\n * User code may override the priority for each mechanism or disable it completely.\n * See <priority> for information about changing priority and <test> for informatian on\n * how to disable a mechanism.\n *\n * By default, all mechanisms are enabled and t_he priorities are\n *\n *     SCRAM-SHA-512 - 72\n *     SCRAM-SHA-384 - 71\n *     SCRAM-SHA-256 - 70\n *     SCRAM-SHA-1   - 60\n *     PLAIN         - 50\n *     OAUTHBEARER   - 40\n *     X-OAUTH2      - 30\n *     ANONYMOUS     - 20\n *     EXTERNAL      - 10\n *\n * See: {@link Strophe.Connection#registerSASLMechanisms}\n */\nclass SASLMechanism {\n    /**\n     * PrivateConstructor: Strophe.SASLMechanism\n     * SASL auth mechanism abstraction.\n     * @param {String} [name] - SASL Mechanism name.\n     * @param {Boolean} [isClientFirst] - If client should send response first without challenge.\n     * @param {Number} [priority] - Priority.\n     */\n    constructor(name, isClientFirst, priority) {\n        /** Mechanism name. */\n        this.mechname = name;\n\n        /**\n         * If client sends response without initial server challenge.\n         */\n        this.isClientFirst = isClientFirst;\n\n        /**\n         * Determines which {@link SASLMechanism} is chosen for authentication (Higher is better).\n         * Users may override this to prioritize mechanisms differently.\n         *\n         * Example: (This will cause Strophe to choose the mechanism that the server sent first)\n         *\n         * > Strophe.SASLPlain.priority = Strophe.SASLSHA1.priority;\n         *\n         * See <SASL mechanisms> for a list of available mechanisms.\n         */\n        this.priority = priority;\n    }\n\n    /**\n     * Checks if mechanism able to run.\n     * To disable a mechanism, make this return false;\n     *\n     * To disable plain authentication run\n     * > Strophe.SASLPlain.test = function() {\n     * >   return false;\n     * > }\n     *\n     * See <SASL mechanisms> for a list of available mechanisms.\n     * @param {Connection} connection - Target Connection.\n     * @return {boolean} If mechanism was able to run.\n     */\n    // eslint-disable-next-line class-methods-use-this, no-unused-vars\n    test(connection) {\n        return true;\n    }\n\n    /**\n     * Called before starting mechanism on some connection.\n     * @param {Connection} connection - Target Connection.\n     */\n    onStart(connection) {\n        this._connection = connection;\n    }\n\n    /**\n     * Called by protocol implementation on incoming challenge.\n     *\n     * By deafult, if the client is expected to send data first (isClientFirst === true),\n     * this method is called with `challenge` as null on the first call,\n     * unless `clientChallenge` is overridden in the relevant subclass.\n     * @param {Connection} connection - Target Connection.\n     * @param {string} [challenge] - current challenge to handle.\n     * @return {string|Promise<string|false>} Mechanism response.\n     */\n    // eslint-disable-next-line no-unused-vars, class-methods-use-this\n    onChallenge(connection, challenge) {\n        throw new Error('You should implement challenge handling!');\n    }\n\n    /**\n     * Called by the protocol implementation if the client is expected to send\n     * data first in the authentication exchange (i.e. isClientFirst === true).\n     * @param {Connection} connection - Target Connection.\n     * @return {string|Promise<string|false>} Mechanism response.\n     */\n    clientChallenge(connection) {\n        if (!this.isClientFirst) {\n            throw new Error('clientChallenge should not be called if isClientFirst is false!');\n        }\n        return this.onChallenge(connection);\n    }\n\n    /**\n     * Protocol informs mechanism implementation about SASL failure.\n     */\n    onFailure() {\n        this._connection = null;\n    }\n\n    /**\n     * Protocol informs mechanism implementation about SASL success.\n     */\n    onSuccess() {\n        this._connection = null;\n    }\n}\n\nexport default SASLMechanism;\n", "/**\n * @typedef {import(\"./connection.js\").default} Connection\n */\nimport SASLMechanism from './sasl.js';\n\nclass SASLAnonymous extends SASLMechanism {\n    /**\n     * SASL ANONYMOUS authentication.\n     */\n    constructor(mechname = 'ANONYMOUS', isClientFirst = false, priority = 20) {\n        super(mechname, isClientFirst, priority);\n    }\n\n    /**\n     * @param {Connection} connection\n     */\n    // eslint-disable-next-line class-methods-use-this\n    test(connection) {\n        return connection.authcid === null;\n    }\n}\n\nexport default SASLAnonymous;\n", "/**\n * @typedef {import(\"./connection.js\").default} Connection\n */\n\nimport SASLMechanism from './sasl.js';\n\nclass SASLExternal extends SASLMechanism {\n    /**\n     * SASL EXTERNAL authentication.\n     *\n     * The EXTERNAL mechanism allows a client to request the server to use\n     * credentials established by means external to the mechanism to\n     * authenticate the client. The external means may be, for instance,\n     * TLS services.\n     */\n    constructor(mechname = 'EXTERNAL', isClientFirst = true, priority = 10) {\n        super(mechname, isClientFirst, priority);\n    }\n\n    /**\n     * @param {Connection} connection\n     */\n    // eslint-disable-next-line class-methods-use-this\n    onChallenge(connection) {\n        /* According to XEP-178, an authzid SHOULD NOT be presented when the\n         * authcid contained or implied in the client certificate is the JID (i.e.\n         * authzid) with which the user wants to log in as.\n         *\n         * To NOT send the authzid, the user should therefore set the authcid equal\n         * to the JID when instantiating a new Strophe.Connection object.\n         */\n        return connection.authcid === connection.authzid ? '' : connection.authzid;\n    }\n}\n\nexport default SASLExternal;\n", "/**\n * @typedef {import(\"./connection.js\").default} Connection\n */\nimport SASLMechanism from './sasl.js';\nimport utils from './utils';\n\nclass SASLOAuthBearer extends SASLMechanism {\n    /**\n     * SASL OAuth Bearer authentication.\n     */\n    constructor(mechname = 'OAUTHBEARER', isClientFirst = true, priority = 40) {\n        super(mechname, isClientFirst, priority);\n    }\n\n    /**\n     * @param {Connection} connection\n     */\n    // eslint-disable-next-line class-methods-use-this\n    test(connection) {\n        return connection.pass !== null;\n    }\n\n    /**\n     * @param {Connection} connection\n     */\n    // eslint-disable-next-line class-methods-use-this\n    onChallenge(connection) {\n        let auth_str = 'n,';\n        if (connection.authcid !== null) {\n            auth_str = auth_str + 'a=' + connection.authzid;\n        }\n        auth_str = auth_str + ',';\n        auth_str = auth_str + '\\u0001';\n        auth_str = auth_str + 'auth=Bearer ';\n        auth_str = auth_str + connection.pass;\n        auth_str = auth_str + '\\u0001';\n        auth_str = auth_str + '\\u0001';\n        return utils.utf16to8(auth_str);\n    }\n}\n\nexport default SASLOAuthBearer;\n", "/**\n * @typedef {import(\"./connection.js\").default} Connection\n */\nimport SASLMechanism from './sasl.js';\nimport utils from './utils';\n\nclass SASLPlain extends SASLMechanism {\n    /**\n     * SASL PLAIN authentication.\n     */\n    constructor(mechname = 'PLAIN', isClientFirst = true, priority = 50) {\n        super(mechname, isClientFirst, priority);\n    }\n\n    /**\n     * @param {Connection} connection\n     */\n    // eslint-disable-next-line class-methods-use-this\n    test(connection) {\n        return connection.authcid !== null;\n    }\n\n    /**\n     * @param {Connection} connection\n     */\n    // eslint-disable-next-line class-methods-use-this\n    onChallenge(connection) {\n        const { authcid, authzid, domain, pass } = connection;\n        if (!domain) {\n            throw new Error('SASLPlain onChallenge: domain is not defined!');\n        }\n        // Only include authzid if it differs from authcid.\n        // See: https://tools.ietf.org/html/rfc6120#section-6.3.8\n        let auth_str = authzid !== `${authcid}@${domain}` ? authzid : '';\n        auth_str = auth_str + '\\u0000';\n        auth_str = auth_str + authcid;\n        auth_str = auth_str + '\\u0000';\n        auth_str = auth_str + pass;\n        return utils.utf16to8(auth_str);\n    }\n}\n\nexport default SASLPlain;\n", "/**\n * @typedef {import(\"./connection.js\").default} Connection\n */\nimport utils from './utils';\nimport log from './log.js';\n\n/**\n * @param {string} authMessage\n * @param {ArrayBufferLike} clientKey\n * @param {string} hashName\n */\nasync function scramClientProof(authMessage, clientKey, hashName) {\n    const storedKey = await crypto.subtle.importKey(\n        'raw',\n        await crypto.subtle.digest(hashName, clientKey),\n        { 'name': 'HMAC', 'hash': hashName },\n        false,\n        ['sign']\n    );\n    const clientSignature = await crypto.subtle.sign('HMAC', storedKey, utils.stringToArrayBuf(authMessage));\n\n    return utils.xorArrayBuffers(clientKey, clientSignature);\n}\n\n/**\n * This function parses the information in a SASL SCRAM challenge response,\n * into an object of the form\n * { nonce: String,\n *   salt:  ArrayBuffer,\n *   iter:  Int\n * }\n * Returns undefined on failure.\n * @param {string} challenge\n */\nfunction scramParseChallenge(challenge) {\n    let nonce, salt, iter;\n    const attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n    while (challenge.match(attribMatch)) {\n        const matches = challenge.match(attribMatch);\n        challenge = challenge.replace(matches[0], '');\n        switch (matches[1]) {\n            case 'r':\n                nonce = matches[2];\n                break;\n            case 's':\n                salt = utils.base64ToArrayBuf(matches[2]);\n                break;\n            case 'i':\n                iter = parseInt(matches[2], 10);\n                break;\n            case 'm':\n                // Mandatory but unknown extension, per RFC 5802 we should abort\n                return undefined;\n            default:\n                // Non-mandatory extension, per RFC 5802 we should ignore it\n                break;\n        }\n    }\n\n    // Consider iteration counts less than 4096 insecure, as reccommended by\n    // RFC 5802\n    if (isNaN(iter) || iter < 4096) {\n        log.warn('Failing SCRAM authentication because server supplied iteration count < 4096.');\n        return undefined;\n    }\n\n    if (!salt) {\n        log.warn('Failing SCRAM authentication because server supplied incorrect salt.');\n        return undefined;\n    }\n\n    return { 'nonce': nonce, 'salt': salt, 'iter': iter };\n}\n\n/**\n * Derive the client and server keys given a string password,\n * a hash name, and a bit length.\n * Returns an object of the following form:\n * { ck: ArrayBuffer, the client key\n *   sk: ArrayBuffer, the server key\n * }\n * @param {string} password\n * @param {BufferSource} salt\n * @param {number} iter\n * @param {string} hashName\n * @param {number} hashBits\n */\nasync function scramDeriveKeys(password, salt, iter, hashName, hashBits) {\n    const saltedPasswordBits = await crypto.subtle.deriveBits(\n        { 'name': 'PBKDF2', 'salt': salt, 'iterations': iter, 'hash': { 'name': hashName } },\n        await crypto.subtle.importKey('raw', utils.stringToArrayBuf(password), 'PBKDF2', false, ['deriveBits']),\n        hashBits\n    );\n    const saltedPassword = await crypto.subtle.importKey(\n        'raw',\n        saltedPasswordBits,\n        { 'name': 'HMAC', 'hash': hashName },\n        false,\n        ['sign']\n    );\n\n    return {\n        'ck': await crypto.subtle.sign('HMAC', saltedPassword, utils.stringToArrayBuf('Client Key')),\n        'sk': await crypto.subtle.sign('HMAC', saltedPassword, utils.stringToArrayBuf('Server Key')),\n    };\n}\n\n/**\n * @param {string} authMessage\n * @param {BufferSource} sk\n * @param {string} hashName\n */\nasync function scramServerSign(authMessage, sk, hashName) {\n    const serverKey = await crypto.subtle.importKey('raw', sk, { 'name': 'HMAC', 'hash': hashName }, false, ['sign']);\n\n    return crypto.subtle.sign('HMAC', serverKey, utils.stringToArrayBuf(authMessage));\n}\n\n/**\n * Generate an ASCII nonce (not containing the ',' character)\n * @return {string}\n */\nfunction generate_cnonce() {\n    // generate 16 random bytes of nonce, base64 encoded\n    const bytes = new Uint8Array(16);\n    return utils.arrayBufToBase64(crypto.getRandomValues(bytes).buffer);\n}\n\n/**\n * @typedef {Object} Password\n * @property {string} Password.name\n * @property {string} Password.ck\n * @property {string} Password.sk\n * @property {number} Password.iter\n * @property {string} salt\n */\n\nconst scram = {\n    /**\n     * On success, sets\n     * connection_sasl_data[\"server-signature\"]\n     * and\n     * connection._sasl_data.keys\n     *\n     * The server signature should be verified after this function completes..\n     *\n     * On failure, returns connection._sasl_failure_cb();\n     * @param {Connection} connection\n     * @param {string} challenge\n     * @param {string} hashName\n     * @param {number} hashBits\n     */\n    async scramResponse(connection, challenge, hashName, hashBits) {\n        const cnonce = connection._sasl_data.cnonce;\n        const challengeData = scramParseChallenge(challenge);\n\n        // The RFC requires that we verify the (server) nonce has the client\n        // nonce as an initial substring.\n        if (!challengeData && challengeData?.nonce.slice(0, cnonce.length) !== cnonce) {\n            log.warn('Failing SCRAM authentication because server supplied incorrect nonce.');\n            connection._sasl_data = {};\n            return connection._sasl_failure_cb();\n        }\n\n        let clientKey, serverKey;\n\n        const { pass } = connection;\n\n        if (typeof connection.pass === 'string' || connection.pass instanceof String) {\n            const keys = await scramDeriveKeys(\n                /** @type {string} */ (pass),\n                challengeData.salt,\n                challengeData.iter,\n                hashName,\n                hashBits\n            );\n            clientKey = keys.ck;\n            serverKey = keys.sk;\n        } else if (\n            // Either restore the client key and server key passed in, or derive new ones\n            /** @type {Password} */ (pass)?.name === hashName &&\n            /** @type {Password} */ (pass)?.salt === utils.arrayBufToBase64(challengeData.salt) &&\n            /** @type {Password} */ (pass)?.iter === challengeData.iter\n        ) {\n            const { ck, sk } = /** @type {Password} */ (pass);\n            clientKey = utils.base64ToArrayBuf(ck);\n            serverKey = utils.base64ToArrayBuf(sk);\n        } else {\n            return connection._sasl_failure_cb();\n        }\n\n        const clientFirstMessageBare = connection._sasl_data['client-first-message-bare'];\n        const serverFirstMessage = challenge;\n        const clientFinalMessageBare = `c=biws,r=${challengeData.nonce}`;\n\n        const authMessage = `${clientFirstMessageBare},${serverFirstMessage},${clientFinalMessageBare}`;\n\n        const clientProof = await scramClientProof(authMessage, clientKey, hashName);\n        const serverSignature = await scramServerSign(authMessage, serverKey, hashName);\n\n        connection._sasl_data['server-signature'] = utils.arrayBufToBase64(serverSignature);\n        connection._sasl_data.keys = {\n            'name': hashName,\n            'iter': challengeData.iter,\n            'salt': utils.arrayBufToBase64(challengeData.salt),\n            'ck': utils.arrayBufToBase64(clientKey),\n            'sk': utils.arrayBufToBase64(serverKey),\n        };\n\n        return `${clientFinalMessageBare},p=${utils.arrayBufToBase64(clientProof)}`;\n    },\n\n    /**\n     * Returns a string containing the client first message\n     * @param {Connection} connection\n     * @param {string} test_cnonce\n     */\n    clientChallenge(connection, test_cnonce) {\n        const cnonce = test_cnonce || generate_cnonce();\n        const client_first_message_bare = `n=${connection.authcid},r=${cnonce}`;\n        connection._sasl_data.cnonce = cnonce;\n        connection._sasl_data['client-first-message-bare'] = client_first_message_bare;\n        return `n,,${client_first_message_bare}`;\n    },\n};\n\nexport { scram as default };\n", "/**\n * @typedef {import(\"./connection.js\").default} Connection\n */\nimport SASLMechanism from './sasl.js';\nimport scram from './scram.js';\n\nclass SASLSHA1 extends SASLMechanism {\n    /**\n     * SASL SCRAM SHA 1 authentication.\n     */\n    constructor(mechname = 'SCRAM-SHA-1', isClientFirst = true, priority = 60) {\n        super(mechname, isClientFirst, priority);\n    }\n\n    /**\n     * @param {Connection} connection\n     */\n    // eslint-disable-next-line class-methods-use-this\n    test(connection) {\n        return connection.authcid !== null;\n    }\n\n    /**\n     * @param {Connection} connection\n     * @param {string} [challenge]\n     * @return {Promise<string|false>} Mechanism response.\n     */\n    // eslint-disable-next-line class-methods-use-this\n    async onChallenge(connection, challenge) {\n        return await scram.scramResponse(connection, challenge, 'SHA-1', 160);\n    }\n\n    /**\n     * @param {Connection} connection\n     * @param {string} [test_cnonce]\n     */\n    // eslint-disable-next-line class-methods-use-this\n    clientChallenge(connection, test_cnonce) {\n        return scram.clientChallenge(connection, test_cnonce);\n    }\n}\n\nexport default SASLSHA1;\n", "/**\n * @typedef {import(\"./connection.js\").default} Connection\n */\nimport SASLMechanism from './sasl.js';\nimport scram from './scram.js';\n\nclass SASLSHA256 extends SASLMechanism {\n    /**\n     * SASL SCRAM SHA 256 authentication.\n     */\n    constructor(mechname = 'SCRAM-SHA-256', isClientFirst = true, priority = 70) {\n        super(mechname, isClientFirst, priority);\n    }\n\n    /**\n     * @param {Connection} connection\n     */\n    // eslint-disable-next-line class-methods-use-this\n    test(connection) {\n        return connection.authcid !== null;\n    }\n\n    /**\n     * @param {Connection} connection\n     * @param {string} [challenge]\n     */\n    // eslint-disable-next-line class-methods-use-this\n    async onChallenge(connection, challenge) {\n        return await scram.scramResponse(connection, challenge, 'SHA-256', 256);\n    }\n\n    /**\n     * @param {Connection} connection\n     * @param {string} [test_cnonce]\n     */\n    // eslint-disable-next-line class-methods-use-this\n    clientChallenge(connection, test_cnonce) {\n        return scram.clientChallenge(connection, test_cnonce);\n    }\n}\n\nexport default SASLSHA256;\n", "/**\n * @typedef {import(\"./connection.js\").default} Connection\n */\nimport SASLMechanism from './sasl.js';\nimport scram from './scram.js';\n\nclass SASLSHA384 extends SASLMechanism {\n    /**\n     * SASL SCRAM SHA 384 authentication.\n     */\n    constructor(mechname = 'SCRAM-SHA-384', isClientFirst = true, priority = 71) {\n        super(mechname, isClientFirst, priority);\n    }\n\n    /**\n     * @param {Connection} connection\n     */\n    // eslint-disable-next-line class-methods-use-this\n    test(connection) {\n        return connection.authcid !== null;\n    }\n\n    /**\n     * @param {Connection} connection\n     * @param {string} [challenge]\n     */\n    // eslint-disable-next-line class-methods-use-this\n    async onChallenge(connection, challenge) {\n        return await scram.scramResponse(connection, challenge, 'SHA-384', 384);\n    }\n\n    /**\n     * @param {Connection} connection\n     * @param {string} [test_cnonce]\n     */\n    // eslint-disable-next-line class-methods-use-this\n    clientChallenge(connection, test_cnonce) {\n        return scram.clientChallenge(connection, test_cnonce);\n    }\n}\n\nexport default SASLSHA384;\n", "/**\n * @typedef {import(\"./connection.js\").default} Connection\n */\nimport SASLMechanism from './sasl.js';\nimport scram from './scram.js';\n\nclass SASLSHA512 extends SASLMechanism {\n    /**\n     * SASL SCRAM SHA 512 authentication.\n     */\n    constructor(mechname = 'SCRAM-SHA-512', isClientFirst = true, priority = 72) {\n        super(mechname, isClientFirst, priority);\n    }\n\n    /**\n     * @param {Connection} connection\n     */\n    // eslint-disable-next-line class-methods-use-this\n    test(connection) {\n        return connection.authcid !== null;\n    }\n\n    /**\n     * @param {Connection} connection\n     * @param {string} [challenge]\n     */\n    // eslint-disable-next-line class-methods-use-this\n    async onChallenge(connection, challenge) {\n        return await scram.scramResponse(connection, challenge, 'SHA-512', 512);\n    }\n\n    /**\n     * @param {Connection} connection\n     * @param {string} [test_cnonce]\n     */\n    // eslint-disable-next-line class-methods-use-this\n    clientChallenge(connection, test_cnonce) {\n        return scram.clientChallenge(connection, test_cnonce);\n    }\n}\n\nexport default SASLSHA512;\n", "import SASLMechanism from './sasl.js';\nimport utils from './utils';\n\n/**\n * @typedef {import(\"./connection.js\").default} Connection\n */\n\nclass SASLXOAuth2 extends SASLMechanism {\n    /**\n     * SASL X-OAuth2 authentication.\n     */\n    constructor(mechname = 'X-OAUTH2', isClientFirst = true, priority = 30) {\n        super(mechname, isClientFirst, priority);\n    }\n\n    /**\n     * @param {Connection} connection\n     */\n    // eslint-disable-next-line class-methods-use-this\n    test(connection) {\n        return connection.pass !== null;\n    }\n\n    /**\n     * @param {Connection} connection\n     */\n    // eslint-disable-next-line class-methods-use-this\n    onChallenge(connection) {\n        let auth_str = '\\u0000';\n        if (connection.authcid !== null) {\n            auth_str = auth_str + connection.authzid;\n        }\n        auth_str = auth_str + '\\u0000';\n        auth_str = auth_str + connection.pass;\n        return utils.utf16to8(auth_str);\n    }\n}\n\nexport default SASLXOAuth2;\n", "class SessionError extends Error {\n    /**\n     * @param {string} message\n     */\n    constructor(message) {\n        super(message);\n        this.name = 'StropheSessionError';\n    }\n}\n\nexport { SessionError };\n", "/**\n * A JavaScript library to enable XMPP over Websocket in Strophejs.\n *\n * This file implements XMPP over WebSockets for Strophejs.\n * If a Connection is established with a Websocket url (ws://...)\n * Strophe will use WebSockets.\n * For more information on XMPP-over-WebSocket see RFC 7395:\n * http://tools.ietf.org/html/rfc7395\n *\n * WebSocket support implemented by Andreas Guth (andreas.guth@rwth-aachen.de)\n */\n\n/* global clearTimeout, location */\n\n/**\n * @typedef {import(\"./connection.js\").default} Connection\n */\n\nimport { DOMParser, WebSocket } from './shims';\nimport Builder, { $build } from './builder.js';\nimport log from './log.js';\nimport { NS, ErrorCondition, Status } from './constants.js';\n\n/**\n * Helper class that handles WebSocket Connections\n *\n * The WebSocket class is used internally by Connection\n * to encapsulate WebSocket sessions. It is not meant to be used from user's code.\n */\nclass Websocket {\n    /**\n     * Create and initialize a WebSocket object.\n     * Currently only sets the connection Object.\n     * @param {Connection} connection - The Connection that will use WebSockets.\n     */\n    constructor(connection) {\n        this._conn = connection;\n        this.strip = 'wrapper';\n\n        const service = connection.service;\n        if (service.indexOf('ws:') !== 0 && service.indexOf('wss:') !== 0) {\n            // If the service is not an absolute URL, assume it is a path and put the absolute\n            // URL together from options, current URL and the path.\n            let new_service = '';\n            if (connection.options.protocol === 'ws' && location.protocol !== 'https:') {\n                new_service += 'ws';\n            } else {\n                new_service += 'wss';\n            }\n\n            new_service += '://' + location.host;\n            if (service.indexOf('/') !== 0) {\n                new_service += location.pathname + service;\n            } else {\n                new_service += service;\n            }\n            connection.service = new_service;\n        }\n    }\n\n    /**\n     * _Private_ helper function to generate the <stream> start tag for WebSockets\n     * @private\n     * @return {Builder} - A Builder with a <stream> element.\n     */\n    _buildStream() {\n        return $build('open', {\n            'xmlns': NS.FRAMING,\n            'to': this._conn.domain,\n            'version': '1.0',\n        });\n    }\n\n    /**\n     * _Private_ checks a message for stream:error\n     * @private\n     * @param {Element} bodyWrap - The received stanza.\n     * @param {number} connectstatus - The ConnectStatus that will be set on error.\n     * @return {boolean} - true if there was a streamerror, false otherwise.\n     */\n    _checkStreamError(bodyWrap, connectstatus) {\n        let errors;\n        if (bodyWrap.getElementsByTagNameNS) {\n            errors = bodyWrap.getElementsByTagNameNS(NS.STREAM, 'error');\n        } else {\n            errors = bodyWrap.getElementsByTagName('stream:error');\n        }\n        if (errors.length === 0) {\n            return false;\n        }\n\n        const error = errors[0];\n\n        let condition = '';\n        let text = '';\n\n        const ns = 'urn:ietf:params:xml:ns:xmpp-streams';\n        for (let i = 0; i < error.childNodes.length; i++) {\n            const e = error.childNodes[i];\n            if (e.nodeType === e.ELEMENT_NODE) {\n                /** @type {Element} */\n                const el = /** @type {any} */ (e);\n                if (el.getAttribute('xmlns') !== ns) {\n                    break;\n                }\n            }\n            if (e.nodeName === 'text') {\n                text = e.textContent;\n            } else {\n                condition = e.nodeName;\n            }\n        }\n\n        let errorString = 'WebSocket stream error: ';\n        if (condition) {\n            errorString += condition;\n        } else {\n            errorString += 'unknown';\n        }\n        if (text) {\n            errorString += ' - ' + text;\n        }\n        log.error(errorString);\n\n        // close the connection on stream_error\n        this._conn._changeConnectStatus(connectstatus, condition);\n        this._conn._doDisconnect();\n        return true;\n    }\n\n    /**\n     * Reset the connection.\n     *\n     * This function is called by the reset function of the Strophe Connection.\n     * Is not needed by WebSockets.\n     */\n    // eslint-disable-next-line class-methods-use-this\n    _reset() {\n        return;\n    }\n\n    /**\n     * _Private_ function called by Connection.connect\n     *\n     * Creates a WebSocket for a connection and assigns Callbacks to it.\n     * Does nothing if there already is a WebSocket.\n     */\n    _connect() {\n        // Ensure that there is no open WebSocket from a previous Connection.\n        this._closeSocket();\n\n        /**\n         * @typedef {Object} WebsocketLike\n         * @property {(str: string) => void} WebsocketLike.send\n         * @property {function(): void} WebsocketLike.close\n         * @property {function(): void} WebsocketLike.onopen\n         * @property {(e: ErrorEvent) => void} WebsocketLike.onerror\n         * @property {(e: CloseEvent) => void} WebsocketLike.onclose\n         * @property {(message: MessageEvent) => void} WebsocketLike.onmessage\n         * @property {string} WebsocketLike.readyState\n         */\n\n        /** @type {import('ws')|WebSocket|WebsocketLike} */\n        this.socket = new WebSocket(this._conn.service, 'xmpp');\n        this.socket.onopen = () => this._onOpen();\n        /** @param {ErrorEvent} e */\n        this.socket.onerror = (e) => this._onError(e);\n        /** @param {CloseEvent} e */\n        this.socket.onclose = (e) => this._onClose(e);\n        /**\n         * Gets replaced with this._onMessage once _onInitialMessage is called\n         * @param {MessageEvent} message\n         */\n        this.socket.onmessage = (message) => this._onInitialMessage(message);\n    }\n\n    /**\n     * _Private_ function called by Connection._connect_cb\n     * checks for stream:error\n     * @param {Element} bodyWrap - The received stanza.\n     */\n    _connect_cb(bodyWrap) {\n        const error = this._checkStreamError(bodyWrap, Status.CONNFAIL);\n        if (error) {\n            return Status.CONNFAIL;\n        }\n    }\n\n    /**\n     * _Private_ function that checks the opening <open /> tag for errors.\n     *\n     * Disconnects if there is an error and returns false, true otherwise.\n     * @private\n     * @param {Element} message - Stanza containing the <open /> tag.\n     */\n    _handleStreamStart(message) {\n        let error = null;\n\n        // Check for errors in the <open /> tag\n        const ns = message.getAttribute('xmlns');\n        if (typeof ns !== 'string') {\n            error = 'Missing xmlns in <open />';\n        } else if (ns !== NS.FRAMING) {\n            error = 'Wrong xmlns in <open />: ' + ns;\n        }\n\n        const ver = message.getAttribute('version');\n        if (typeof ver !== 'string') {\n            error = 'Missing version in <open />';\n        } else if (ver !== '1.0') {\n            error = 'Wrong version in <open />: ' + ver;\n        }\n\n        if (error) {\n            this._conn._changeConnectStatus(Status.CONNFAIL, error);\n            this._conn._doDisconnect();\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * _Private_ function that handles the first connection messages.\n     *\n     * On receiving an opening stream tag this callback replaces itself with the real\n     * message handler. On receiving a stream error the connection is terminated.\n     * @param {MessageEvent} message\n     */\n    _onInitialMessage(message) {\n        if (message.data.indexOf('<open ') === 0 || message.data.indexOf('<?xml') === 0) {\n            // Strip the XML Declaration, if there is one\n            const data = message.data.replace(/^(<\\?.*?\\?>\\s*)*/, '');\n            if (data === '') return;\n\n            const streamStart = new DOMParser().parseFromString(data, 'text/xml').documentElement;\n            this._conn.xmlInput(streamStart);\n            this._conn.rawInput(message.data);\n\n            //_handleStreamSteart will check for XML errors and disconnect on error\n            if (this._handleStreamStart(streamStart)) {\n                //_connect_cb will check for stream:error and disconnect on error\n                this._connect_cb(streamStart);\n            }\n        } else if (message.data.indexOf('<close ') === 0) {\n            // <close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing />\n            // Parse the raw string to an XML element\n            const parsedMessage = new DOMParser().parseFromString(message.data, 'text/xml').documentElement;\n            // Report this input to the raw and xml handlers\n            this._conn.xmlInput(parsedMessage);\n            this._conn.rawInput(message.data);\n            const see_uri = parsedMessage.getAttribute('see-other-uri');\n            if (see_uri) {\n                const service = this._conn.service;\n                // Valid scenarios: WSS->WSS, WS->ANY\n                const isSecureRedirect =\n                    (service.indexOf('wss:') >= 0 && see_uri.indexOf('wss:') >= 0) || service.indexOf('ws:') >= 0;\n                if (isSecureRedirect) {\n                    this._conn._changeConnectStatus(\n                        Status.REDIRECT,\n                        'Received see-other-uri, resetting connection'\n                    );\n                    this._conn.reset();\n                    this._conn.service = see_uri;\n                    this._connect();\n                }\n            } else {\n                this._conn._changeConnectStatus(Status.CONNFAIL, 'Received closing stream');\n                this._conn._doDisconnect();\n            }\n        } else {\n            this._replaceMessageHandler();\n            const string = this._streamWrap(message.data);\n            const elem = new DOMParser().parseFromString(string, 'text/xml').documentElement;\n            this._conn._connect_cb(elem, null, message.data);\n        }\n    }\n\n    /**\n     * Called by _onInitialMessage in order to replace itself with the general message handler.\n     * This method is overridden by WorkerWebsocket, which manages a\n     * websocket connection via a service worker and doesn't have direct access\n     * to the socket.\n     */\n    _replaceMessageHandler() {\n        /** @param {MessageEvent} m */\n        this.socket.onmessage = (m) => this._onMessage(m);\n    }\n\n    /**\n     * _Private_ function called by Connection.disconnect\n     * Disconnects and sends a last stanza if one is given\n     * @param {Element|Builder} [pres] - This stanza will be sent before disconnecting.\n     */\n    _disconnect(pres) {\n        if (this.socket && this.socket.readyState !== WebSocket.CLOSED) {\n            if (pres) {\n                this._conn.send(pres);\n            }\n            const close = $build('close', { 'xmlns': NS.FRAMING });\n            this._conn.xmlOutput(close.tree());\n            const closeString = Builder.serialize(close);\n            this._conn.rawOutput(closeString);\n            try {\n                this.socket.send(closeString);\n            } catch (e) {\n                log.warn(\"Couldn't send <close /> tag.\");\n            }\n        }\n        setTimeout(() => this._conn._doDisconnect(), 0);\n    }\n\n    /**\n     * _Private_ function to disconnect.\n     * Just closes the Socket for WebSockets\n     */\n    _doDisconnect() {\n        log.debug('WebSockets _doDisconnect was called');\n        this._closeSocket();\n    }\n\n    /**\n     * PrivateFunction _streamWrap\n     * _Private_ helper function to wrap a stanza in a <stream> tag.\n     * This is used so Strophe can process stanzas from WebSockets like BOSH\n     * @param {string} stanza\n     */\n    // eslint-disable-next-line class-methods-use-this\n    _streamWrap(stanza) {\n        return '<wrapper>' + stanza + '</wrapper>';\n    }\n\n    /**\n     * _Private_ function to close the WebSocket.\n     *\n     * Closes the socket if it is still open and deletes it\n     */\n    _closeSocket() {\n        if (this.socket) {\n            try {\n                this.socket.onclose = null;\n                this.socket.onerror = null;\n                this.socket.onmessage = null;\n                this.socket.close();\n            } catch (e) {\n                log.debug(e.message);\n            }\n        }\n        this.socket = null;\n    }\n\n    /**\n     * _Private_ function to check if the message queue is empty.\n     * @return {true} - True, because WebSocket messages are send immediately after queueing.\n     */\n    // eslint-disable-next-line class-methods-use-this\n    _emptyQueue() {\n        return true;\n    }\n\n    /**\n     * _Private_ function to handle websockets closing.\n     * @param {CloseEvent} [e]\n     */\n    _onClose(e) {\n        if (this._conn.connected && !this._conn.disconnecting) {\n            log.error('Websocket closed unexpectedly');\n            this._conn._doDisconnect();\n        } else if (e && e.code === 1006 && !this._conn.connected && this.socket) {\n            // in case the onError callback was not called (Safari 10 does not\n            // call onerror when the initial connection fails) we need to\n            // dispatch a CONNFAIL status update to be consistent with the\n            // behavior on other browsers.\n            log.error('Websocket closed unexcectedly');\n            this._conn._changeConnectStatus(\n                Status.CONNFAIL,\n                'The WebSocket connection could not be established or was disconnected.'\n            );\n            this._conn._doDisconnect();\n        } else {\n            log.debug('Websocket closed');\n        }\n    }\n\n    /**\n     * @callback connectionCallback\n     * @param {Connection} connection\n     */\n\n    /**\n     * Called on stream start/restart when no stream:features\n     * has been received.\n     * @param {connectionCallback} callback\n     */\n    _no_auth_received(callback) {\n        log.error('Server did not offer a supported authentication mechanism');\n        this._conn._changeConnectStatus(Status.CONNFAIL, ErrorCondition.NO_AUTH_MECH);\n        callback?.call(this._conn);\n        this._conn._doDisconnect();\n    }\n\n    /**\n     * _Private_ timeout handler for handling non-graceful disconnection.\n     *\n     * This does nothing for WebSockets\n     */\n    _onDisconnectTimeout() {} // eslint-disable-line class-methods-use-this\n\n    /**\n     * _Private_ helper function that makes sure all pending requests are aborted.\n     */\n    _abortAllRequests() {} // eslint-disable-line class-methods-use-this\n\n    /**\n     * _Private_ function to handle websockets errors.\n     * @param {Object} error - The websocket error.\n     */\n    _onError(error) {\n        log.error('Websocket error ' + JSON.stringify(error));\n        this._conn._changeConnectStatus(\n            Status.CONNFAIL,\n            'The WebSocket connection could not be established or was disconnected.'\n        );\n        this._disconnect();\n    }\n\n    /**\n     * _Private_ function called by Connection._onIdle\n     * sends all queued stanzas\n     */\n    _onIdle() {\n        const data = this._conn._data;\n        if (data.length > 0 && !this._conn.paused) {\n            for (let i = 0; i < data.length; i++) {\n                if (data[i] !== null) {\n                    const stanza = data[i] === 'restart' ? this._buildStream().tree() : data[i];\n                    if (stanza === 'restart') throw new Error('Wrong type for stanza'); // Shut up tsc\n                    const rawStanza = Builder.serialize(stanza);\n                    this._conn.xmlOutput(stanza);\n                    this._conn.rawOutput(rawStanza);\n                    this.socket.send(rawStanza);\n                }\n            }\n            this._conn._data = [];\n        }\n    }\n\n    /**\n     * _Private_ function to handle websockets messages.\n     *\n     * This function parses each of the messages as if they are full documents.\n     * [TODO : We may actually want to use a SAX Push parser].\n     *\n     * Since all XMPP traffic starts with\n     * <stream:stream version='1.0'\n     *                xml:lang='en'\n     *                xmlns='jabber:client'\n     *                xmlns:stream='http://etherx.jabber.org/streams'\n     *                id='3697395463'\n     *                from='SERVER'>\n     *\n     * The first stanza will always fail to be parsed.\n     *\n     * Additionally, the seconds stanza will always be <stream:features> with\n     * the stream NS defined in the previous stanza, so we need to 'force'\n     * the inclusion of the NS in this stanza.\n     *\n     * @param {MessageEvent} message - The websocket message event\n     */\n    _onMessage(message) {\n        let elem;\n        // check for closing stream\n        const close = '<close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing\" />';\n        if (message.data === close) {\n            this._conn.rawInput(close);\n            this._conn.xmlInput(message);\n            if (!this._conn.disconnecting) {\n                this._conn._doDisconnect();\n            }\n            return;\n        } else if (message.data.search('<open ') === 0) {\n            // This handles stream restarts\n            elem = new DOMParser().parseFromString(message.data, 'text/xml').documentElement;\n            if (!this._handleStreamStart(elem)) {\n                return;\n            }\n        } else {\n            const data = this._streamWrap(message.data);\n            elem = new DOMParser().parseFromString(data, 'text/xml').documentElement;\n        }\n\n        if (this._checkStreamError(elem, Status.ERROR)) {\n            return;\n        }\n\n        //handle unavailable presence stanza before disconnecting\n        if (\n            this._conn.disconnecting &&\n            elem.firstElementChild.nodeName === 'presence' &&\n            elem.firstElementChild.getAttribute('type') === 'unavailable'\n        ) {\n            this._conn.xmlInput(elem);\n            this._conn.rawInput(Builder.serialize(elem));\n            // if we are already disconnecting we will ignore the unavailable stanza and\n            // wait for the </stream:stream> tag before we close the connection\n            return;\n        }\n        this._conn._dataRecv(elem, message.data);\n    }\n\n    /**\n     * _Private_ function to handle websockets connection setup.\n     * The opening stream tag is sent here.\n     * @private\n     */\n    _onOpen() {\n        log.debug('Websocket open');\n        const start = this._buildStream();\n        this._conn.xmlOutput(start.tree());\n\n        const startString = Builder.serialize(start);\n        this._conn.rawOutput(startString);\n        this.socket.send(startString);\n    }\n\n    /**\n     * _Private_ part of the Connection.send function for WebSocket\n     * Just flushes the messages that are in the queue\n     */\n    _send() {\n        this._conn.flush();\n    }\n\n    /**\n     * Send an xmpp:restart stanza.\n     */\n    _sendRestart() {\n        clearTimeout(this._conn._idleTimeout);\n        this._conn._onIdle.bind(this._conn)();\n    }\n}\n\nexport default Websocket;\n", "/**\n * @license MIT\n * @copyright JC Brand\n */\nimport Websocket from './websocket.js';\nimport log from './log.js';\nimport Builder, { $build } from './builder.js';\nimport { LOG_LEVELS, NS, Status } from './constants.js';\n\n/**\n * Helper class that handles a websocket connection inside a shared worker.\n */\nclass WorkerWebsocket extends Websocket {\n    /**\n     * @typedef {import(\"./connection.js\").default} Connection\n     */\n\n    /**\n     * Create and initialize a WorkerWebsocket object.\n     * @param {Connection} connection - The Connection\n     */\n    constructor(connection) {\n        super(connection);\n        this._conn = connection;\n        this.worker = new SharedWorker(this._conn.options.worker, 'Strophe XMPP Connection');\n        this.worker.onerror = (e) => {\n            console?.error(e);\n            log.error(`Shared Worker Error: ${e}`);\n        };\n    }\n\n    /**\n     * @private\n     */\n    _setSocket() {\n        this.socket = {\n            /** @param {string} str */\n            send: (str) => this.worker.port.postMessage(['send', str]),\n            close: () => this.worker.port.postMessage(['_closeSocket']),\n            onopen: () => {},\n            /** @param {ErrorEvent} e */\n            onerror: (e) => this._onError(e),\n            /** @param {CloseEvent} e */\n            onclose: (e) => this._onClose(e),\n            onmessage: () => {},\n            readyState: null,\n        };\n    }\n\n    _connect() {\n        this._setSocket();\n        /** @param {MessageEvent} m */\n        this._messageHandler = (m) => this._onInitialMessage(m);\n        this.worker.port.start();\n        this.worker.port.onmessage = (ev) => this._onWorkerMessage(ev);\n        this.worker.port.postMessage(['_connect', this._conn.service, this._conn.jid]);\n    }\n\n    /**\n     * @param {Function} callback\n     */\n    _attach(callback) {\n        this._setSocket();\n        /** @param {MessageEvent} m */\n        this._messageHandler = (m) => this._onMessage(m);\n        this._conn.connect_callback = callback;\n        this.worker.port.start();\n        this.worker.port.onmessage = (ev) => this._onWorkerMessage(ev);\n        this.worker.port.postMessage(['_attach', this._conn.service]);\n    }\n\n    /**\n     * @param {number} status\n     * @param {string} jid\n     */\n    _attachCallback(status, jid) {\n        if (status === Status.ATTACHED) {\n            this._conn.jid = jid;\n            this._conn.authenticated = true;\n            this._conn.connected = true;\n            this._conn.restored = true;\n            this._conn._changeConnectStatus(Status.ATTACHED);\n        } else if (status === Status.ATTACHFAIL) {\n            this._conn.authenticated = false;\n            this._conn.connected = false;\n            this._conn.restored = false;\n            this._conn._changeConnectStatus(Status.ATTACHFAIL);\n        }\n    }\n\n    /**\n     * @param {Element|Builder} pres - This stanza will be sent before disconnecting.\n     */\n    _disconnect(pres) {\n        pres && this._conn.send(pres);\n        const close = $build('close', { 'xmlns': NS.FRAMING });\n        this._conn.xmlOutput(close.tree());\n        const closeString = Builder.serialize(close);\n        this._conn.rawOutput(closeString);\n        this.worker.port.postMessage(['send', closeString]);\n        this._conn._doDisconnect();\n    }\n\n    _closeSocket() {\n        this.socket.close();\n    }\n\n    /**\n     * Called by _onInitialMessage in order to replace itself with the general message handler.\n     * This method is overridden by WorkerWebsocket, which manages a\n     * websocket connection via a service worker and doesn't have direct access\n     * to the socket.\n     */\n    _replaceMessageHandler() {\n        /** @param {MessageEvent} m */\n        this._messageHandler = (m) => this._onMessage(m);\n    }\n\n    /**\n     * function that handles messages received from the service worker\n     * @private\n     * @param {MessageEvent} ev\n     */\n    _onWorkerMessage(ev) {\n        const { data } = ev;\n        const method_name = data[0];\n        if (method_name === '_onMessage') {\n            this._messageHandler(data[1]);\n        } else if (method_name in this) {\n            try {\n                this[\n                    /** @type {'_attachCallback'|'_onOpen'|'_onClose'|'_onError'} */\n                    (method_name)\n                ].apply(this, ev.data.slice(1));\n            } catch (e) {\n                log.error(e);\n            }\n        } else if (method_name === 'log') {\n            /** @type {Object.<string, number>} */\n            const lmap = {\n                debug: LOG_LEVELS.DEBUG,\n                info: LOG_LEVELS.INFO,\n                warn: LOG_LEVELS.WARN,\n                error: LOG_LEVELS.ERROR,\n                fatal: LOG_LEVELS.FATAL,\n            };\n            const level = data[1];\n            const msg = data[2];\n            log.log(lmap[level], msg);\n        } else {\n            log.error(`Found unhandled service worker message: ${data}`);\n        }\n    }\n}\n\nexport default WorkerWebsocket;\n", "import log from './log.js';\nimport { xmlHtmlNode } from './utils.js';\n\nconst PARSE_ERROR_NS = 'http://www.w3.org/1999/xhtml';\n\n/**\n * @param {string} string\n * @param {boolean} [throwErrorIfInvalidNS]\n * @return {Element}\n */\nexport function toStanza(string, throwErrorIfInvalidNS) {\n    const doc = xmlHtmlNode(string);\n\n    if (doc.getElementsByTagNameNS(PARSE_ERROR_NS, 'parsererror').length) {\n        throw new Error(`Parser Error: ${string}`);\n    }\n\n    const node = doc.firstElementChild;\n\n    if (\n        ['message', 'iq', 'presence'].includes(node.nodeName.toLowerCase()) &&\n        node.namespaceURI !== 'jabber:client' &&\n        node.namespaceURI !== 'jabber:server'\n    ) {\n        const err_msg = `Invalid namespaceURI ${node.namespaceURI}`;\n        if (throwErrorIfInvalidNS) {\n            throw new Error(err_msg);\n        } else {\n            log.error(err_msg);\n        }\n    }\n    return node;\n}\n\n/**\n * A Stanza represents a XML element used in XMPP (commonly referred to as\n * stanzas).\n */\nexport class Stanza {\n    /**\n     * @param { string[] } strings\n     * @param { any[] } values\n     */\n    constructor(strings, values) {\n        this.strings = strings;\n        this.values = values;\n    }\n\n    /**\n     * @return { string }\n     */\n    toString() {\n        this.string =\n            this.string ||\n            this.strings.reduce((acc, str) => {\n                const idx = this.strings.indexOf(str);\n                const value = this.values.length > idx ? this.values[idx].toString() : '';\n                return acc + str + value;\n            }, '');\n        return this.string;\n    }\n\n    /**\n     * @return { Element }\n     */\n    tree() {\n        this.node = this.node ?? toStanza(this.toString(), true);\n        return this.node;\n    }\n}\n\n/**\n * Tagged template literal function which generates {@link Stanza } objects\n * @example stx`<presence type=\"${type}\" xmlns=\"jabber:client\"><show>${show}</show></presence>`\n *\n * @param { string[] } strings\n * @param { ...any } values\n */\nexport function stx(strings, ...values) {\n    return new Stanza(strings, values);\n}\n", "/*global globalThis*/\n\nimport * as shims from './shims.js';\nimport * as utils from './utils.js';\nimport Bosh from './bosh.js';\nimport Builder, { $build, $msg, $pres, $iq } from './builder.js';\nimport Connection from './connection.js';\nimport Handler from './handler.js';\nimport Request from './request.js';\nimport SASLAnonymous from './sasl-anon.js';\nimport SASLExternal from './sasl-external.js';\nimport SASLMechanism from './sasl.js';\nimport SASLOAuthBearer from './sasl-oauthbearer.js';\nimport SASLPlain from './sasl-plain.js';\nimport SASLSHA1 from './sasl-sha1.js';\nimport SASLSHA256 from './sasl-sha256.js';\nimport SASLSHA384 from './sasl-sha384.js';\nimport SASLSHA512 from './sasl-sha512.js';\nimport SASLXOAuth2 from './sasl-xoauth2.js';\nimport TimedHandler from './timed-handler.js';\nimport Websocket from './websocket.js';\nimport WorkerWebsocket from './worker-websocket.js';\nimport log from './log.js';\nimport { ElementType, ErrorCondition, LOG_LEVELS, NS, Status, XHTML } from './constants.js';\nimport { stx, toStanza, Stanza } from './stanza.js';\n\n/**\n * A container for all Strophe library functions.\n *\n * This object is a container for all the objects and constants\n * used in the library.  It is not meant to be instantiated, but to\n * provide a namespace for library objects, constants, and functions.\n *\n * @namespace Strophe\n * @property {Handler} Handler\n * @property {Builder} Builder\n * @property {Request} Request Represents HTTP Requests made for a BOSH connection\n * @property {Bosh} Bosh Support for XMPP-over-HTTP via XEP-0124 (BOSH)\n * @property {Websocket} Websocket Support for XMPP over websocket\n * @property {WorkerWebsocket} WorkerWebsocket Support for XMPP over websocket in a shared worker\n * @property {number} TIMEOUT=1.1 Timeout multiplier. A waiting BOSH HTTP request\n *  will be considered failed after Math.floor(TIMEOUT * wait) seconds have elapsed.\n *  This defaults to 1.1, and with default wait, 66 seconds.\n * @property {number} SECONDARY_TIMEOUT=0.1 Secondary timeout multiplier.\n *  In cases where Strophe can detect early failure, it will consider the request\n *  failed if it doesn't return after `Math.floor(SECONDARY_TIMEOUT * wait)`\n *  seconds have elapsed. This defaults to 0.1, and with default wait, 6 seconds.\n * @property {SASLAnonymous} SASLAnonymous SASL ANONYMOUS authentication.\n * @property {SASLPlain} SASLPlain SASL PLAIN authentication\n * @property {SASLSHA1} SASLSHA1 SASL SCRAM-SHA-1 authentication\n * @property {SASLSHA256} SASLSHA256 SASL SCRAM-SHA-256 authentication\n * @property {SASLSHA384} SASLSHA384 SASL SCRAM-SHA-384 authentication\n * @property {SASLSHA512} SASLSHA512 SASL SCRAM-SHA-512 authentication\n * @property {SASLOAuthBearer} SASLOAuthBearer SASL OAuth Bearer authentication\n * @property {SASLExternal} SASLExternal SASL EXTERNAL authentication\n * @property {SASLXOAuth2} SASLXOAuth2 SASL X-OAuth2 authentication\n * @property {Status} Status\n * @property {Object.<string, string>} NS\n * @property {XHTML} XHTML\n */\nconst Strophe = {\n    /** @constant: VERSION */\n    VERSION: '3.0.0',\n\n    /**\n     * @returns {number}\n     */\n    get TIMEOUT() {\n        return Bosh.getTimeoutMultplier();\n    },\n\n    /**\n     * @param {number} n\n     */\n    set TIMEOUT(n) {\n        Bosh.setTimeoutMultiplier(n);\n    },\n\n    /**\n     * @returns {number}\n     */\n    get SECONDARY_TIMEOUT() {\n        return Bosh.getSecondaryTimeoutMultplier();\n    },\n\n    /**\n     * @param {number} n\n     */\n    set SECONDARY_TIMEOUT(n) {\n        Bosh.setSecondaryTimeoutMultiplier(n);\n    },\n\n    ...utils,\n    ...log,\n\n    shims,\n\n    Request,\n\n    // Transports\n    Bosh,\n    Websocket,\n    WorkerWebsocket,\n    Connection,\n    Handler,\n\n    // Available authentication mechanisms\n    SASLAnonymous,\n    SASLPlain,\n    SASLSHA1,\n    SASLSHA256,\n    SASLSHA384,\n    SASLSHA512,\n    SASLOAuthBearer,\n    SASLExternal,\n    SASLXOAuth2,\n\n    Builder,\n    ElementType,\n    ErrorCondition,\n    LogLevel: LOG_LEVELS,\n    /** @type {Object.<string, string>} */\n    NS,\n    SASLMechanism,\n    /** @type {Status} */\n    Status,\n    TimedHandler,\n\n    XHTML: {\n        ...XHTML,\n        validTag: utils.validTag,\n        validCSS: utils.validCSS,\n        validAttribute: utils.validAttribute,\n    },\n\n    /**\n     * Render a DOM element and all descendants to a String.\n     * @method Strophe.serialize\n     * @param {Element|Builder} elem - A DOM element.\n     * @return {string} - The serialized element tree as a String.\n     */\n    serialize(elem) {\n        return Builder.serialize(elem)\n    },\n\n    /**\n     * @typedef {import('./constants').LogLevel} LogLevel\n     *\n     * Library consumers can use this function to set the log level of Strophe.\n     * The default log level is Strophe.LogLevel.INFO.\n     * @param {LogLevel} level\n     * @example Strophe.setLogLevel(Strophe.LogLevel.DEBUG);\n     */\n    setLogLevel(level) {\n        log.setLogLevel(level);\n    },\n\n    /**\n     * This function is used to extend the current namespaces in\n     * Strophe.NS. It takes a key and a value with the key being the\n     * name of the new namespace, with its actual value.\n     * @example: Strophe.addNamespace('PUBSUB', \"http://jabber.org/protocol/pubsub\");\n     *\n     * @param {string} name - The name under which the namespace will be\n     *     referenced under Strophe.NS\n     * @param {string} value - The actual namespace.\n     */\n    addNamespace(name, value) {\n        Strophe.NS[name] = value;\n    },\n\n    /**\n     * Extends the Strophe.Connection object with the given plugin.\n     * @param {string} name - The name of the extension.\n     * @param {Object} ptype - The plugin's prototype.\n     */\n    addConnectionPlugin(name, ptype) {\n        Connection.addConnectionPlugin(name, ptype);\n    },\n};\n\nglobalThis.$build = $build;\nglobalThis.$iq = $iq;\nglobalThis.$msg = $msg;\nglobalThis.$pres = $pres;\nglobalThis.Strophe = Strophe;\n\nexport { Builder, $build, $iq, $msg, $pres, Strophe, Stanza, stx, toStanza, Request };\n"],
  "mappings": "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",
  "names": ["t", "hasDoctypeChildThatIsNotChild", "node", "getTextContent", "a", "end", "value", "DOMParser", "sax", "atob", "btoa", "atob", "btoa", "elem", "callback", "stanza", "elem"]
}
